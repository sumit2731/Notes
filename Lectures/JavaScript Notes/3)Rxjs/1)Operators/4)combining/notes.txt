Refrence Sources -
    https://www.learnrxjs.io/learn-rxjs/operators/combination/forkjoin
    https://rxjs.dev/api/index/function/forkJoin

Static Methods -

    1)concat -Creates an output Observable which sequentially emits all values from given Observable and when that observable
        completes, it then moves on to the next. concat is an equivalent of merge operator with concurrent parameter set to 1.
        If any Observable in chain errors, instead of passing control to the next Observable, concat 
        will error immediately as well. The resultant observable will complete when all observables completes.

        If any observables errors out, resultant observable also errors out.
        when all observables complete, resultant observable also completes.

        concat(obs1,obs2,obs3).

    2)merge - Creates an output Observable which concurrently emits all values from every given input Observable.
        The output Observable only completes once all input Observables have completed.

        By default all observables are subscribes immediatly, but we can pass a optional argument that controls how
        many observables are subscribed concurretly.(example in rxjs docs).

        if any observable errors out, resultant observables also errors out.
        when all observables complete, resultant observable also completes.

        signature -
        merge(v1: any, v2: any, scheduler: SchedulerLike): Observable<T | T2>

        This operator can be used as either a static or instance method!

        const example = merge(obs1,obs2,obs3)
        const example = first.pipe(merge(second));

    3)zip - Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each 
        of its input Observables.If the latest parameter is a function, this function is used to compute the created value from 
        the input values. Otherwise, an array of the input values is returned.resultant selector is deprecated in new versions.



        it takes n number of observables, when all observables emits values, resultant observable also emits a value that value 
            is array,which contains value from all observables(in sequence they are provided). then it again waits for all 
            observables to emit next value. 
            
            If any one observables completes, resultant observable also completes.
            If any observable errors out resultant observable also errors out.

            observation -

            in below code we do no get any value, we immediately get error-

            let interval1 = interval(1000).pipe(take(5),mapTo("Hello 1"));
            let interval2 = interval(2000).pipe(mapTo("Hello 2"));
            let obs3$ = concat(of("sumeet"),throwError("sood").pipe(delay(5000)));
            zip(interval1, interval2,obs3$).subscribe(
                val => console.log(val),val => console.log("Error in zip "+val),() => console.log("Completed"));

    4)race - Returns an Observable that mirrors the first source Observable to emit an item from the combination of this 
        Observable and supplied Observables.

        If any observable errors out before first value is emitted by any other observable, resultant observable errors out.
            like here first observable emits error before second and third emits value, so resultant observable errors out. 

        const first = of('first').pipe(
        delay(100),
        map(_ => {
            throw 'error';
        })
        );
        const second = of('second').pipe(delay(200));
        const third = of('third').pipe(delay(300));
        // nothing logged
        race(first, second, third).subscribe(
            val => console.log(val),error => console.log("Error = " +error),() => console.log("Completed"));

    5)forkJoin - Observable emitting either an array of last values emitted by passed Observables or value from project function.

        Accepts an Array of ObservableInput or a dictionary Object of ObservableInput and returns an Observable that emits either
         an array of values in the exact same order as the passed array, or a dictionary of values in the same shape as the passed
         dictionary.

        In order for resulting array to have the same length as the number of input observables, whenever any of that observables
         completes without emitting any value, forkJoin will complete at that moment as well and it will not emit anything either,
         even if it already has some last values from other observables. So
          
        Conversely, if there is an observable that never completes, forkJoin will never complete as well,

        Overall, in order for forkJoin to emit a value, all observables passed as arguments have to emit something at least once and 
         complete.

        If any input observable errors at some point, forkJoin will error as well and all other observables will be immediately 
         unsubscribed.

            forkJoin(
            // as of RxJS 6.5+ we can use a dictionary of sources
                {
                    google: ajax.getJSON('https://api.github.com/users/google'),
                    microsoft: ajax.getJSON('https://api.github.com/users/microsoft'),
                    users: ajax.getJSON('https://api.github.com/users')
                }
            )
            // { google: object, microsoft: object, users: array }
            .subscribe(console.log);

            or

            forkJoin(
            // as of RxJS 6.5+ we can use a dictionary of sources
                [
                    ajax.getJSON('https://api.github.com/users/google'),
                    ajax.getJSON('https://api.github.com/users/microsoft'),
                    ajax.getJSON('https://api.github.com/users')
                ]
            )
            // [ object, object, array ]
            .subscribe(console.log);

    6)combineLatest - When any observable emits a value, emit the last emitted value from each
        combineLatest(observables: ...Observable, project: function): Observable
        
        combineLatest accepts either an array of Observables or each Observable can be put directly as an argument

        Be aware that combineLatest will not emit an initial value until each observable emits at least one value. resultant 
            observable waits for each observable to emit first value.when all observable have emitted atleast one value, then
            resultant observable emits first value. this value is array which contains all values of observable.now with each
            subsequent emisison from each observable resultant observable will emit a value, which combines latest value of 
            observable which emitted value, with last emitted value from each observable.we can also pass a selector function
            which combines values of observables.

        If one observable completes, its last value is used in stream.
        If any Observable errors, combineLatest will error immediately as well, and all other Observables will be unsubscribed.
        If some Observable does not emit a value but completes, resulting Observable will complete at the same moment without 
            emitting anything.
        Resultant observable will complete when all observables passed have completed.
        
        here interval1 emits value (0,1) before interval2 and and interval3 emits values. so they are lost.

        let interval1$ = interval(1000).pipe(take(3));
        let interval2$ = interval(2000).pipe(take(3));
        let interval3$ = interval(3000).pipe(take(3));
        combineLatest(interval1$,interval2$,interval3$).subscribe(
            val => console.log(val),
            error => console.log("Error = " +error),
            () => console.log("Completed"));

        output -
            [   ] [2,1,0] [2,2,0] [2,2,1] [2,2,2]


    
Operators-

        
    1)concatAll
    
    2)mergeAll
    
    3)combineAll -When source observable completes use combineLatest with collected observables

    4)startWith - Returns an Observable that emits the items you specify as arguments before it begins to emit items emitted by the 
        source Observable.

        const source = interval(1000);
        //start with -3, -2, -1
        const example = source.pipe(startWith(-3, -2, -1));
        //output: -3, -2, -1, 0, 1, 2....
        const subscribe = example.subscribe(val => console.log(val));

        you can also provide multiple values. your observble will emits these values before.

    5)endWith - opposite of startWith
        like startWith you can provide multiple values.

    6)withLatestfrom - when ever source obserbale emits value, combines its value with latest value of observable provided as argument to this operator.
        signature: withLatestFrom(other: Observable, project: Function): Observable

        instead of single observable we can provide multiple observbles to withLatestfrom.

        however resultant observable emits first value only when both source observbale and provided observable emits value.if provided observbale is slower
            then values emitted by source observable before provided observble emits values are lost. but once provided observable emits first value,
            on each value of source observable, our resultant observbale also emits value.

        if source observable or provided observable errors out ,resutant observable also errors out.
        if provided observable completes its last value is used in source stream. if source observable completes, resultant observable also completes.

        let interval1$ = interval(1000).pipe(take(6));
        let interval2$ = interval(2000).pipe(take(6));
        //[1,0] [2,0] [3,1], [4,1] [5,2]
        interval1$.pipe(withLatestFrom(interval2$)).subscribe(val => console.log(val),error => console.log("Error = " +error),() => console.log("Completed"));

    7)pairwise - Emit the previous and current values as an array.The Nth emission from the source Observable will cause the output 
        Observable to emit an array [(N-1)th, Nth] of the previous and the current value, as a pair. For this reason, pairwise emits 
        on the second and subsequent emissions from the source Observable, but not on the first emission, because there is no previous 
        value in that case.
        
        signature: pairwise(): Observable<Array>

    8)withLatestFrom - Combines the source Observable with other Observables to create an Observable whose values are calculated from 
        the latest values of each, only when the source emits.

        withLatestFrom<T, R>(...args: any[]): OperatorFunction<T, R>

        All input Observables must emit at least one value before the output Observable will emit a value.


    Note - go through "see also" section



Paterns -

    1)Single Observable Patern(*ngIf and async pipe) - combineLatest

     
matchers -
    
    1)expect(a).toBe(0)
        

    2)expect([1,2,3]).toEqual([1,2,3])
        
        toBe compares by value, cannot be used to compare refrence types.
        for comparing refrence types use - expect([1,2,3]).toEqual([1,2,3])

        It won't performs recursive property check.

        Check section 6 lecture 48 for difference

    3)expect(a).toBeDefined()
        .toBeUndefined
        .not.toBeDefined()

    4)testng error - see math.test.js in section 3. on how to assert whether function throws or not.
        const resultFn = () => {
            add();
        };
        a)expect(resultFn).toThrow(); // just checks for error to be thrown
        b)expect(resultFn).toThrow('some strng'); // also checks for error thrown and a prticular message, can be string or regular exp or Class Cnstructor

    5)not -
        expect(a).not.toBe(0)
        expect(resultFn).not.toThrow(); //https://jestjs.io/docs/expect#tothrowerror

    6)toBeTypeOf

        expect(result).toBeTypeOf()

    7)toBeInstanceOf(class) - It uses instanceof operator underneath.
        expect(obj).toBeInstanceOf(class)

    7)toBeNaN()
        expect(result).toBeNan()


    8)toContain('someString')
        expect(someSTr).toContain('sunStr)

        This checks if -
            a)string conatins a subtring
            b)if array contains a item

        For checking onjects in array, you need to use toContainEqual()

    9)expect(somevar).toMatch(regexp|string|object)


    7)expect(promise).resolves.
        after this you can use any jest matchers, like -
        expect(promise).resolves.toBe()

        this returns promise and make sure that you return this assertion from your test , if you are testing asynchronous code 
    8)expect(promise).reject()
        expect(promise).resolves.toBe()
        expect(promise).rejects.toBeInstanceof(errorClass) //rejects with object that is instance of given class

    9)expect(value).toBeUndefined()
        asserts that value is undefined

    9)assertins on spies -
        expect(spy).toBeCalled()
        expect(spy).toBeCalledTimes(number)
        expect(spy).toBeCalledWith(argList)


    



assertion count -
    1)expect.assertions(3) -
        Test will only pass if atleast 3 assertions are executed
    2)expect.hasAssertions() - Test will pass if it has atleast 1 assertions


Methods on it and describe - 
    a)describe.concurrent() - all test in describe block will be executed concurrently
    b)it.concurrent() - all tests in given file which have .concurrent will be executed concurrently.

cmd flags -
    vitest --global
        makes the things like expect,it,describe avalible without import as global variables. but importing them gives better
            IDE support
    vitest --run
        instead of getting into watch mode, runs it once only

    vitest --environment happy-dom
        chnages the testing envirenment to use happy-dom


Mocks and Spies -

    a)jest.fn(), vi.fn() - Optionally you can also provide a callback argument, which is implementation.
        creates a empty mock function. there are various methods which can be used to do following -
            a)mockReturnValues, mockResolvedValues, mockReturnValueOnce
            b)mockImplementation,mockImplementationOnce
            c)reset/restore/clear mock
            d)to get hold of arguments,returnValue, this etc - mockFn.mock
                a)mockFn.mock.calls - An array containing the call arguments of all calls that have been made to this mock function. 
                    Each item in the array is an array of arguments that were passed during the call.

                b)mockFn.mock.results - An array containing the results of all calls that have been made to this mock function.
                    Each entry in this array is an object containing a type property, and a value property
                c)mockFn.mock.instances - An array that contains all the object instances that have been instantiated from this
                    mock function using new.
                d)mockFn.mock.lastCall - An array containing the call arguments of the last call that was made to this mock function.
                    If the function was not called, it will return undefined.


        When you call jest.mock('path') all returned functions are replaced by empty mocks. you can use all functions described above on them.
            see ScreenshotListEntry file for details(perfecto code base)

    b)jest.mock('pathToModule') - mocks built in nodemodules,thrid part modules and user defined modules. by default all exports are replaced by empty
        mock(or spies). however you xan also provide implementation of what is returned from module. as second argument you can provide  a callback, whatever
        this callback returns, is returned from module
    Assertions on mocks -
        a)expect(mock).toBeCalled()
        a)expect(mock).toBeCalledWith(arguments)
        a)expect(mock).toBeCalledTimes(number)


Extra from Course -
    a)jest.createMockFromModule(moduleName) - used when you want to implement your manual mock but want to inherit some functionality from orignal mock.
        so that you do not need to define all functions.but note that functions will be mocked and not actual implementation.
        https://jestjs.io/docs/manual-mocks
    b)jest.requireActual(moduleName) - Returns the actual module instead of a mock, bypassing all checks on whether the module should receive a mock
        implementation or not.
        uses -
            a)can be used to get orignal function while defining mocks in __mocks__ folder.
            b)In your testing file, you can define mock using jest.mock("path"), here if you want to define API of mocked module, you can use this.
            c)while defining mocks in testing file, we can use it (https://duckylele.medium.com/mocking-library-functions-and-global-methods-in-jest-ee9081649db8)
    c)jest.requireMock(mockModule) - Returns a mock module instead of the actual module, bypassing all checks on whether the module should be required normally or not.
        a)when you want to mock a module, replace some functions but use some orignal fucntions. inside callback
            to jest.mock, you can use this function. used in Perfecto
        b)require actual implementation in test file, where you have mocked a function.(use din Perfecto)
    c)jest.doMock - will not mock jest.mock to top of your file
        https://github.com/kentcdodds/how-jest-mocking-works

        after calling this, you need to use require or dynamic import to get mocked module.because if you get ES modules, you will get unmocked value.

        this can be useful if you use jestDoMock within a test and you want to mock dfferent values for same test.

    e)jest.resetModules() - Resets the module registry - the cache of all required modules. This is useful to isolate modules where local state might
        conflict between tests.now if we use require in each test, we will get different copy for each test. this can be useful, if we want to
        have different mocks for same module in different tests in file.

        https://jestjs.io/docs/jest-object#jestresetmodules

        can used in combination with jest.doMock(when jest modules are not moved to top)
        here is such example that uses this - https://medium.com/trabe/mocking-different-values-for-the-same-module-using-jest-a7b8d358d78b


    TS types -
        a)jest.Mocked<Source> - gives type to mocked module i.e jest.fn().
            it assumes that all function in given module have been mocked
        b)jest.mocked(source,options) - The mocked() helper method wraps types of the source object and its deep nested members with type definitions of Jest mock
            function. You can pass {shallow: true} as the options argument to disable the deeply mocked behavior.
        c)Jest.Mock<T> - Return the type of jest mock.

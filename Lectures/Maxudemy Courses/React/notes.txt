regarding code of project, each section has its code, but all code repo can be found in "Course Source Code",  there
    we have different branch for diffrent sections and each section we have different codes.




   
questions asked in course -

    1)lecture 54, component getting updated on each form value control change.

pending -
    1)look into artciles that creates a hook for managing form.(section 16, second last lecture)

JSX syntax -

    1)built in props in react -
        a)className = class in html
        b)onClick = handling click based events. all events we have props - 'on' + event name in camel case
        c) htmlFor = for in html

            html -
                <label for="name">Name</label

            jsx -
                <label htmlFor="name">Name</label>

        4)key prop - idnetufies each element while rendering list
                
        5)ref prop -    
            1)you can create variable that does not get reset during re-render.
            2)in built in html elemnts you can use it in jsx, then can access the html refence using useRef() or
                React.createRef.
            3)For custom react components you can use it in jsx, and then can execute the function defined in your custom
                component and exposed by useImperativeHandle. lecture 129 for details.

        6)props.childern - all the content between selectors of custom of component

    
        7)style= "height: 100%"; padding: 20px"  =>  style= {{height: '100px', padding: '20px}}

            
            so while setting properties like bacjround-color either use -
                
                'background-color' (write property name within '') => style = {''background-color' : 'red'}
                
                or 
                
                bakgroundColor (write js version of proeprtyName i.e camelcase version) => style = {bakgroundColor : 'red'}


        8)defaultChecked
            this can be used to check or uncheck a checkbox

            <input type="checkbox" defaultChecked={this.state.chkbox} onChange={this.handleChangeChk} />

2)JSX Tricks -

    1)attaching some multiple as well as stateic classes to jsx element -

        <div className = {`staticClass1 ${flag ? 'dynamicClass' : ''} staticClass2 `}></div>

        <div className = {`staticClass1 ${flag && 'dynamicClass'} staticClass2 `}></div>
        

    2)how to render list of elements -

        <div>
            {[<li></li>, <li></li>]}
        </div>

        here react will render all jsx elemnts given in array. so we make this array dynamic based on the list -

        <div>
            {users.map(user => <li></li>)}
        </div>

    3)how to add all properties of object as attributes to a html element -
        
        <input id={props.input.id} {...props.input}></input>
        It will add all properties of props.input as attribute to input element ex -

        if props.input = {id: 'id1', type: 'text'} will result in -
            <input id="id1" type="text">

    4)component communication - listing the state up

    5)ways of conditional renderting

        section5, lecture 67

    6)You can store jsx element in a variable, then render use them in returned jsx.
            
            const cartItems = 
                <ul>
                    {
                        [{id: 'c1', name: 'Sushi', amount: 2, price: 12.99}].map(item => <li>{item.name}</li> )
                    }
                </ul>
            ;

            return (
                <div>
                    {cartItems}
                </div>
            );

3)hooks in react -
        a)useState - returns a array. First Element is state variable with default value, 
            second one is function to change first state variable
        b)useRef - It has 2 uses -
        
            a)The useRef Hook allows you to persist values between renders.It can be used to store a mutable value that does not 
                cause a re-render when updated.

            b)It can be used to access a DOM element directly.

        c)useEffect -it takes a callback as a function, and array of dependecies.  callback function will be excuted after every 
            reevaluation  of component function , if provided dependencies change.

            useEffect(() => {}, []);

            note that callback can return a cleanup function which will be called -
                a)before calling main callback except when main callback is called first time
                b)when component is destroyed

            1)empty dependency array means run it only once when component re renders.
            2)if we dnt pass second argument, it means run this function which time component is re- rendered.

        d)useReducer - it basically allows us to maage state, it is more powerful than useState.
            const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn);

            for details see section 10 notes.

        e)useContext - lets you grab the context. alternate way of consuming Context API , other way is to wrap the
            jsx in ContextObject.Consumer component.

        f)useImperativeHandler - useImperativeHandle customizes the instance value that is exposed to parent components when 
            using ref.here we can expose variables and function that can be called from parent component. 
            
            As always, imperative code using refs should be avoided in most cases. useImperativeHandle should be used with 
            forwardRef:

        g)useCallback - Allows to store a function across multiple component executions. 
        
            1st argument - callback in question
            2nd rgument - array of dependecues,new function will re returned if array of dependecies which is second argument 
                have changed.

            without useCallback - 
                
                const toggleParagraph = () => {
                    setShowParagraph(showParagraph => !showParagraph);
                };

            with useCallback -

                const toggleParagraph =useCallback( () => {
                    setShowParagraph(showParagraph => !showParagraph);
                },[]);
        
            used with React.Memo

        h)useMemo - It allows you to memorize any kind of data across component function executions.

            first argument is callback, value returned byt his callback is stored in mentioned variable.
            second argument is dependency array, value will be recalculated when something in dependecies array chnages.

            usesage -

                const listItems = useMemo(() =>[5, 3, 1, 10, 9] ,[]);

                  const sortedList = useMemo(() => {
                        console.log("Use Memo CallBack executed");
                        return items.sort((a, b) => a - b);
                   }, [items]);

            see App.js and DEmolIst.js of 12 section, codeblock2



4)React API -

    1)React.foreardRef - with this you can accept the ref argument from outside and it will be availble to
        component function.

    2)React.createContext - crates the context, which helps you to pass data across functions.
        Context.provider
    3)React.Fragment - For wrapping some components together, as react component can return only 1 root level component.
    4)React.createElement - used to create elements while returning from react component. nowa days we dnt have to do that.
    5)React.memo - When component is wrapped inside it while exporting, componnt function will only be called if props passed
        to component are changed(when state in parent component chnaged). 

        code -

            const DemoOutput = (props) => {
                console.log("DemoOutput running");
                return (
                    <MyParagraph>{props.show ? 'This is new!': ''}</MyParagraph>
                );
            }
            export default React.memo(DemoOutput);

        when to use it - performance cost of revelauating the component vs performace cost of comparing props.

        By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, 
        you can also provide a custom comparison function as the second argument.

            function MyComponent(props) {
                /* render using props */
            }
            
            function areEqual(prevProps, nextProps) {
                /*
                return true if passing nextProps to render would return
                the same result as passing prevProps to render,
                otherwise return false
                */
            }
            
            export default React.memo(MyComponent, areEqual);

    6)React.Suspense, React.lazy



5)ReactDOM API -

    1)createPortal
        In jsx of component you can write this -
            {ReactDOM.createPortal(<BackDrop onConfirm = {props.onConfirm}  />, document.getElementById("backdrop-root"))}

    2)ReactDOM.render - reners the component inside element in DOM. code is used in index.js
        ReactDOM.render(<App />, document.getElementById('root'));


6)react-outer-dom

    1)import {BrowserRouter} from 'react-router-dom';

        ReactDOM.render(
            <BrowserRouter>
                <App />
            </BrowserRouter>, 
            document.getElementById('root')
        );


    2)import { Switch, Route,Redirect } from 'react-router-dom';

        <Switch>

          <Route path="/" exact>
            <Redirect to="/welcome"></Redirect>
          </Route>
          
          <Route path="/welcome">
            <Welcome></Welcome>
          </Route>

          <Route path="/products" exact>
            <Products></Products>
          </Route>

          <Route path="/products/:productId">
            <ProductDetail></ProductDetail>
          </Route>
        
        </Switch>

    3)import {Link, NavLink} from 'react-router-dom';

        <nav>
                <ul>
                    
                    <li>
                       
                        <NavLink to="/welcome" activeClassName = {classes.active}>Welcome</NavLink>
                    </li>

                    <li>
                  
                        <NavLink to="/products" activeClassName = {classes.active}>Products</NavLink>
                    </li>
                
                </ul>
        </nav>

    4)import {useParams} from 'react-router-dom';
        this hook allow us to read params from url
        const ProductDetail = () => {
            const params = useParams();
            console.log(params.productId);
        
        };

    5)import {useHistory} from 'react-router-dom';

    5)import {useRoute} from 'react-router-dom';
    
    let { path, url } = useRouteMatch();



BrowserRouter -> Router -> Router.Provider -> Router-History.provider -> component
Route -> Router.Consumer -> Router.Provider -> component
Switc ->  Router.Consumer -> Route -> Router.Consumer -> Router.Provider -> component
Code 1 - 
    Module federation lets one application to dynamically load modules from another application at run rime.

    HelloWorldApp is exposing a module and Kiwi app is using that module.

    In First 4 lectures, we created 2 separate apps,Kiwi and HelloWorld. In HelloWorld we exposed some modules using
        ModuleFederationPlugin. Changes are in WebpackConfig file in plugin section, we have to set the Public Path also
        where in the end app will be deployed.
        
        
        Then in Kiwi App we consumed that module. using ModuleFederationPlugin , first we told webpack where to find imports with that path.
            then in dynamic path we imported the module which is exposed by HelloWorld App. changes are in webpack config and in Kiwi.js.
            dynamic import is needed because dynamic bundles are loaded asynchronously


code 2 -
    here we are consuming modules from 2 apps in single app (dashboard). see figure 1.

    we load both these module in dashboard/dashboards.js


code3 -
    till now we talked about one level deep module federation.we had on host application and 2 federated modules that were
    refrenced from host.its also possible to have nested federated module. a mpdule can serve both as remote and host.

    see figure 2. kiwi is host  for ImageCaption and at a same time it will still be consumed as  federated module inside
    dashboard.
Intro To WebWorkers
    web worker is a JavaScript file that runs on a separate thread from the web page thread.So you have
    your JavaScript that loads into your web page.And then you can have a separate JavaScript file which
    acts as a separate program, running in a background thread.


    All the web browser guarantees is that if you spin up a web worker,it will be on a different 
    thread from the main page.If you spin up multiple workers,in general they will often have 
    separate threads.But there is no actual guarantee that every single thread that you make 
    willhave a completely separate thread.Because if that was a guarantee, then this would be
    very easy to denial of service somebody's browser, somebody's device.So the only guarantee
    is that you can spin off at least one extra thread to handle web worker work.

    Types of Web Workers -


        child workers - in some browsers and configurations,a worker can spin off another worker which is 
            called a child worker.And in some configurations, that doesn't work.But the page can spin up 
            multiple workers and then try to ferry communications between them.
        
        Specialized WebWorkers -
            dedicated web worker - if you spin up a worker for a web page,that's called a dedicated worker,
                which means it belongs to that web page.And when you close that tab, that worker is immediately
                killed.if you had multiple tabs of the same site open.You'd get multiple dedicated workers, each
                one tied to that page.
            Shared worker -
                there's another way of creating a worker, and again not all browsers and configurations 
                handle this often.When we're talking about limitations,mobile devices will limit some of this
                stuff more than a desktop typically will. if you had multiple tabs.If you had a web app or site
                where it was common for your users to have multiple tabs of your site open, maybe a shopping site
                or something.You can have a shared worker which is running once.And it's able to communicate with 
                each instance of all the open pages.It lives as long as their is 1 open tab.

                But just be aware shared workers are not absolutely guaranteed to work everywhere sort of thing.
                You're gonna need to gracefully handle if that's not,don't build your main functionality on it.

    Service Workers -
        In all of those cases that we've talked about, they belong to the tab.And as soon as the tab goes away, 
            or all the tabs that are sharing it go away, that thing dies.What is gonna be unique and different 
            when we get into service workers is that service workers survive in the background beyond the tab 
            going away,beyond tab being closed, beyond somebody navigating to some other page.


        There's a ton of security model involved where just because it's running in the background doesn't mean 
        that it's spying on you.It can still only communicate with the pages that it was spun up from.But also,
        the browser manages the life cycle of that.

        And so it may live for 5 or 10 or15 seconds in the background while it's doing some stuff.And then once
            it's idle, it'll be shut down.It could potentially spin back up.And we'll talk about advanced use
            cases where a service worker can be spunup in the background, even when your page isn't open.But
            again, it would only live for a matter of a few seconds and then go away.So the browser manages all
            that stuff for you

    What we will be doing in project-
        when we click on stop, it kills the web workers.Now, the reason why we need to kill the web worker is 
        because the communication that happens between the page and a web worker is based upon asynchronous 
        eventing.postMessage is how we communicate.

        It's an asynchronous event.But an asynchronous event cannot be processed if some code is already running.

        So if we have some code running that's churning for seconds or minutes on in trying to generate a 
            Fibonacci number, and we try to send it a message.That message is gonna just sit there, waiting for 
            somebody to pick it up.So we can't rely upon sending a message to a worker that is busy to tell it 
            hey,stop doing what you're doing.So the better way of telling it to stop doing what it's doing is 
            to terminate the web worker


        

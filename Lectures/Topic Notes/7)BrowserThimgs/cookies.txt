attributes -

    path - decides cookie will be avalible at which paths.
    domain - the domain option allows to make a cookie accessible at subdomains.
    expires,max-age -if a cookie doesn’t have one of these options, it disappears when the browser is closed. Such cookies are 
        called “session cookies”.To let cookies survive a browser close, we can set either the expires or max-age option.

        expires=Tue, 19 Jan 2038 03:14:07 GMT
    
    securiy -

        Secure - The cookie should be transferred only over HTTPS.
            document.cookie = "user=John; secure";

        HttpOnly - The web-server uses the Set-Cookie header to set a cookie. Also, it may set the httpOnly option.
            This option forbids any JavaScript access to the cookie. We can’t see such a cookie or manipulate it using
             document.cookie.

        samesite -
            samesite=strict(default) - cookie is never sent if the user comes from outside the same site.
            samesite=lax - just like strict, forbids the browser to send cookies when coming from outside the site, but adds an exception.
                A samesite=lax cookie is sent if both of these conditions are true:
                    a)The HTTP method is “safe” (e.g. GET, but not POST)-Following a link is always GET, the safe method.
                    b)The operation performs a top-level navigation (changes URL in the browser address bar).
                        So, what samesite=lax does, is to basically allow the most common “go to URL” operation to have cookies.
                        samesite is ignored (not supported) by very old browsers, year 2017 or so.
            samesite=none - cookie will be sent when we are in another domain also.
        Example - Set-Cookie: id=a3fWa; Expires=Thu, 21 Oct 2021 07:28:00 GMT; Secure; HttpOnly


async getData(): Promise<ApiResponse> {
    let defaultHeaders = new HttpHeaders();
    defaultHeaders = defaultHeaders.append('Accept', 'application/json');
    const requestOptions = { headers: defaultHeaders, withCredentials: true};
    const apiResponse: ApiResponse = await this.http.get<ApiResponse>(`//myexam.ple/api`, requestOptions).toPromise();
    return apiResponse;
  }
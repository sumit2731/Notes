Angular 4 -
    
    1)new ngIf 'as' syntax .
    
    2)runGuardsAndResolvers options. so there 3 options-
        always,paramsChange and paramsOrQueryParamsChange
        default option is paramsChange
    
    3)In some version we were able to provide object literal syntax for specifying the providers. link-
        https://blog.thoughtram.io/angular/2016/05/13/angular-2-providers-using-map-literals.html

3)Angular 5 -
    1)Since version 5.0.0, ReflectiveInjector has been deprecated in favour of StaticInjector to not depend on 
        reflection to get hold of dependencies

4)Agular 6 -
    a)Many of the improvements in Angular 6 were to Angular CLI. The one I have really been looking forward to is the integration
     of Angular CLI with ng-packagr to generate and build Angular libraries. ng-packagr is a fantastic tool created by David 
     Herges that transpiles your library to the Angular Package Format.

    b)Angular CLI configuration file angular-cli.json has been replaced with angular.json.now we can see project property
        in anglar.json, it means we can multiple projects under same workspace.

    c)new way of defining providers, i.e defining providers at level of @Injectable.


4)Angular 7 -
    1)CanLoad is newly introduced in Angular-7.
    2)Angular v7 introduced a couple of new options to the runGuardsAndResolvers - 
        pathParamsChange, pathParamsOrQueryParamsChange and it’s now even possible to pass a function to the 
            runGuardsAndResolvers that will be invoked by the framework, passing the current and future 
            ActivatedRouteSnapshot. That gives you full flexibility to inspect the current router state and decide 
            accordingly.
    3)We can pass state while doing navigation, and thenw wecan acess it in window.history.state 

5)Angular 8 -
    1)Starting with Angular 8, Ivy has been shipped behind a flag in experimental mode, while in Angular v9 it is active by 
        default.

    2)starting with Angular v8+ the NgModuleFactoryLoader has been deprecated. now you can use dynamic import syntx. then use
        Compiler service to get NgModuleFactory.

    3)Since Angular 8 we can use the browser’s built-in dynamic imports to load JavaScript modules asynchronous in Angular.
5)Angular 9 -
    Angular 9, Ivy is the standard engine for rendering your content.
Modifies Orignal Array -

    1)copyWithin()

    2)splice()* -This method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
        let arrDeletedItems = array.splice(start[, deleteCount[, item1[, item2[, ...]]]])

        start - If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, 
            meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.)

        Retrun Value- An array containing the deleted elements.

   

Methods that do not modify the orignal Array -


    2)entries() - thi method returns a new Array Iterator object that contains the key/value pairs for each index in the array.

    3)every()* - The every() method tests whether all elements in the array pass the test implemented by the provided function. 
        It returns a Boolean value.

        Syntax - arr.every(callback(element[, index[, array]])[, thisArg])

        Return Value - boolean 
            true if the callback function returns a truthy value for every array element. Otherwise, false.

        
        The range of elements processed by every is set before the first invocation of callback. Therefore, callback will not run on 
            elements that are appended to the array after the call to every begins. If existing elements of the array are changed, 
            their value as passed to callback will be the value at the time every visits them. Elements that are deleted are not 
            visited. exmaple on mdn docs proove this same point.

    4)Array.prototype.filter()* - callback is invoked only for indexes of the array which have assigned values; it is not invoked 
        for indexes which have been deleted or which have never been assigned values.

        The range of elements processed by filter() is set before the first invocation of callback. 
        a)Elements which are appended to the array (from callback) after the call to filter() begins will not be visited by callback. 
        b)If existing elements of the array are changed, their value as passed to callback will be the value at the time map visits them.
        c)If existing elements of the array are deleted in the same way they will not be visited.
            exmaple on mdn docs proove this same point.
    
    5)Array.prototype.find()* - callback is invoked for every index of the array, not just those with assigned values. This means it may
        be less efficient for sparse arrays, compared to methods that only visit assigned values.

        The find method does not mutate the array on which it is called, but the function provided to callback can. If so, the elements 
        processed by find are set before the first invocation of callback. Therefore:

        a)callback will not visit any elements added to the array after the call to find begins.
        b)If an existing, yet-unvisited element of the array is changed by callback, its value passed to the callback will be the value 
            at the time find visits that element's index.
        c)Elements that are deleted are still visited.

    6)Array.prototype.find()* - 
        arr.findIndex(callback( element[, index[, array]] )[, thisArg])
        if array are modified in iteration same rule as find are folowed.

    7)Array.prototype.flat() -
        The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.



    3)indexOf - The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is 
        not present.indexOf() compares searchElement to elements of the Array using strict equality (the same method used by 
        the === or triple-equals operator)

        Signature - arr.indexOf(searchElement[, fromIndex])
        fromIndex - The index to start the search at.If the provided index value is a negative number, it is taken as the offset 
            from the end of the array. Note: if the provided index is negative, the array is still searched from front to back. 
            If the provided index is 0, then the whole array will be searched. Default: 0 (entire array is searched).

        Returns - index of element



----------------------------------------------------------------------------------------------------------------------

Array Creation -

    1)Using assignment operator
        var array = [];
        var array2 = [1,2,3,4,5];
        let arr = [...arr1];
        
    2. Using Array Constructor
        Array can be called with or without new. both create new array instance.
            
            new Array()
            new Array(element0)
            new Array(element0, element1)
            new Array(element0, element1, /* … ,*/ elementN)
            new Array(arrayLength)

            A JavaScript array is initialized with the given elements, except in the case 
            where a single argument is passed to the Array constructor and that argument 
            is a number. in that case adn empty array with length equal to that number is created.
          
    3)Using Array.from -
        The Array.from() static method creates a new, shallow-copied Array instance from an iterable or array-like object.
        In case of iterable individual values are values that we get in loop. In case of Array like objects, no of elements in array
        are equal to length property and individual properties are taken from numbered properties. also for indexes which no values
        are provided, undefined value ia taken. 

                
        Signature - 
            Array.from(arrayLike)
            Array.from(arrayLike, mapFn)
            Array.from(arrayLike, mapFn, thisArg)
        
            arrayLike - An iterable or array-like object to convert to an array.
            mapFn signature - (element, index, thisArg) => derivedElement

    4)Using Array.of

        The Array.of() static method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments.

            console.log(Array.of('foo', 2, 'bar', true));
            // Expected output: Array ["foo", 2, "bar", true]

            console.log(Array.of());
            // Expected output: Array []

        It is similar to Array constructor but difference is in handling of single argument.
            
            Array.of(5) → [5]
            Array(5) → [empty x 5]





Filling Values into Array -

    1)fill()* - The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end 
        index (default array.length). It returns the modified array.

        arr.fill(value[, start[, end]])

        Parameters -

            value - Value to fill the array with. (Note all elements in the array will be this exact value.)
            start (Optional) Start index, default 0.
            end (Optional) End index, default arr.length.

            If start is negative, it is treated as array.length + start.
            If end is negative, it is treated as array.length + end.
            fill is intentionally generic: it does not require that its this value be an Array object.
            fill is a mutator method: it will change the array itself and return it, not a copy of it.
            If the first parameter is an object, each slot in the array will reference that object.

        Return -
            The modified array, filled with value.

        Code - 

            let arr = Array(10).fill(false);

        Orignal Array Modified - Yes

    2)Using Array.from

        let arr = Array.from(Array(10), (val, index) => index)

    3)Creating empty array then calling map on it
        let arr = Array(10).map((val, index, array) => index) // map skips empty array so use this -

        let arr = [...Array(10)].map((val, index, array) => index)


Joining Arrays -
    1)concat - The concat method creates a new array consisting of the elements in the object on which it is called, followed in order
     by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not
     an array). It does not recurse into nested array arguments.

     The concat method does not alter this or any of the arrays provided as arguments but instead returns a shallow copy that contains 
     copies of the same elements combined from the original arrays

        Syntax -

            concat()
            concat(value0)
            concat(value0, value1)
            concat(value0, value1, ... , valueN)

        Return -

            A new Array instance.

        Orignal Array Modified - No

Getting subSrray - 

    1)slice(also exist on strigs) -The slice() method returns a shallow copy of a portion of an array into a new array object,
        selected from begin to end (end not included) where begin and end represent the index of items in that array. 
        The original array will not be modified.

        Signature - arr.slice([start[, end]])

        Both start end end are optional.If starting index is larger than indexes avalible then emty array is returned.If end is
        omitted,slice extracts through the end of the sequence (arr.length).If end is greater than the length of the sequence, slice 
        extracts through to the end of the sequence (arr.length).

        A negative index can be used, indicating an offset from the end of the sequence.

        empty array is returned when -
            both start and end Indxes are same.
            starting index is more than length of array
        
            let arr = [0,1,2,3,4,5]
            slice(1,4); // [1,2,3]
            slice(-3,-1); //[3,4]
            slice(1,-3);//[1,2]
            slice(1,-5);// []

        return value - A new array containing the extracted elements.

Getting Single Value from Array -

    1)Array.join - The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-
        like object), separated by commas or a specified separator string. If the array has only one item, then that item will be 
        returned without using the separator.

        Signature - arr.join([separator])

        separator- (Optional)Specifies a string to separate each pair of adjacent elements of the array. The separator is converted to 
            a string if necessary. If omitted, the array elements are separated with a comma (","). If separator is an empty string, 
            all elements are joined without any characters in between them.

        Returns - combined string

        Syntax Examples -

            const elements = ['Fire', 'Air', 'Water'];

            console.log(elements.join());
            // expected output: "Fire,Air,Water"

            console.log(elements.join(''));
            // expected output: "FireAirWater"

            console.log(elements.join('-'));
            // expected output: "Fire-Air-Water"

        Orignal Array Modified - No

    2)reduce- This method executes a reducer function (that you provide) on each element of the array, resulting in single output value.

        Syntax -
            arr.reduce(callback( accumulator, currentValue[, index[, array]] )[, initialValue])

        The reducer function takes four arguments:

            Accumulator (acc)
            Current Value (cur)
            Current Index (idx)
            Source Array (src)
        
        The accumulator accumulates callback's return values. It is the accumulated value previously returned in the last invocation
        of the callback—or initialValue, if it was supplied (see below). if it is not supplied then in first iteration,
        accumulator's value is equal to current value of array.
        
        Your reducer function's returned value is assigned to the accumulator, whose value is remembered across each iteration
        throughout the array, and ultimately becomes the final, single resulting value.

        Note -
            If initialValue is not provided, reduce() will execute the callback function starting at index 1, skipping the first index. 
            If initialValue is provided, it will start at index 0.
            Calling reduce() on an empty array without an initialValue will throw a TypeError.
            If the array only has one element (regardless of position) and no initialValue is provided, or if initialValue is provided 
                but the array is empty, the solo value will be returned without calling callbackFn.

        Return Value - value that is returned(accunulator) in last iteratNo

        Orignal Array Modified - No


Accessing the Array elements -
    1)arr.at(index) - even negative indexes are allowed.




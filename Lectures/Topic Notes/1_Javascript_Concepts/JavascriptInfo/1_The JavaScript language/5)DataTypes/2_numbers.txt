Regular numbers in JavaScript are stored in 64-bit format IEEE-754, also known as “double precision floating point 
    numbers". they can store numbers upto pow(2,53) -1.

We also can use underscore _ as the separator: 100_000

here is how we represent numbers shortly -
    
    1e3 === 1 * 1000; // e3 means *1000
    1.23e6 === 1.23 * 1000000; // e6 means *1000000
    let billion = 1e9;  // 1 billion, literally: 1 and 9 zeroes
    alert( 7.3e9 );  // 7.3 billions (same as 7300000000 or 7_300_000_000)

negative number after "e" means a division by 1 with the given number of zeroes:

    // -3 divides by 1 with 3 zeroes
    1e-3 === 1 / 1000; // 0.001

    // -6 divides by 1 with 6 zeroes
    1.23e-6 === 1.23 / 1000000; // 0.00000123

    // an example with a bigger number
    1234e-2 === 1234 / 100; // 12.34, decimal point moves 2 times

Hex numbers -
    0x

binary number -
    0b
octal number - 
    0h

    let a = 0b11111111; // binary form of 255
    let b = 0o377; // octal form of 255
    alert( a == b ); // true, the same number 255 at both sides

Two dots to call a method on number -
    2..toString()

Methods to convert decimals into integar -
    Math.floor
    Math.ceil
    Math.round
    Math.trunc

Method to remove decimal    
    .toFixed()

Imprecise Calculations -
    Internally, a number is represented in 64-bit format IEEE-754, so there are exactly 64 bits to store a number: 52
        of them are used to store the digits, 11 of them store the position of the decimal point, and 1 bit is for the
        sign.

    If a number is really huge, it may overflow the 64-bit storage and become a special numeric value Infinity.

isNaN
isFinite
Object.is - same as === except 2 edge cases - a) comparing NaN b)0 and -0 are diffrent

parseInt, parseFloat - They “read” a number from a string until they can’t. In case of an error, the gathered number 
    is returned. The function parseInt returns an integer, whilst parseFloat will return a floating-point number.
    these also expect a second argument which is base of 

Math.random
Math.max
Math.min
Math.pow(n,power)
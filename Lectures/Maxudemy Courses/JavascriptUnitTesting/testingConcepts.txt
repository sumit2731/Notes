Units - Smallest building block of code.
Good tests-
    a)AAA pattern
    b)only test one thing
    c)are simple and short
    d)keep assertions less

ONly test your code, do not tests, library or API provided by ENV.

Unit test can help us to write better code, we generally want functions to do single thing so that they are easier to test.
    so this unit testing forces us to split our long functions which do lot of things, into smaller functions which do single
    thing only.

How to test functions which call other functions also - If that others functions are written by us, then we can test functions as whole,
    without mocking anything, this will be called as integration tests.

Testing whther functions throw error or not -
    create a custom function that calls your function.
    then pass that function expect and use -
        expect(customFunction).toThrow();

        If you want to check if ot throws with custom message then pass tht string to toThrow -
            expect(customFunction).toThrow(customErrorMessage)

Testing async code-
    callback based code -
        you can pass done callback to 'it' or 'test' callback, then test will end only when this callback is called. and you need to call it manually
            otherwise test will fail due to timeout error.
    promise based code -
        if you return promise from 'it' or 'test' block then test will not end untill that promise is resolves. there are 3 variants to this to execute
        asynchronous code -

            a)return a promise and in that promise use .then to execute some assertions.
            b)use expect.resolves and return it from 'it' or 'test' block, this also returns promise.
            c)use async await in your callback.because by default this aync function returns promise. here you can use try catch block to test failure
                conditions also.use expect.assertions(3) to keep count, of how many assertions needs to be executed.

            All these ways are present in jest documentation. see relevant section notes to find link of documentation.



Mocking Functions and Modules -
    mocks can be created by -
        jest.fn()
        jest.spyon(object, 'methodname')

    You can moc a entire module by -
        jest.mock('pathToModule') - this can be built in module, userModule,thirdPart module.
            This will create default mock function for all things in that module. How to customize that -
                a)pass second argument to jest.mock
                b)defining manual mocks in __mocks__ folder.



Mocking Global Functions -

    See separate notes for that


Testing frontend Code -
    You need to turn on this envirenment -  jsdom or happy-dom(vitest specififc)
    then yu need to provide which HTML should be rendered in that env.
    you can give str or you can readFile and get string from it.


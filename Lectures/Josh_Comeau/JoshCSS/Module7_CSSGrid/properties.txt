grid container properties -
    grid-auto-flow - row(default) | column
        Each grid child comes on its cell. By default if we do not give any config to grid, then it has one column only.
        for each item a new row is created.so we end up with 1*n grid.
        if we want to distribute the elements horizontally instead of vertically, though? We can change the 
        flow direction for implicit grids with the grid-auto-flow property.

        with value 'column', for each item a new column will be created.

        Note that if we give dimensions to column then each item occupies a column.
    
    grid-template-columns: This controls 2 things -
            a)The number of columns we want our grid to have
            b)The individual widths of each column
        25% 75%; (The number of columns we want our grid to have,The individual widths of each column)
        1fr 2fr (fr stands for “fraction”. after giving size to all columns, remaining width is distributed between fr units by ratio's.
            also if width by fr ratios's causes overflow in a column, then minimum width according to content
            will be given to column with fr units.tHis behavviour happens with fr and auto.
        200px 2fr 1fr
        auto - width will be according to content of widest item

        250px repeat(5, 1fr) - column-row Count, height-width
        repeat(4, 200px)
        repeat(auto-fill, 150px) - Create as many as 150 columns as possible. some empty space will be left when left over space is not multiple of 150px. this can be 
            handled using justify-content; see auto-fit also
        repeat(auto-fill, minmax(150px, 1fr)) - here's how it works -
            a)Figure out how many columns we can fit at the minimum acceptable size, 150px.
            b)Scale up each column so that the entire horizontal space is filled
        repeat(auto-fit, minmax(150px, 1fr))
        repeat(auto-fit, minmax(min(100%, 150px),1fr))
        repeat(2, 120px 10% 200px);
        minmax(50px, 1fr) the flexible unit has to come last. minmax(1fr, 250px) is invalid, because 1fr isn't a valid "minimum" value.
        minmax(250px, 1fr)

    grid-template-rows: Using this we can create explicit rows.
        64px 1fr 100px;
        minmax(250px, 1fr)

    gap: 
        8px (for both rows and columns)
        8px 0px; (row column)

        To Support IE use grid-gap

    justify-content: It arranges the column in horizontal axis. if we do not specify any width of column then 
        the default behaviour in CSS Grid is to stretch the columns to take up all available space.this property
        change that.and places the column. if no width is specified for columns, it determines which row has
        largest width and that becomes the width of that column.
            start,
            end,
            center,
            stretch(default),
            space-between,
            space-around,
            space-evenly.

    justify-items - It arranges the items in a cell in horizontal deirection
        start
        end
        center
        stretch(default)

    align-content - aligning rows in grid, in vertical direction. 
        start,
        end,
        stretch(default)
        space-between,
        space-around,
        space-evenly.
    align-items - aligning a item in cell along vertical direction.  
        stretch(default),
        start,
        end,
        center,
        baseline
        controls elements vertical position within row.

    grid-template-areas :
        'sidebar header'
        'sidebar main'


    place-content: align-content / justify-content

    
  

    grid-auto-columns: 200px; (width of implicit column)
    grid-auto-rows: 60px; (height of implicit rows)


grid children properties -
    align-self - placement of a item in cell along vertical axis.
    justify-self - placement of item in cell along horizontal axis.
    grid-area: 'name of area'
    grid-column: 
        3 / 5 (Start column line/ end column line)
        3 (if it only spans one track then second line can be skipped)
        1 / -1
        1 / span 2 (starts from column1 and span 2 columns)
        note for both column and row - counting starts from begining as we well as end.from end negative values are used
    grid-row: 
        2 / 4 (Start row line/ end rpw line)
        2 (if it only spans one track then second line can be skipped)
        2 / -1

    other ways of specifying the row and column -
          grid-row-end: 2;
          grid-row-start: span 2;

Types of DOM Subtrees -
    1)Light tree
    2)Shadow Tree

1) Attching shadow tree -
    elem.attachShadow({mode: …}) creates a shadow tree.
    The elem must be either a custom element, or one of: “article”, “aside”, “blockquote”, “body”, “div”, “footer”, “h1…h6”, “header”, “main” “nav”, “p”, “section”, or “span”. Other elements, like <img>, can’t host shadow tree.

    The mode option sets the encapsulation level. It must have any of two values:

        "open" – the shadow root is available as elem.shadowRoot.Any code is able to access the shadow tree of elem.

        "closed" – elem.shadowRoot is always null.

2)accesing shadow Tree -
    1){mode: 'open'} -
        1)elem.shadowRoot
        2)elem.attachShadow return shadowRoot node.
       
    2){mode: 'closed'} -We can only access the shadow DOM by the reference returned by attachShadow (and probably hidden inside a class). 
        Browser-native shadow trees, such as <input type="range">, are closed. There’s no way to access them.

    The shadow root, returned by attachShadow, is like an element: we can use innerHTML or DOM methods, such as append, to populate it.

3)The element with a shadow root is called a “shadow tree host”, and is available as the shadow root host property:

4)queryShadowDom -
    document.querySelectorAll('p').length); // 0
    //works if mode:open
    elem.shadowRoot.querySelectorAll('p').length); // 1

5)Encapsulation -
    1)Use styles only from the shadow tree, not from the main document.
    2)Invisible to JavaScript selectors from the main document, such as querySelector.
    3)Have their own ids space.

1)API -
    1)attacheding shadow Root-
        const shadow = this.attachShadow({mode: 'open'});
        shadow.innerHTML = `<p>Hello, ${this.getAttribute('name')}</p>`;
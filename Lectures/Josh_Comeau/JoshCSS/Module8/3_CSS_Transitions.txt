transition allows us to smooth out the changes that occur in our application. Instead of an element teleporting from one 
spot to another, it glides between the two.

Syntax -
    As we'll discover, the transition property is highly configurable, but only two values are required:

        a)The name of the property we wish to animate

            a)Multiple properties -
      
                If you plan on animating multiple properties, you can pass it a comma-separated list:


                .btn {
                    transition: transform 250ms, opacity 400ms;
                }

                .btn:hover {
                    transform: scale(1.2);
                    opacity: 0;
                }

            b)all keyword
            
                transition-property takes a special value: all. When all is specified, any CSS property that changes will 
                    be transitioned. but it is not reccommneded to use it
          
        b)The duration of the animation


Timing Functions -
    syntax -
        .btn {
            transition: transform 250ms;
            transition-timing-function: linear;
        }
        
        or

        .btn {
            transition: transform 250ms linear;
        }

    a)linear - This means that the element moves at a constant pace; our circle moves by the same amount each frame.
    b)ease-out - Fast Start, Slow End
        use - It's most commonly used when something is entering from off-screen (eg. a modal appearing). It produces the 
            effect that something came hustling in from far away, and settles in front of the user.
    c)ease-in - Slow start, fast end.
        use - Note that ease-in is pretty much exclusively useful for animations that end with the element offscreen or 
            invisible; otherwise, the sudden stop can be jarring.
            It can be worthwhile to combine ease-in and ease-out when something enters and exits the viewport, like a modal.

    d)ease-in-out - Starts slow, accelerates and then solws down in end.
        This timing function is symmetrical. It has an equal amount of acceleration and deceleration.
        It's a big improvement over linear.
        use - I find this curve most useful for anything that happens in a loop (eg. an element fading in and out, over and
            over).

    e)ease - ease is very similar to ease-in-out, with one key difference: it isn't symmetrical. It features a brief ramp-up,
        and lots of deceleration.
        ease is the default value â€” if you don't specify a timing function, ease gets used. This tends to be a good thing: ease
            is a great option in most cases. Unless you're specifically going for a different effect, ease makes a lot of sense.

Custom Curves -
    
    .btn {
        transition: transform 250ms cubic-bezier(0.1, 0.2, 0.3, 0.4);
    }

Delay -
    
    .dropdown {
        opacity: 0;
        transition: opacity 250ms 300ms;  // property durationOfTimming delay
    }

    or we can use trasition-delay property

Transition syntax -
    trnasition: propertyName animationDuration timmingFunction(optional) delayDuration(optional)
    transition-timing-function
    cubic-bezier(0.1, 0.2, 0.3, 0.4)
    trasition-delay


Doom Flicker -
    Here we saw in animation we get into infinite loop with hover. In order to make it better, this is trick -
        a)hover event and tranform should happen on different element.
        b) so what we did was we created a child in parent, all contents is in parent only.
        c)hover effect is on parent, but transaition happens on child.

Exerciuse 1 -
    Here we saw that anchor tag is just a wrapper, all content is in article. so we moved the article.
    thig to be noticed is that while hovering out also we want animation. so transition proeprty should not have dependey
    on hover.
Exercise 2 -
    same as 1, but here we saw how we can zoom into photo, without picture leaking to adjacent elements.basically we used
    overflow: hidden on paret element.
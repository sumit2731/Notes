Event constructor

    let event = new Event(type[, options]);

    Arguments:

        type – event type, a string like "click" or our own like "my-event".

        options – the object with two optional properties:

            bubbles: true/false – if true, then the event bubbles.
            cancelable: true/false – if true, then the “default action” may be prevented. Later we’ll see what it means for 
                custom events.By default both are false: {bubbles: false, cancelable: false}.


disptachingEvent
    After an event object is created, we should “run” it on an element using the call elem.dispatchEvent(event).

    we can even dispatch built in browser events via js -

        <button id="elem" onclick="alert('Click!');">Autoclick</button>

        <script>
            let event = new Event("click");
            elem.dispatchEvent(event);
        </script>

event.isTrusted
    There is a way to tell a “real” user event from a script-generated one.
    The property event.isTrusted is true for events that come from real user actions and false for script-generated events.


THings about Custom Events -

    We should use addEventListener for our custom events, because on<event> only exists for built-in events, document.onhello 
        doesn’t work.
    Must set bubbles:true, otherwise the event won’t bubble up.

MouseEvent, KeyboardEvent and others

    We should use them instead of new Event if we want to create such events. For instance, new MouseEvent("click").
    The right constructor allows to specify standard properties for that type of event.

    the generic Event constructor does not allow that.


CustomEvent constructor
    For our own, completely new events types like "hello" we should use new CustomEvent. Technically CustomEvent is the same as 
    Event, with one exception.

    In the second argument (object) we can add an additional property detail for any custom information that we want to pass with
    the event.

event.preventDefault() for custom Events

    For new, custom events, there are definitely no default browser actions, but a code that dispatches such event may have its
     own plans what to do after triggering the event.

    By calling event.preventDefault(), an event handler may send a signal that those actions should be canceled.

    In that case the call to elem.dispatchEvent(event) returns false. And the code that dispatched it knows that it shouldn’t 
        continue.

Events-in-events are synchronous - 
    Usually events are processed in a queue. That is: if the browser is processing onclick and a new event occurs, e.g. mouse 
    moved, then its handling is queued up, corresponding mousemove handlers will be called after onclick processing is finished.

    The notable exception is when one event is initiated from within another one, e.g. using dispatchEvent. Such events are 
    processed immediately: the new event handlers are called, and then the current event handling is resumed.



ReadSummary for blog.
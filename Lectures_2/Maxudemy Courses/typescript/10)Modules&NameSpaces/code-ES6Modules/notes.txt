Important Points-
1)Here we used es6 modues. For this syntax to work we need to change the module option of
    tsconfig.json to es2015(lecture 145,09:30). es2015 is codeword for es6, modules were
    introduced in this version. also make sure that we target in tsconfig as es6 or higher. now
    we no longer need outFile option in tsconfig.json, so we can comment it out(it wnt work with 
    module set to value es2015). then in index.html file we add type attribute in script tag. this
    to tell browser that we wnat to use es6 module syntax.
2)Now browser handles our import, but in network tab you can see that we make api calls to fetch
    each and individual file. improvement to that will to use a build tool, which unerstands our
    imports and bundles all files into single file. so thatw ejust download that single file.
3)also in import statement we are using extension .js. in angular project we do not use extension js.
 we can omit it if we use build tools like webpack. we will see it later.
4)this approach is prefererd over namapsace approch because now we get compile time errors if we remove
    a import, which was not the case when we used namapsace.
5)Then in lecture 146, we saw various import and export syntaxes.
    a)import * as groupedImport from 'relativeFilePath';
        use - groupedImport.orignalClassName
    b)alias-
        import { orignalName as alias} from 'relativeFilePath';
        useage - alias
    c)default export -
        In file where class is defined-
            export default class Sumeet {}
        In file where it will be used-
            import anyName from 'relativeFilePath';
        useage -
            anyName
        
        we used Sumeet class for default export, now we cannot use Sumeet with regular named import. like this-

        import {Sumeet} from 'relativeFilePath';
    
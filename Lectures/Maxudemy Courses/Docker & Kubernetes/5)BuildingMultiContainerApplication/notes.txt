79)Module Intro
    Now the idea behind this module is to show you how you can build a more realistic application consisting of multiple
    services and therefore multiple containers which work together.But the idea is also that you can practice what you
    learned over the last course modules.Because we are not really going to learn anything new in this section, rather,
    we're going to combine what we learned and apply what we learned to this multi-service,multi container application.

80)Our target App & Setup
    here we go through project structure and requirements. see slide 1

81)Dockerizing the mongoDB

    here we run the official mongo image. like we did last time but this time we also want to expose a port from container 
    to local system, so that nodejs server that is running in local system can connect to mongoDb running in conatiner.

    docker run --name mongodb --rm -d -p 27017:27017 mongo

    then we test whether nodejs running on local is apple to connect to it or not. in nodejs server we printed on conslde,
    connected to mongo db . also in logs of mongo container we can see something with node js has connected to it.


82)Dokerizing the node App

    here first we created the Dockerfile. then from dockerFile we created the image -
        docker build -t goals-node .

    then we run a container based on this image -
        docker run --name goals-backend --rm -p 80:80 goals-node

    we are expsoing the container port to local system, so that react app running on local host can still talk to backend running docker. 

    but in the console we can see that ourr application crashed, so container was stopped and remoevd. it fails to
    connect because in app.js we are trying to connect to mongoDb with this url -

        mongodb://localhost:27017/course-goals

    as we already have port of mongodb container exosed to our local file system. this will work if from node container we
    can connect to local machine port, so instead of localhost we use - 

        host.docker.internal

    so chnage the app.js, delete the image and then re build the image


83)Moving the React SPA into Container
    first we create the Dockerfile. then we create the image -

        docker build -t goals-react .

    then we created the container based on that image

        docker run --name goals-frontend --rm -d -p 3000:3000 goals-react

    you will see that we do not see anything on localhost:3000, so seeing logs we saw that contiener existsed after printing -

    "Starting dev serever"

    now this is specifci to react project, You need to run it in interactive mode, by adding -it flag.

        docker run --name goals-frontend --rm -p 3000:3000 -it goals-react


    the React project is set up the waythat if it doesn't receive this input(-it flag),it immediately stops the server because no
     one's interested anyways.


     now our all apps are dockerized. now we can plan to add additional functions like persisting the mongoDb data when mongo container
     shuts down and also right now they are communicating with each other through local post, i.e they publish there ports. it 
     will be great if they can communicate through container name i.e if we put all of them into same network.


84)Adding Docker network
    create network -
        docker run --name mongodb --rm -d -p 27017:27017 mongo
    run mondb container in this network(now we do not need to expose port to local system) -
        docker run --name mongodb --rm -d --network goals-net mongo

    run nodejs container in network  -

        first we need to chnage way we connect to mongo db. instead of connecting to local system , we connect to container
        in this network. then we build the image. then run container in netwrok

        docker run --name goals-backend --rm  --network goals-net goals-node

    run react app in network -

        first we change the netwrok calls to local host to name of nodejs-backend container name(goals-backend).

        http://localhost/goals => http://goals-backend/goals

        we build the image, then we run the contsiner in network -

            docker run --name goals-frontend --rm -it -p 3000:3000 --network goals-net goals-react

            here we expose the port to local system because w ewant to interact with this app.

        now we run our app it fails. why it fails? react-app runs in browser, browser which is in local system. there we try to fetch resource from -
        
        http://goals-backend/goals

        here docker has no chnace of translating it to ip address of node backend.webback-dev server runs in docker but that does'nt matter. so
         we have to replace 
          http://goals-backend/goals => http://localhost/goals

          rebuild the image. then reun cotainer, here there is no need to run this container on network -

          docker run --name goals-frontend -it -p 3000:3000 goals-react

    now in nodejs cotianer we need to expose a port to local system, so that js code running in browser in local system can talk with node
    server. stop the container and run it gain with -p option -

    docker run --name goals-backend --rm  --network goals-net -p 80:80 goals-node


    now everything is working fine. mongodb and node are running inside docker and both containers are netwrok, communates through this network.

    react app is running inside docker container, not on network. it exposes port 3000, so browser gets the files form server.
    it send request to port 80 on local host. node app has exposed this port to local system.




86)Adding Data persistance to MongoDb with Volumnes

    2 problems -
        a)persist DB data when container is removed
        b)restrict access i.e add username and password

    In mongoimage docs of docker hub, we fund that mongo db stores data in data/db folder. so uisng named volume we will persist that folder.

    so stop container and run it again with -
        docker run --name mongodb -v data:/data/db --rm --network goals-net mongo

    regrading authentication mongoDb supports these 2 envirenmeent variables -

        MONGO_INITDB_ROOT_USERNAME and MONGO_INITDB_ROOT_PASSWORD

        now we need to specify this username and password in other containers trying to access this db.

        first we stop our container and restar it again with these2 envirement variables -

            docker run --name mongodb -v data:/data/db --rm --network goals-net -e MONGO_INITDB_ROOT_USERNAME=max -e MONGO_INITDB_ROOT_PASSWORD=secret mongo

        now we need to specify tis user name and password in nodejs code, while we connect to db, so we need to chnage the connection string,
        
        mongo db understand this format -
            mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]


            "mongodb://mongodb:27017/course-goals", => "mongodb://max:secret@mongodb:27017/course-goals?authSource=admin",

        after this chnage rebuild your image and run container(on same network)



87)Volumes, Bind Mounts & Polishing of nodejs container

    2 thinsg to achieve -

        a)persist the logs data whenever container is shut down.
        b)whever code is updated in local, node server should run utomatically

    solution -
        docker run --name goals-backend -v logs:/app/logs -v $(pwd):/app -v /app/node_modules --rm -p 80:80 --network goals-net goals-node

            first we used named volume to copy data form logs into volume so that it is not lost.
            next we used bind mount to sync our code source with code inside docker, so that ever we chnage code in local folder, server in container 
            restarts.then we used annonymous volume because we do not node_modules folder inside docker to be overwritten by content of bind mount. this
            is because more specifc path in volumes have higher priority.

        then in order to have live code updates we started using nodemon to uopdate file.

    further improvement - 
        a)mongodb id and password is hardcoded in nodejs code. there we can use envirement varibles. 
    
            1)declare ENV variables in dockerFile.
            2)use them in nodejs code while connecting to db.
            3)provide these values while running the container.

            then run container using this -


                docker run --name goals-backend -v logs:/app/logs -v $(pwd):/app -v /app/node_modules -e MONGODB_USERNAME=max -e MONGODB_PASSWORD=secret --rm -p 80:80 --network goals-net goals-node


        b)Added .dockerignore file.


88)Live Source Code updates for react Containers

    we simply use bind mounts -

        docker run -v $(pwd)/src:/app/src --name goals-frontend --rm -p 3000:3000 -it goals-react

    for windows users using wsl2, live updates wnt be seen, for this see article attached with this lesson. here
    solution is create your project in linux file system instead of y=using windows file system.


89)Summarry

    see slide 2 and 3

    Setup shown here is only for development. There actually also are a lot of developers who use Docker only in 
    development because they can encapsulate their environments and so on, and they don't even use it for production.

    improvement -
        a)very long docker commands.have to run each command induivally even through container belongs togather
        b)this is dev only setup.

    Point a will be addressed in next section. point b will be addressed in later sections.
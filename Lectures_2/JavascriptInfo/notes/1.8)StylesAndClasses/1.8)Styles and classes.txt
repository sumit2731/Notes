1)Styles and classes

    JavaScript can modify both classes and style properties of element.
    We should always prefer CSS classes to style. The latter should only be used if classes “can’t handle it”.

    For example, style is acceptable if we calculate coordinates of an element dynamically and want to set 
    them from JavaScript, like this:
        
        let top = /* complex calculations */;
        let left = /* complex calculations */;

        elem.style.left = left; // e.g '123px', calculated at run-time
        elem.style.top = top; // e.g '456px'


2)className and classList
    a)className
        the elem.className corresponds to the "class" attribute.
        like-
        <body class="main page">
            <script>
                alert(document.body.className); // main page
            </script>
        </body>

        If we assign something to elem.className, it replaces the whole string of classes. 
        Sometimes that’s what we need, but often we want to add/remove a single class.

    b)classList
        Sometimes we want to add/remove a single class.There’s another property for 
        that: elem.classList.The elem.classList is a special object with methods to 
        add/remove/toggle a single class.

        So we can operate both on the full class string using className or on individual 
        classes using classList.

        Methods of classList:-
            elem.classList.add/remove("class") – adds/removes the class.
            elem.classList.toggle("class") – adds the class if it doesn’t exist, otherwise removes it.
            elem.classList.contains("class") – checks for the given class, returns true/false

            Besides, classList is iterable, so we can list all classes with for..of, like this:

3)element.style
    The property elem.style is an object that corresponds to what’s written in the "style" attribute.
    Setting elem.style.width="100px" works the same as if we had in the attribute style a string 
    width:100px.
    For multi-word property the camelCase is used:

        background-color  => elem.style.backgroundColor
        z-index           => elem.style.zIndex
        border-left-width => elem.style.borderLeftWidth

    Browser-prefixed properties like -moz-border-radius, -webkit-border-radius also follow the same rule: a dash means upper case.
    For instance:

        button.style.MozBorderRadius = '5px';
        button.style.WebkitBorderRadius = '5px';

4)Resetting the style property

    Sometimes we want to assign a style property, and later remove it.

    For instance, to hide an element, we can set elem.style.display = "none".

    Then later we may want to remove the style.display as if it were not set. Instead of delete elem.style.display we 
    should assign an empty string to it: elem.style.display = ""

5)style.cssText

    Normally, we use style.* to assign individual style properties. We can’t set the full style like 
    div.style="color: red; width: 100px", because div.style is an object, and it’s read-only.

    The same can be accomplished by setting an attribute: div.setAttribute('style', 'color: red...')

    To set the full style as a string, there’s a special property style.cssText:
        <div id="div">Button</div>

        <script>
        // we can set special style flags like "important" here
        div.style.cssText=`color: red !important;
            background-color: yellow;
            width: 100px;
            text-align: center;
        `;

        alert(div.style.cssText);
        </script>
    
    This property is rarely used, because such assignment removes all existing styles: it does not add, 
    but replaces them.But we can safely use it for new elements, when we know we won’t delete an existing 
    style.

    The same can be accomplished by setting an attribute: div.setAttribute('style', 'color: red...').

6)Mind the Units
    For instance, we should not set elem.style.top to 10, but rather to 10px.Otherwise it wouldn’t work.
    we can aslo asisgn percentages, it also works.

7)Computed styles: getComputedStyle


    So, modifying a style is easy. But how to read it?

    For instance, we want to know the size, margins, the color of an element. How to do it?
    The style property operates only on the value of the "style" attribute, without any CSS cascade.
    So we can’t read anything that comes from CSS classes using elem.style.

    
    For instance, here style doesn’t see the margin:

        <head>
        <style> body { color: red; margin: 5px } </style>
        </head>
        <body>

        The red text
        <script>
            alert(document.body.style.color); // empty
            alert(document.body.style.marginTop); // empty
        </script>
        </body>

    see lecture for details- compued values and resolved values
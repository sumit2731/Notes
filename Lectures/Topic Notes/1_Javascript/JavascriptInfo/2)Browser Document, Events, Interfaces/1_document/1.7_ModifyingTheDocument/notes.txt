Creating the Element
    document.createElement(tag)
    document.createTextNode(value) – creates a text node (rarely used),

Adding Classes -
    element.className

Inserting element (DOM nodes or Text Pieces) -
    node.append(...nodes or strings) – append nodes or strings at the end of node,
    node.prepend(...nodes or strings) – insert nodes or strings at the beginning of node,
    node.before(...nodes or strings) –- insert nodes or strings before node,
    node.after(...nodes or strings) –- insert nodes or strings after node,
    node.replaceWith(...nodes or strings) –- replaces node with the given nodes or strings.

    Note Multiple elements can be inserted at same time.

    Please note: the text is inserted “as text”, not “as HTML”, with proper escaping of characters such as <, >.
     
     ex -

        div.before('<p>Hello</p>', document.createElement('hr')) => "&lt;p&gt;Hello&lt;/p&gt;"

    In other words, strings are inserted in a safe way, like elem.textContent does it.


    But what if we’d like to insert an HTML string “as html”, with all tags and stuff working, in the same manner as 
    elem.innerHTML does it?


elem.insertAdjacentHTML/Text/Element
    elem.insertAdjacentHTML(where, html).

    The first parameter is a code word, specifying where to insert relative to elem. Must be one of the following:

        "beforebegin" – insert html immediately before elem,
        "afterbegin" – insert html into elem, at the beginning,
        "beforeend" – insert html into elem, at the end,
        "afterend" – insert html immediately after elem.

    Ex -
        <div id="div"></div>
        <script>
            div.insertAdjacentHTML('beforebegin', '<p>Hello</p>');
            div.insertAdjacentHTML('afterend', '<p>Bye</p>');
        </script>

    Result -
        <p>Hello</p>
        <div id="div"></div>
        <p>Bye</p>


element.remove()
    Please note: if we want to move an element to another place – there’s no need to remove it from the old one.
    All insertion methods automatically remove the node from the old place.


elem.cloneNode -

    elem.cloneNode(true) creates a “deep” clone of the element – with all attributes and subelements. 
    If we call elem.cloneNode(false), then the clone is made without child elements.

DocumentFragment

    DocumentFragment is a special DOM node that serves as a wrapper to pass around lists of nodes.
    We can append other nodes to it, but when we insert it somewhere, then its content is inserted instead.

    function getListContent() {
        let fragment = new DocumentFragment();

        for(let i=1; i<=3; i++) {
            let li = document.createElement('li');
            li.append(i);
            fragment.append(li);
        }

         return fragment;
    }
    ul.append(getListContent())

    DocumentFragment is rarely used explicitly. Why append to a special kind of node, if we can return an array of nodes 
        instead?



oldSChool Methods -
    parentElem.appendChild(node)
    parentElem.insertBefore(node, nextSibling)
    parentElem.replaceChild(node, oldChild)
    parentElem.removeChild(node)

    All these methods return the inserted/removed node. In other words, parentElem.appendChild(node) returns node


    document.write
        The method comes from times when there was no DOM, no standards… Really old times. It still lives, because there 
        are scripts using it.
        In modern scripts we can rarely see it, because of the following important limitation:

        The call to document.write only works while the page is loading.

        here’s an upside also. Technically, when document.write is called while the browser is reading (“parsing”) incoming 
        HTML, and it writes something, the browser consumes it just as if it were initially there, in the HTML text.

        So it works blazingly fast, because there’s no DOM modification involved. It writes directly into the page text, 
        while the DOM is not yet built.So if we need to add a lot of text into HTML dynamically, and we’re at page loading
        phase, and the speed matters, it may help. But in practice these requirements rarely come together. And usually we
        can see this method in scripts just because they are old.
    



Questions - 1)see second question
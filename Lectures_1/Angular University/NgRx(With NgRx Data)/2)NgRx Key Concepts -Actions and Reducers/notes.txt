1)here we want to use store in Auth Module module, so we ran command-

	ng generate store auth/Auth --module auth.module.ts
	In auth/Auth
		a)auth is path of module. from app folder we need to go to auth folder.
		b)Auth -we're going to specify here, a name for the module that is going to be used
			in certain imports that we're going to see in a moment.
		c)auth.module.ts is module file

	This command 
		1)creates reducer folder with index.ts file in it.
		2)Adds StoreModule with forFeature method, to improt array of @NgModule of auth-module. 
		In feature module we wnt use metaReducers so we remove them here.

	After doing all this.Start application.iN redux dev tools we can see that we have "auth" property in our state.
	this is because we mention this property name in foFeture metod.this is section of state that will be managed by auth
	 module. or state is -
	 	{
			 auth: {}
		 }

2)Then we used StoreService in login component. this store service is observable so, we can subscribe to it.In that way we will
	get whole new state. But here want to store backend response in store. for that we need to dispatch action. here in login
	component we use store service to dispatch a action. first we manually create action object.
	we use it to dispatch action,to modufy stroe we dispatch a action. so why we have this type of API, instead of having a simple CRUD 
	api.

Actions- Well an action is a plain javascript object that we send to the store in order to trigger some modification
	of the store state. So each action has a type which is a string.action can be for example a command that we send to 
	the store.We explicitly tell the store to perform a certain operation and action is more often an event reporting
	something that has happened at the level of the component.

	In every case an action always has a type.And usually it has a payload although that's not mandatory.In any case 
		dispatching an action it's the only way of modifying the stored state.

	Now what is the benefit of using these particular API based on the dispatching of action objects when compared to a 
		more common API such as for example a grid like API where we will have here at the level of the store methods such 
		as update create or delete.Well this creates a level of indirection here by dispatching actions.We are not explicitly 
		telling the store how to modify the data.

	We are either communicating to the store an event that we know that has happened here at the level of the component or 
		we are issuing an explicit command.But it's the store that is going to decide what to do with the action and how 
		it's going to modify its internal state.The store might for example to http request to the server and fetch
		some extra information and save it in store.

	This component,the logging component that is dispatching the action only knows about the content of the action but it 
		does not know what the store is going to do with the action.This level of indirection is important because this 
		ensures that the logging component is not going to get tightly coupled to other parts of the application.

	So it's important that the logging component remains unaware of the course-card-list , course-dialog component and course. 
	And of course these are completely separate components that also interact with the store by dispatching actions to it.
	They only know about the store and the actions that they dispatch.But they are aware of other components in the 
	application.


3)Now we could create new actions by explicitly creating here a plain javascript object but we are going to show a better 
	way of creating actions which is more type safe.We want to make sure that if multiple logging actions are being 
	created throughout the application at different places then they all share the same type of action type and payload.
	For that purspose,we cretae file auth.action.ts in admin folder. there we create a actionCreator function and we use it
	in login component.

4)now we have action in place, when we press login button. we have wee reduc dev tools, our action is logged there. click on 
	action, you will select it.if you select action tab from top panel, you can see type and payload of selected action.
	 now you can see content of this action. but now if we click on state tab in top panel. we can see that state is not
	 changing. this is because we need to tell store, how to handle actions, by defining reducers.

5)groupingActions - here define a way of grouping multiple related actions together.This is going to be very useful in order 
	to better understand the notion of reduced that we are going to introduce in the next lesson.
	
	Again it's very important that we don't reuse multiple actions in different parts of the application. It's important instead
	 to create different actions for different screens and components in the application so that we can always easily track 
	 back the source using the information here inside the square brackets part of the action type.

	so we define logout action, it will only be issued by top menu and nothing more.

	So we know we have here two different actions that are related  authentication actions.other modules such as for example 
		the courses module we could have many more actions that are related.So we would like to group these actions so that 
		we can access them all easily.We are going to do that just by using some plain typescript. see action.tye.ts file.
		now all actions are avainle as proeprties of AuthActions object.is gives us better IDE support.

		with this simple typescript trick we now have a convenient way, elsewhere on the application to access all the 
		authentication actions.  having the authentication actions grouped together is going to make it simpler to write our 
		first reducer.


6)Reducer - Now we need to define what should the store do in response to the action. So for that we are going to need a new 
	function which is called a reducer. So a reducer is just a function a plain javascript function that we can define in the 
	following way.

	Let's define here a function and we're going to call it authReducer.Now this plane function is going to take 
	currentState as first argument, second argument is action that was dispatch. this function returns new version
	of storeState.So this function does not modify the state of the store directly.Instead it calculates a new version of the
	state based on the previous state and the action that just got dispatched.So this is a reducer.It's a function that we need 
	to pass to the store so that the store knows how to react to a given action.

		function authReducer(state, action): State {
  			return new State;
		}

	But the key question is why is it called a reducer.Well the name reducer comes from the reduce functional programming 
		operation. for example we have reduce operation avalible on array.

		arr.reduce(callback( accumulator, currentValue, [, index[, array]] )[, initialValue])

		Now you are going to see that the reduce operation is going to take as an input argument a function.So this is a higher
		 order the operation and the signature of this function that we passed to the reduce operation is going to be identical 
		 to the signature that we have in store reducer.

	So on both cases we are providing here a previous state we are providing here some new element thatcwe want to take into 
	 account in this case the action. And we are using these new element to create a new version of the state.
	 
	You can think of it as a new state created if you prefer.

7)Defining reducer - similar to actions we will define reduvers usinh ngrx utility function, createREducer. see index.ts in
	auth/reducers. here we use createReducer function. see code commnets

8)summary - 
	So to summarize the store it's like an in-memory database that contains data that is going to get shared by multiple 
		components of the application.Each component does not modify the state directly instead, Each component that wants 
		to modify the data will dispatch an action.An action is just a plain javascript payload containing some data and a 
		type,the type tells to the store what to do with the action. depending on the type the store is going to call a 
		reducer function.The reducers functions are plain javascript function that calculates a new version of the state.
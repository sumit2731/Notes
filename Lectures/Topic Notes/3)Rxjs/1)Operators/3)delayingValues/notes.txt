1)delay- Delay emitted values by given time.here each value is delayed by specifid time.

    https://medium.com/javascript-in-plain-english/rxjs-operators-utility-operators-38e825959a53
    
    signature: delay(delay: number | Date, scheduler: Scheduler): Observable

    

    import { fromEvent, of } from 'rxjs';
    import { mergeMap, delay, takeUntil } from 'rxjs/operators';

    const mousedown$ = fromEvent(document, 'mousedown');
    const mouseup$ = fromEvent(document, 'mouseup');

    mousedown$
        .pipe(mergeMap(event => of(event).pipe(delay(700), takeUntil(mouseup$))))
        .subscribe(event => console.log('Long Press!', event)); 


2)delayWhen - It takes up to 2 arguments. The first is the delayDurationSelector function that returns an Observable for 
    each value emitted by the source Observable. When the Observable returned by this function emits, then the value from 
    the source Observable will emit.

    https://medium.com/javascript-in-plain-english/rxjs-operators-utility-operators-38e825959a53

    const of$ = of(1, 2, 3);
    const result = of$.pipe(delayWhen(val => interval(Math.random() * 5000)));
    result.subscribe(x => console.log(x));

    The code above will delay the emission each value emitted by the of$ Observable by Math.random() * 5000 milliseconds. 
    This means that each value will be emitted when interval(Math.random() * 5000) emits.
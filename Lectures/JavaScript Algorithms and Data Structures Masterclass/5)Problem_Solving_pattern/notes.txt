these patterns can some time come in handy. there are common patterns that do apply to multiple 
problems(there are common patterns to write code, sort of architectute pproachs) but it does
not cover ecery scanereo on earth.so it can help you in one out of 5 or  10 challenges

1)Frequency Counter Problem- we use object to basically collect bunch of values and their frequecies.
    this pattern is useful in problem where you have multiple pieces of data, multiple inputs
    and you have to compare them to see if they consist of similar values. if they are anagrams
    of each other, if value is contained insode another value, so anytime you are comparing pieces 
    of data, 2 or more inputs and frequency of certain things occur.

    it gives soltion in o(n) times as compared to using nested loops which gives o(n*n);

    idea behind frequency counter is use a object to construct a profile sort of breaking
    down the contents of array or string(usually some of linear structure, can be string or array).
    then you are able to quickly compare that breakdown to how another object looks

2)Multiple, 2 Pointers pattern -see slide. we have liner structure(Array,string or linked list).
the ides ia we are going to be(i dnt know) seraching for pair of values, or searching for something
that meets the condition(Usually we are looking for pair) . we have 2 refrences, they may start from
oppsite ends or at same end. they may move in same or opposite direction.
    when we say refrence we mean numbers like i and j, which refers to indeices. so we move them
    forward ina certain way.

3)Sliding indow Pattern - This is useful when we have data like array or string and we are looking
for subset of that data that is continous in some way. 
    ex- 
        1)find longest seuence of unique characters in string.
        2)Max sum of subarray(function whih accepts a number and gives maximum sum of subaaray with length n)

we make a windown which can be a single variable or can be a subarray or even another string. then 
we move that window depending on some condition. we slide it up usually from left to right, if we 
start at begining. you could go from right to left, you could start in middle i guess. but usually
we move the window from left.somtimes you might make a new window. 
    this approach is useful in situations where we are keeping track of subset of data in larger set of data.

4)Divide_and_Conquer- here we dnt have any example as in uncoming lectures we will have plenty of examples like binary 
serach,merge sort, quick sort. example is binary search(accepets a sorted array), quik sort
merge sort. In his algo we break the inut into smaller input and ignore other ones(binary sort) or in case of
of merge sort and quick sort, we actuay merge things back. so this algo is sued for complex problem like sorting.
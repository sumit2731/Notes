1)Smart Components
    -application-level components
    -container components
    -controller components

    a)These type of components are inherently tied to the application itself, so as we can see it receives in the constructor some 
        dependencies that are application-specific, like the LessonsService
    
    b)The home component still knows how to retrieve the lessons list from a service, and what type of list this is 
        (if these lessons are the lessons of a course, or all lessons etc.).
    
    b)But the Home component does not know how to present the lessons to the user.

    c)This is an application-specific component,It would be very hard to use this component in another application.

    d)A Smart Component does not have to be a top level router component only. We can see that there could be other components 
        further down the tree that also get injected a service like LessonSelectedService, and don't necessarily get their data 
        only from @Input().

2)Presentation Components
    -pure components
    -dumb components
    a)because the lessons list component does not know where the data comes from. The responsibility of the component is purely to 
        present the data to the user and not to fetch it from a particular location.
    b)Compoennets does not contain logic of getting data.They do not have any application level services injected into them.
     They just receive data via @Input properties.

3)Typical interaction between smart components and presentation components -
     we have the smart component inject the data to the presentation component via @Input, and receive any actions that the 
        presentation component might trigger via @Output.

4)Propblems in this architecture-
     we have the smart component inject the data to the presentation component via @Input, and receive any actions that the 
        presentation component might trigger via @Output. this problem occurs because custom events do not bubble. this is
        intentional by angular team.

5)Solutions -
    1)One solution that we should look into especially if building a large scale application is to look into solutions like 
        ngrx/store.But even with a store solution, we might not want to inject the store in the presentation component. Because 
        the result of selecting a lesson might not be always to dispatch an event to the store. also injecting a service will make
        our component as smart component.
    2)Another way of solving the problem is to keep the lessons list component like it is and use it wherever needed. But in this case 
        we can wrap it in a smart component, which gets injected the LessonSelectedService:
1)slice(also exist on strigs) -The slice() method returns a shallow copy of a portion of an array into a new array object 
    selected from begin to end (end not included) where begin and end represent the index of items in that array. 
    The original array will not be modified.

    Signature - arr.slice([start[, end]])

    both start end end are optional. A negative index can be used, indicating an offset from the end of the sequence
    
    
        let arr = [0,1,2,3,4,5]
        slice(1,4); // [1,2,3]
        slice(-3,-1); //[3,4]
        slice(1,-3);//[1,2]
        slice(1,-5);// []

    return value - Array

2)reduce- This method executes a reducer function (that you provide) on each element of the array, resulting in single output value.

    
    arr.reduce(callback( accumulator, currentValue[, index[, array]] )[, initialValue])

    The reducer function takes four arguments:

        Accumulator (acc)
        Current Value (cur)
        Current Index (idx)
        Source Array (src)
    
    The accumulator accumulates callback's return values. It is the accumulated value previously returned in the last invocation
     of the callbackâ€”or initialValue, if it was supplied (see below). if it is not supplied then in first iteration,
      accumulator's value is equal to current value of array.
    
    Your reducer function's returned value is assigned to the accumulator, whose value is remembered across each iteration
    throughout the array, and ultimately becomes the final, single resulting value.

    Return Value - value that is returned(accunulator) in last iteration


3)indexOf - The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is 
    not present.indexOf() compares searchElement to elements of the Array using strict equality (the same method used by 
    the === or triple-equals operator)

    Signature - arr.indexOf(searchElement[, fromIndex])
    fromIndex - The index to start the search at.If the provided index value is a negative number, it is taken as the offset 
        from the end of the array. Note: if the provided index is negative, the array is still searched from front to back. 
        If the provided index is 0, then the whole array will be searched. Default: 0 (entire array is searched).

    Returns - index of element

4)splice() This method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
    let arrDeletedItems = array.splice(start[, deleteCount[, item1[, item2[, ...]]]])

    start - If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, 
        meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.)

    Retrun Value- An array containing the deleted elements.


5)Array.from - The Array.from() static method creates a new, shallow-copied Array instance from an array-like or iterable
 object.Another application for the Array.from method is a scenario wherein you want to create a new array and 
 fill it with elements.
    
    Signature - Array.from(arrayLike [, mapFn [, thisArg]])

6)Array.join - The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like 
    object), separated by commas or a specified separator string. If the array has only one item, then that item will be 
    returned without using the separator.

    Signature - arr.join([separator])

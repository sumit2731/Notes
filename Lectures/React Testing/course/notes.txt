regular expressions -

    1)(/learn react/i) - case insenstive
    2)(/gran total: \$/i) - grand total: $
        \ is used to escape $


jest -

    a)toBe - expect(colorButton.textContent).toBe('Change to red');
    b)expect(checkbox).not.tobe(""abc)
    c)defining mock functions and giving them some output value -
        window.fetch = jest.fn();
        window.fetch.mockResolvedValueOnce({
            json: async () => [{id: 'p1', title: 'First Post'}]
        });
    d)to compaar elnegth of array -
        expect(array).toHaveLength(4)
    e)to compare array, objects -
        expect(array).toEqual([1,2,3,4,5])

    f)configure whether to run a test or not
        test.only();
        test.skip();

    g)mocking functions -
        jest.fn();
    

jest-dom - 

    a)expect(linkElement).toBeInTheDocument();
    b)expect(colorButton).toHaveStyle({backgroundColor: 'red'});
    c)toHaveTextContext -
        expect(colorButton).toHaveTextContent('Change to red');

    d)expect(colorButton).toBeEnabled();
    e)expect(colorButton).toBeDisabled();
    f)expect(checkbox).toBeChecked();
    g)expect(checkbox).not.toBeChecked();\
    h)toHaveTextContent
    g)toHaveClass

@testing-library/react -

    a)render
    b)screen
        let checkbox = screen.getByRole('checkbox', {name: 'Disabled Button'});
            You can query the returned element(s) by their accessible name. The accessible name is for simple cases equal
             to e.g. the label of a form element, or the text content of a button, or the value of the aria-label attribute.
    c)fireEvent.click(colorButton);


 userEvent from '@testing-library/user-event'; -

    a)click - userEvent.click(checkbox);
    b)hover - userEvent.hover(element);
    c)unhover - userEvent.unhover(element);
    c)clear(element)
    d)type(elements,text, [options])

Which query to use -

    1)https://testing-library.com/docs/queries/about/#priority

        see figure1

        with "ByRole" you cannot use {exact:false}, so in name either you give regular expression or ect name


Bult in HTML elements have these roles -

1)button - <button>
2) <li> = listitem
3)heading
4)link = <a> if it has href
5)checkbox, <input type="checkbox">

Code Snippets -

    a)asserting something is not in DOM -

        const nullPopover = screen.queryByText(
            /no ice cream will actually be delivered/i
        );
        //expect(nullPopover).toBeNull();
        expect(nullPopover).not.toBeInTheDocument();

    b)waiting for something to get removed -

        /* 
            *It queries DOM at each DOM mutation and resolves to true when element is removed.
        */

        await waitForElementToBeRemoved(() =>
            screen.queryByText(/no ice cream will actually be delivered/i)
        );

    c)test cases for some asynchronous behaviour

        use await and findByQuery - 

            const scoopImages = await screen.findAllByRole('img', { name: /scoop$/i });
        

     docs - https://testing-library.com/docs/guide-disappearance/

    d)waiting for 2 calls, so that 2 elements are displayed

        await waitFor(async () => {
            const alerts = await screen.findAllByRole('alert');
            expect(alerts).toHaveLength(2);
        });

        see OrderEntry.test.jsx

    e)pass jest mock function as prop to component which accept callback as prop

cmd tools for jest -

    1)while in watch mode press w o see all options

pending -

    lecture 17
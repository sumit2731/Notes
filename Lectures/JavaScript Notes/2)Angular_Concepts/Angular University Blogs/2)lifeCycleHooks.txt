https://medium.com/bb-tutorials-and-thoughts/angular-understanding-angular-lifecycle-hooks-with-a-sample-project-375a61882478
https://itnext.io/understanding-angular-life-cycle-hooks-91616f8946e3

LifeCycle Hooks-

    1)ngOnChanges - called only if when there is an input to component and evertime there is change in it.it takes SimpleChanges Object
        as an input parameter.This simplechanges object has currentValue and previousValue so that we can compare and do all sorts of things.
        if we need to change these before we display on the screen, ngOnChanges() is the best place. it is executed again if refrence of input
        proeprties changes.

        You can use this method to detect changes that Angular can’t or won’t detect

    2)ngOnInit - This lifecycle hook is called after the component is loaded and all the data-bound properties are set and it is called only
        once when the component is loaded into the DOM.At this point, within this method, you can have access not only to data-bound properties 
        but also the component’s input properties.In constructor we do not have acess to input bound properties.it is where you can perform any 
        initializations shortly after the component’s construction.

        Obs: Constructor vs NgOnInit ?(see below notes)

        
    3)ngDoCheck - You can use this method to detect changes that Angular can’t or won’t detect. It gets called at every change detection cycle, so keeping 
        what it does to a minimum is important for performance. occurs every time there is a change detection and immediately after ngOnChanges() and 
        ngOnInit().

        Obs: this hook is really costly, since it is called with enormous frequency; after every change detection cycle no matter where the change occurred.
        Therefore, its usage should be careful in order to not affect the user experience.

    4)ngAfterContentInit - This is called once external content is projected into component’s view and right after the first ngDoCheck() and occurs only once.
        Within this hook, we have access for the first time to the ElementRef of the ContentChild after the component’s creation; after Angular has already 
        projected the external content into the component’s view.

    5)ngAfterContentChecked - This method is called once during the component’s lifecycle after ngAfterContentInit and then after every subsequent ngDoCheck. 
        It is called after Angular has already checked the content projected into the component in the current digest loop.

    6)ngAfterViewInit - It is called only once after the very first ngAfterContentChecked hook is called.It is called after Angular initializes component 
        views and the subsequent child views under each component, this will have to include the views displayed through content 
        projection too and that is why it is called after the ngAfterContentChecked hook.

        Within this hook, we have access for the first time to the ElementRefs of the ViewChildren after the component’s creation.after Angular has already 
        composed the component’s views and its child views.

        This hook is quite useful when you need to load content on your view that depends on its view’s components; for instance when you need to set a video
         player or create a chart from a canvas element. Below is an example on how you could set a chart using the ngAfterViewInit hook.

    7)ngAfterViewChecked -It is called after Angular checks the component views and the subsequent child views under each component for changes, 
        this includes the views displayed through content projection too. It is called after the ngAfterViewInit hook and every subsequent 
        ngAfterContentChecked hook.

    8)ngOnDestroy - Called when component is destroyed.you should put all your cleanup logic for that component.For instance, it is where you can remove any
        localstorage information and, most importantly, unsubscribe observables/detach event handlers/stop timers, etc. to avoid memory leaks.

        Obs: ngOnDestroy is not called when the user refreshes the page or closes the browser. So, in case you need to handle some cleanup logic on those 
        occasions as well, you can use the HostListener descorator, as shown below:


         @HostListener(‘window:beforeunload’)ngOnDestroy() {
            // Insert Logic Here!
        }

ngOnInit vs constructor(why place your initialization logic inside ngOnInit when you can do it in the class constructor) -

    Well, basically the constructor is best left to be used for dependency injection and our initialization logic should be put on ngOnInit.
    That is because the Javascript engine is what handles the constructor, not Angular. And this is one of the reasons why the ngOnInit hook 
    was created, which is called by Angular and becomes part of the component’s lifecycle that is managed by it. Also, of course, due to the 
    fact that you can’t yet access component’s Input properties on the constructor.




Minicube - sets the dummy cluster locally.it will use a virtual machine oon your machine, to create the cluster in there.So it simulates
    another machine on your machine by using such a virtual machine and the this virtual machine 
    then holds this cluster.It will actually create a single node cluster which means there the worker and master node
    is combined into one single virtual machine

    installation -
        brew install minikube

    commands -
        minikube start -
            creates the cluster

        minikube status - 
            to check whether cluster is running or not
        minikube dashboard -
            brings up web dashboard of our cluster.
            shows the Ui in browser
        
        minikube delete --all -
            deletes all minibute clusters

        minikube service "nameOfService" (lecture 190)
            this will give us access to the service by basically mapping a special port to an IP which we can reach from our local 
            machine,and which identifies this virtual machine running on our local machine. so we can reach the servivce via this IUP.
kind -

    1)kind create cluster
        creates the cluster with name kind.

        flags -
            a)name -
                kind create cluster --name kind-2

        This is how kutctl with interact with this cluster -
            In order to interact with a specific cluster, you only need to specify the cluster name as a context in kubectl:
            
                kubectl cluster-info --context kind-kind
    2)kind get clusters
        returns the clusters running.

    3)kind load docker-image "image1" "image2"
        makes images avalible into cluster

        flags -
            a)--name - If using a named cluster you will need to specify the name of the cluster you wish to load the images into: 
                kind load docker-image my-custom-image-0 my-custom-image-1 --name kind-2

kebectrl - It is install on local system , it talks with cluster. it gives commands to master node, which then gets things done by worker
    node.

    installation -
        brew install kubectl

    commands -
        1)kubectl cluster-info --context kind-kind
            returns the info about cluster. context is name of cluster created by kind.
        1)kubectl create "objectName" "nameOfObject"
            It creates the mentioned object and sends it to cluster.
            kubectl create - you will get help with types of objects that you can create
            implemententation -
                a)kubectl create deployment "nameOfDeployment"
                    arguments -
                        a)image
                            kubectl creeate deployment "nameOfDeployment" --image="name OfImage"
                                creates a deployment object with a given name and containers in the pod in deployment object will be based
                                on provided image name. we can also define multiple images like this -
                                    kubectl creeate deployment "nameOfDeployment" --image=img1,img2,img2

                                    this will spin up diffrent containers in pod


        2)kubectl get deployments 
            we can see how many deployments we have in our cluster to which we connected here.

        3)kubectl get pods
            we will see pods created by our deployments.

        4)kubectl delete deployment "nameOfDeployment" 

        5)kubectl expose deployment
            exposes the pod,created by a deployment by creating a service.

            kubectl expose deployment first-app
                a)--port = port that will be exposed (lecture 190)

                b)--type = type of service that we want to create, diffrent types are - (lecture 190)
                
                    a)ClusterIP - default type. This means it will only be reachable from inside the cluster.Still, we will then at 
                        least get an address which doesn't change.

                    b)NodePort - which actually means this deployment should be exposed with help off the IP address of the worker node
                        on which it's running.this then will be accesssible form outside.

                    c)LoadBalancer -Now LoadBalancer utilizes a LoadBalancer which has to exist in the infrastructure on which our cluster
                        runs.And then this LoadBalancer will actually generate a unique address for this service.it will also evenly 
                        distribute incoming traffic across all pods, which are part of this service.Now LoadBalancer, this type here
                        is only available if your cluster and the infrastructure on which the cluster runs supports it.AWS does, for 
                        example, and minikube thankfully also does it

                    ex - kubectl expose deployment first-app --type=LoadBalancer --port=8080
        6)kubectl scale deployment/"nameOfDeployment"
            It scales the no of pods present n deployment.
            options -
                a)replicas - it means how many instances for pod you want to have.

            ex - kubectl scale deployment/first-app --replicas=3

        7)kubectl set image deployments/"name of deployment" containerName="image name"

            This replaces the image in container of given deployment with new image.by defualt kubenetes downloaded new image only
            tag of image is changed. so chnage the tag. there are ways to override this.

        8)rollouts -
            a)Status of last rollout -

                kubectl rollout status deployment/"name of deployment"

                output - prints the sttaus of rollout. this to check whether last deployment or uopdate to last deployment was successful 
                or not.

            b)to see rollout hostory -

                kubectl rollout history deployment/"nameOfDeployment"

            c)to get detials of particulat rollout of particular deployment -

                kubectl rollout history deployment/first-app --revision="identifier"

                identifier we get from last command.here we will get details like which image was used.

            d)how to get back to previous rollout

                1)takes user to last rollout -
                    kubectl rollout undo deployment/"nameOfDeployment" - 
                    
                2)to take user back to a specific rollut -
                    kubectl rollout undo deployment/first-app --to-revision="revisionTag" (revision tag from )
        
        9)how to go back to previous deployment -



            options -
                a)--to-revision - takes user back to specific version.
                    kubectl rollout undo deployment/first-app --to-revision="revisionTag"
                    kubectl rollout undo deployment/first-app --to-revision=2

        10)kubectl apply
            it applies a deployed file to kubernetes cluster.

            flags -
                a)-f
                    kubectl apply -f="pathToFile"        
                    kubectl apply -f=deployment.yaml        






kubernetes objects -

    a)pods
    b)deployment
    c)service
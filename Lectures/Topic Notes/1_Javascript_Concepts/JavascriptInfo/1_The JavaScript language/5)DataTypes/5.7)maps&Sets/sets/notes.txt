A Set is a special type collection – “set of values” (without keys), where each value may occur only once.

API - 

    new Set(iterable) – creates the set, and if an iterable object is provided (usually an array), copies 
        values from it into the set.
    set.add(value) – adds a value, returns the set itself.
    set.delete(value) – removes the value, returns true if value existed at the moment of the call, otherwise false.
    set.has(value) – returns true if the value exists in the set, otherwise false.
    set.clear() – removes everything from the set.
    set.size – is the elements count.

Speciality - 

The main feature is that repeated calls of set.add(value) with the same value don’t do anything. That’s the reason why each 
    value appears in a Set only once.Set is much better optimized internally for uniqueness checks.

Iteration - 
    
    We can loop over a set either with for..of or using forEach:

    set.keys() – returns an iterable object for values,
    set.values() – same as set.keys(), for compatibility with Map,
    set.entries() – returns an iterable object for entries [value, value], exists for compatibility with Map.


Iteration over Map and Set is always in the insertion order, so we can’t say that these collections are unordered, but we 
    can’t reorder elements or directly get an element by its number.
Most standard HTML attributes have the corresponding DOM property, and we can access it like that.
However, HTML attributes and DOM properties are not always the same.
So when an element has id or another standard attribute, the corresponding property gets created. 
But that doesn’t happen if the attribute is non-standard.

how to read non standard attributes-

elem.hasAttribute(name) – checks for existence.
elem.getAttribute(name) – gets the value.
elem.setAttribute(name, value) – sets the value.
elem.removeAttribute(name) – removes the attribute.
elem.attributes: a collection of objects that belong to a built-in Attr class, 
 with name and value properties

HTML attributes have the following features:

Their name is case-insensitive (id is same as ID).
Their values are always strings.
The attributes collection is iterable and has all the attributes of the element 
(standard and non-standard) as objects with name and value properties.

the we saw proeprty-attribute synchenization doesn’t work always as expected. here we 
saw example of id which synchrnized and then sa example of value which is not synchronized.

the we saw that we use nonstandard attribute. in html we can insert content, chnage style
by finding these elements by ttributes values.we can use classes is for second purpose
but we use attributes because-
Because an attribute is more convenient to manage. The state can be changed as easy as:

// a bit simpler than removing old/adding a new class
div.setAttribute('order-state', 'canceled');

there is standrd to insert custom attributes-
For instance, if an elem has an attribute named "data-about", it’s available as 
elem.dataset.about.

Multiword attributes like data-order-state become camel-cased: dataset.orderState.

so we use data-name of attribute
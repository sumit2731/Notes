Creation Operators(import { interval } from 'rxjs');-

    1)from - helps to convert promise, array,string, maps, generator into obsevable.
    2)interval - emits sequence of values after some interval

        //emit value in sequence every 1 second
        const source = interval(1000);
        //output: 0,1,2,3,4,5....
        const subscribe = source.subscribe(val => console.log(val));
    
    2)timer
    3)fromEvent
    4)Observable.create


Modification Operatots-

    1)map

Filter Operators-

    1)throttleTime(1000) - It ignores the value emmitted for specified number of time, since last value is emitted.
        example - we want to handle click on button only after specified time since last click happened
    2)throttle -throttle(durationSelector: function(value): Observable | Promise): Observable
        but suppress new values until durationSelector has completed

    4)debounceTime - signature: debounceTime(dueTime: number, scheduler: Scheduler): Observable
        Example - User typing in input box. it emits last value typed, if no further values are typed
            for a given time frame. Here event will be emitted after 2 seconds we stop typing. this event is
            last event after which everything remained calm for some specified amount of time.

    3)filter - filter(select: Function, thisArg: any): Observable - Emits a value if select function returns true

    4)skip - it skips the first n values

    5)distinctUntillChanged

Modification Operators-

    1)map - map(project: Function, thisArg: any): Observable

Completion Operator-

    1)take - take(count: number): Observable
        Emit provided number of values before completing
    2)takeWhile -takeWhile(predicate: function(value, index): boolean, inclusive?: boolean): Observable
        Values are emitted until predicate returns true, once it returns false. Observable is completed.
        When the optional inclusive parameter is set to true it will also emit the first item that didn't 
            pass the predicate.

    3)takeUntil - takeUntil(notifier: Observable): Observable
        Emit values until provided observable emits

    4)takeLast - takeLast(count: number): Observable
        Emit the last n emitted values before completion

    5)first - takes only first operator and completes the observable. used in Courseresolver service of angular
        university ngRx course

    6)finalize - Execute a callback when operator completes, comes handly when using async. used in Courseresolver 
        service of angular university ngRx course


Operatrs that combines values-
    
    1)scan - scan(accumulator: function, seed: any): Observable
        Reduce over Time
        
        const source = of(1, 2, 3);
        const example = source.pipe(scan((acc, curr) => acc + curr, 0));
        // output: 1,3,6
        const subscribe = example.subscribe(val => console.log(val));

Combine Observables-

    1)concatMap

    2)concatMapTo - used in ngRx effects article

    3)mergeMap - 
        see maxmilan notes
        ex- combine value of 2 inputs to update a textContent of span.

2)switchMap


  

   

Subject -
    
    1)Subject - Normal subject.
    2)ReplaySubject(n) -it takes number as argument which is the count of emits it will keep in buffer. For any new subscriber 
        it will replay n-emits.
    3)Behavior Subject - Similarly to ReplaySubject, it will also replays the last value whenever an observer subscribes 
        to it.In order to use BehaviorSubject we need to provide a mandatory initial value when this gets instantiated.this is
        used when no data is emiited by subject and subscription is made, then this value will be emitted.
    4)Async Subject -emit only once it completes,emit only the latest value it received







1)Basic Commands -

    1)git init

    2)git add . or git add fileName

    3)git status
        flags - 
            l - only local branches
            r = only remote branches
            a = All branches

            git status -a

    4)git commit -m"first commit"

    5)git branch 
    shows total branches in repo

    6)git branch -D new-feature
    this deletes a exiting brnach

    7)git log
    shows all commits

2)Checkout Commands -

    8)git checkout "idOfCommit"
    takes yout to specific commit in a brnach. you hve to discard, commit or stash
    your changes

    9)git checkout "name of barnch"
    Takes you to another branch. you have to discard, commit or stash your changes.

    10)git checkout -b new-feature
    creates a new branch from current code

    11)git checkout fileName1 fileName2 fileName3
    discards all unstaged changes(reverts back to latest commit) in files mentioned

    12)git checkout -- .
        Now lets say after our last commit, we are working in our project. 
        Something went wrong and I want to go to code that I have last commited. 
        note that changes were not staged(we have not included files by git add)


    13)git checkout --ours "filepath"
        use it when we have merge conflict. it will ignore changes in other branch(that you
        are trying o merge) for file name

    14)git checkout -theirs "filepath"
        use it when we have merge conflict. it will ignore changes in current branch(where
        you ran this command) for file name

3)Tracking remote branches -
    https://www.git-tower.com/learn/git/faq/track-remote-upstream-branch/(All commnads are listed below)
    11)git checkout -b branch --track origin/branch(track is not mentioned)
        If there is no --track and no --no-track, --track is assumed as default. The default can be changed with the setting branch.autosetupmerge.
        Pulls the remote branch into local
        short versions-
        git checkout -b branch  origin/branch
        git checkout --track orign/branch
        git checkout branch

        All three commands set the “upstream” of “branch” to be “origin/branch” (or they fail).Upstream is used as reference 
        point of argument-less git status, git push, git merge and thus git pull (if configured like that (which is the default 
        or almost the default)).
        E.g. git status tells you how far behind or ahead you are of upstream, if one is configured.

        git push is configured to push the current branch upstream by default2 since git 2.0.

    12)git push -u origin dev
    13)git branch -u origin/dev

4)git reset -

    12) git log --oneline --graph
        it will tell you which commits of this branch, also at which commit your remote tracking branch is
    13)git reset --options "commitId or HEAD" "filename"
        for options see notes. default option is mix. if we do not give filename then change is done for whole file. next commands are version of it.

    14)git reset --hard commitID or git reset --hard HEAD~1
    takes code back to this commit. revert backs all changes.this can also be used to discard all staged chnages

    15)git reset HEAD <filePath>
    it unstages the file(i.e removes it from index), if we do not give file name
    then it unstages all files

    16)to make local file sync with remote branch -
        git fetch origin
        git reset --hard origin/master
        git clean -f -d

4)merge commands-

    16)git merge branch1
        it will merge brnach1 into branch , where you ran this command

    17)git merge --abort"
        return to the state before you started the merge at any time

17) git rm '*.txt'
    git rm -r <dirname>
To remove a file from disk and repo use �git rm� and to rm a dir use the �-r� flag:

18)git rm <filename> --cache
    If we want to remove a file from the repository but keep it on disk, say we forgot
    to add it to our .gitignore file then use --cache:

19)git commit --amend -m 'The new message'
it amends rhe message of last commit

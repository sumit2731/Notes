1)connectable observable - ConnectableObservable is a regular observable, but it wonâ€™t subscribe to the source 
    until connect() method is called. once you call connect,observable will start emitting values even if no
    one has subscribed to it.

    ConnectableObservable does not care when you subscribe to it; instead, it only begins its work when connect()
     is called.

    let obs1$ = interval(1000).pipe(publish());
    (obs1$ as ConnectableObservable<any>).connect();
    setTimeout(() => {
      // here we will get values dtarting from 5 as observables started emititng values when connect was called
      obs1$.subscribe(val => console.log(val),val => console.log(val),() => console.log("Completed"));
    },5000);

    instead of manually calling connect, we can use refCount operator-

        let obs1$ = interval(1000).pipe(
            publish(),
            refCount()
        );

    now observables only starts emitting when there is atleast one observer subscribed to it. when count of
        observers drops to 0, connectable observable is disconnected.

    we create connectable observables by calling operator's like multicast,publish etc. main purpose of these operator's
        is to convert cold observable into hot one for multicasting.there we use subject to pass value from single source to
        multiple subscribers.On calling connect, our subscriber subscribes to the source observerable. hence it is able to
        pass those values to its subscribers.when we use refcount, same thing happens.see article on multicasting.

2)Higher Order Observable - An observable which emits observables as values.
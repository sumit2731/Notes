<html> = document.documentElement
<body> = document.body
<head> = document.head
note- all these return HTMLElement








They return collections not array.
1)Almost all DOM collections with minor exceptions are live. In other words, 
    they reflect the current state of DOM.If we keep a reference to elem.childNodes,
    and add/remove nodes into DOM, then they appear in the collection automatically.
2)DOM collections are read-only -DOM collections, and even more – all navigation properties 
    listed in this chapter are read-only. We can’t replace a child by something else by 
    assigning childNodes[i] = ....

Changing DOM needs other methods


1)document.style.background = 'red'

2)document.body.childNodes, children => return HTMLCollection of elements

3)document.hasChildNodes()

4)nextSibling, nextElementSibling = return node

5)previousSibling, previousElementSibling

6)parentNode, parentElement

7)firstChild,firstElementChild

8)lastChild,lastElementChildSElector

these return collections not array

1)document.getElementById - returns Element- not live
2)elem.querySelectorAll(cssSelector)exists on document - it return NodelIst of Elements
3)document.querySelector or elem.querySelector(cssSelector)- return Element, it is not live
4)elem.matches(cssSelector) - it merely checks if elem matches the given CSS-selector. It returns true or false.
5)elem.closest(cssSelector)- The method elem.closest(cssSelector) looks the nearest ancestor that matches the
 CSS-selector. The elem itself is also included in the search.it returns Element.
6)elem.getElementsBy(exists on document as well) - All methods "getElementsBy*" return a live HTMLCollection of elements. 
    this is live collection.Such collections always reflect the current state of the document and “auto-update” when it changes.
    a)elem.getElementsByTagName(tag)- looks for elements with the given tag and returns the collection of them. 
        The tag parameter can also be a star "*" for “any tags”.
    b)elem.getElementsByClassName(className)
8)document.getElementsByName(name) -returns elements with the given name attribute, document-wide. very rarely 
    used.
9)elemA.contains(elemB)- returns true if elemB is inside elemA

see summary of methods to access elements, in this link-
    https://javascript.info/searching-elements-dom#summary
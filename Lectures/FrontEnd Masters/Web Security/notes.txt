XSS (Cross Side Scripting Attack)

    Types -
        1)Reflected XSS 
            Reflected XSS arises when an application takes some input from an HTTP request and embeds that input into the immediate response in an unsafe way
            
            (https://portswigger.net/web-security/cross-site-scripting/reflected)

        2)persistent
        3)DOM Based (https://portswigger.net/web-security/cross-site-scripting/dom-based)
    Prevent -
        
        a)validating Input on arrival(INput given by user)
            block invalid input do not clean it
        b)Validate data received from server
        c)Allowing same html
        c)To prevent XSS in HTTP responses that aren't intended to contain any HTML or JavaScript, you can use the Content-Type and X-Content-Type-Options headers to ensure that browsers interpret the responses in the way you intend.
        d)Use CSP POlicy
            things CSP can do -
                whether inline script will be executed
                external script will be loaded


Dangling Markup Injection


CSRF (Cross site request forgery)

    Defences -
        CSRF Token
        Same Site Cookies
        Referer-based validation


Clickjacing
    displaying anaother webstite on top of ours.
    prevention -
        a)X-Frame-Options : deny
            The X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a
                page in a <frame>, <iframe>, <embed> or <object>. Sites can use this to avoid click-jacking attacks, by ensuring 
                that their content is not embedded into other sites.
                
                X-Frame-Options: deny
                X-Frame-Options: sameorigin
                X-Frame-Options: allow-from https://normal-website.com
        b)CSP Policy -
            Content-Security-Policy: frame-ancestors 'self';
            Content-Security-Policy: frame-ancestors normal-website.com;
        c)Frame bursting scripts - can be disabled easily with sandbox attribute



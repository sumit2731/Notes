matchers -
    
    1)expect(a).toBe(0)

    2)expect([1,2,3]).toEqual([1,2,3])
        Check section 6 lecture 48 for difference

    3)expect(a).toBeDefined()
        .toBeUndefined
        .not.toBeDefined()

    4)testng error - see math.test.js in section 3. on how to assert whether function throws or not.
        const resultFn = () => {
            add();
        };
        a)expect(resultFn).toThrow(); // just checks for error to be thrown
        b)expect(resultFn).toThrow('some strng'); // also checks for error thrown and a prticular message, can be string or regular exp or Class Cnstructor

    5)not -
        expect(a).not.toBe(0)
        expect(resultFn).not.toThrow(); //https://jestjs.io/docs/expect#tothrowerror

    6)toBeTypeOf

        expect(result).toBeTypeOf()

    7)toBeNaN()
        expect(result).toBeNan()


    8)toContain('someString')
        expect(someSTr).toContain('sunStr)

        This checks if -
            a)string conatins a subtring
            b)if array contains a item

        For checking onjects in array, you need to use toContainEqual()

    9)expect(somevar).toMatch(regexp|string|object)


    7)expect(promise).resolves.
        after this you can use any jest matchers, like -
        expect(promise).resolves.toBe()
    8)expect(promise).reject()
        expect(promise).resolves.toBe()
        expect(promise).rejects.toBeInstanceof(errorClass) //rejects with object that is instance of given class

    9)assertins on spies -
        expect(spy).toBeCalled()
        expect(spy).toBeCalledTimes(number)
        expect(spy).toBeCalledWith(argList)

    



asertion count -
    1)expect.assertions(3)
    2)expect.hasAssertions()


cmd flags -
    vitest --global
        makes the things like expect,it,describe avalible without import as global variables. but importing them gives better
            IDE support
    vites --run
        instead of getting into watch mode, runs it once only
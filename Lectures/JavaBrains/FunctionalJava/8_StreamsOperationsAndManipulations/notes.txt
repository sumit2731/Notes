Stream vs Collections
    Collection - Data storage mechanism
    Streams - Data processing mechanism
        It is sequence of elements that you get from source and you can process it sequentially or parallel.
        It provides a us declarative way of doing that transformation task.


    D/W -
        mutability(figure 1)
        laziness(figure 2) - when you are using intermediate stpes in streams API,think of it as writing your SQL statement.
            its like writing  sql query,you have written it, but it wnt be executed until you run it.
            You can setup workers(intermediate operators) but there is different API call to start the stream.
            You have setup the workers, it does not mean that actual execution will happen.there is separate API 
            call to initiate the stream.
        Processing Intent(figure 3) -
            collection focus on storing
            streams on processing and transforming

        Parallelism Support(figure 4)
            Collection are completely agnostic to threaded, multi threaded, parallel environment.they have methods that you can call,
            it does not care it is multithreaded or single thread env.you as consumer of collection api need to make sure that,it is
            in right context,if you are using it in multi threaded env, make sure you are using a concurrent collection, otherwsie use
            single collection, make sure no 2 threads on it, all this burden lies on you.

           but stream supports paralelism. infact goal of streams is that you do not worry about concurrency.you tell me whether
           you want it parallel and I will make sure that it is parallel.

    Streams are Immutable and created with intent of transformation - contradict? (see lecture)
        These are not contradictory. it is intended design. 
            transformation in collection - In Collection,when you change something it changes in place i.e elements are added ot removed in
                same collection.
            transformation in stream - cannot do in memory transformation.you cannot change the stream, once you put item on assembly line,
             you cannot change it.it frees up from many concern that would appear if this transformation has been in place.for ex in collection if
             you are using collection in multi threaded you need to make sure that there is some sync block or you are using synchronized collection,
             burden is on you.
        benefits of streams being immutable(figure 6) -
            a)safe for parallel processing.there are no data race conditions when streams are processed in parallel.so, parallel processing of streams
                can be performed efficiently without any synchronization mechanism.
            consider if 2 threads are processing
                a collection, one deletes a element, then there needs to be some internal operations that can done on stream, before it is ready for processing, if second
                thread access it in between it is in messed up state. but in case of streams , there is no such thing s because
                a new stream is created.either you are looking at perfect old stream or a new stream. so this helps in avoiding some overheads for parallel execution.
            b)sideffect - immutability enforces that function used in stream operation cannot have sideffects. you cannot put element on stream, becasue it is 
                read only.
            d)encourages stateless behaviour - each worker sees a single item, it does not see complete stream. so it cannot place
                anywhere in stream and say , i will visist it later.

            e)each assembly line worker does one thing, so you can compose individual workers togather to create a pipeline, to do what you want it to do.


Limit and Filter Operators
    see code in Intermediate Operators
    intermediate operators always return new stream as stream is immutable.you can even store this stream returned in a variable.
    in assembly line analogy, think it like this each worker puts the item on new assembly line.

The Map Operator

The Peek operator and Debugging

The Effect of terminal operator
    D/w peek and forEach - in both we print something.
    forEach is not intermediate operator. it does not return stream. same things goes for toList.
    both of them are terminal operators.

    Also we said that streams are lazy, so stream does not start until we do not have someone to consume the stream. that is terminal
    operators. terminal operators can return anything,(like forEach returns void, tolIst returns list), but they take us out from stream
    paradigm.you think terminal operators as something which starts the asembly line i.e elements start comings. with intermediate operators
    we set up workers. until we have something to take us out from stream world, we do not prces sthe stream, this is what we menat when say that
    streams are lazy.

Distinct and Sorted Operators
    see code in IntermediateOperators.java
    Figure 6, point 5 -sorted needs to look at all elements in stream before it can sort them. figure 6,7,8
    you can also provide a comparator function. see figure 7,8.


Concatenating Stream
    Stream.concat is not a stream , this is API which combines 2 streams



Rule #1. If the only reason you want to extract your inline functions in props into useCallback is to avoid re-renders of children 
    components: don’t. It doesn’t work.



Rule #2. If your component manages state, find parts of the render tree that don’t depend on the changed state and memoise them to 
    minimize their re-renders.

     the ComponentList component now will be re-rendered only when useMemo dependencies will change.

    
    Here instead of using components in jsx retruned from component, we defined react elements and meorized them using useMemo.
        This way

    Other methods to prevent re-render of child when parent re-renders(Dan article) -
        a)Moving the state down
        b)children as prop
        c)component as prop


Rule #3. Never create new components inside the render function of another component.


Rule #4: When using context, make sure that value property is always memoised if it’s not a number, string or boolean.
    That way if component re-renders because of other reasons


    here when we were chnaging state, components that uses contexts should not not be re-rednered.
ways to attach event listener to DOM elements -
    1)attributes -
        <button onclick="alert('This is me)"></button>

        here browser creates a new function like this -
            elementRefrence.onclick = function() {
                //body of function comes from attribute value
                alert("this is me);
            }

        HTML attributes are used sparingly, because JavaScript in the middle of an HTML tag looks a little bit odd and alien. 
        Also can’t write lots of code in there.

        Don’t use setAttribute for handlers. This will not work -
            // a click on <body> will generate errors,
            // because attributes are always strings, function becomes a string
            document.body.setAttribute('onclick', function() { alert(1) });
    
    2)DOM property -
        elementRefrence.onclick = function(event) {
        }

        DOM properties are ok to use, but we can’t assign more than one handler of the particular event. In many cases that 
            limitation is not pressing.

    3)addEventListener -
        element.addEventListener(event, handler, [options]);

        options -

            once: if true, then the listener is automatically removed after it triggers.
            
            capture: the phase where to handle the event, to be covered later in the chapter Bubbling and capturing. For 
                historical reasons, options can also be false/true, that’s the same as {capture: false/true}.
            
            passive: if true, then the handler will not call preventDefault(), we’ll explain that later in Browser default 
                actions.

        This is the most flexible, but it is also the longest to write. There are few events that only work with it, for 
            instance transitionend and DOMContentLoaded (to be covered). Also addEventListener supports objects as event 
            handlers. In that case the method handleEvent is called in case of the event.
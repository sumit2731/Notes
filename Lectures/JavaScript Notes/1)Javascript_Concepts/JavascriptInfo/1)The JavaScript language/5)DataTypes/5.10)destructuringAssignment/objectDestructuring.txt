Object destructuring - 

    spread pattern -
    
        let options = {
            title: "Menu",
            width: 100,
            height: 200
        };

        a)same name variables as object properties -

            // order of properties does not matter - which leads to functin parameters trick
            let {height, width, title} = { title: "Menu", height: 200, width: 100 }


        b)diffrent varibales name as properties -

            // { sourceProperty: targetVariable }
            let {width: w, height: h, title} = options;

        c)default values -

            let options = {
                title: "Menu"
            };

            let {width: w = 100, height: h = 200, title} = options;

            Just like with arrays or function parameters, default values can be any expressions or even function calls. They will 
                be evaluated if the value is not provided.

    rest pattern(needs to be last assignment in destructuring assignment) - 

        let options = {
            title: "Menu",
            height: 200,
            width: 100
        };

        // title = property named title
        // rest = object with the rest of properties
        let {title, ...rest} = options;


    destructing without let -

        let title, width, height;

        // error in this line
        {title, width, height} = {title: "Menu", width: 200, height: 100};  
        
        // okay now
        ({title, width, height} = {title: "Menu", width: 200, height: 100});

        alert( title ); // Menu

    Nested destruring -  see code block 1

    Practical Uses - smart function parameters. see code block2
{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\froman\fprq2\fcharset0 Calibri;}{\f1\froman\fprq2\fcharset0 Liberation Serif;}{\f2\fnil\fcharset0 Droid Sans Mono;}{\f3\froman\fprq2 Calibri;}}
{\colortbl ;\red197\green134\blue192;\red0\green0\blue0;\red212\green212\blue212;\red156\green220\blue254;\red206\green145\blue120;\red220\green220\blue170;\red86\green156\blue214;\red128\green128\blue128;\red78\green201\blue176;\red106\green153\blue85;\red181\green206\blue168;}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\kerning1\f0\fs40\lang9 384)About this Section\f1\fs24\lang16393\par
\f0\lang9 This Section only provides an Introduction to Unit Testing an Angular 2 App.\f1\lang16393\par
\f0\lang9\par
It's NOT a detailed Guide about that neither is it a detailed Introduction to Unit Testing in general. Check out the "Further Resources" (last Lecture in this Module) to dive deeper into these topics.\f1\lang16393\par
\f0\fs40\lang9 385)Introduction\f1\fs24\lang16393\par
\f0\lang9 this is just inroduction to unit testing is angular 2 . you will learn how you can write your test with angular cli, you will also find resources for non-cli projects. you will learn how a test generally works works and why you might want to test and which testing utilies angular 2 offers us. i will explain some example test. for ex we will test a basic component, a service and a pipe. then it is upto you to use resources that i provide to dive deeper into it.\f1\lang16393\par
\f0\fs40\lang9 386)Why Unit Tests\f1\fs24\lang16393\par
\f0\lang9 why we want to unit testing.  lets have look at this application(figure 1), we have 2 components , 1 pipe and 1 service. then we can ask couple of questions(see figure). these are questions that we want to cover by unit tests.with unit test we hopefully get true response for all our tests telling us that our application is working as intended. Ofcourse you can already imagine that writing the tests correctly, is important part to get right answers.that is something that i am not going to teach you, because i cannot.writing tests is separate course, not even angular 2 specific, a course focusues on testing. \f1\lang16393\par
\f0\lang9  here our goal is to show you how to use testing in angular 2 application not philosiphy about how testing should work or how tests should be written.\f1\lang16393\par
\f0\lang9 Refer to figure 2.the cool thing is unit test allows us to guard against breaking chnages because we could say upon upgrading our angular 2 application we re run all our tests and we see which tests now fail. if they worked before then we know which places in our application now are broken due to upadte.\f1\lang16393\par
\f0\lang9  we can also analyse our code behaviour to detect both expected and unexpected results and we can reveal design mistakes.maybe while writing our test cases we experince some problem writing it bcoz we find a mistake in our general design. this how tests can help us.\f1\lang16393\par
\f0\lang9\par
again philosipy behind testing and how to write correct test cases is something which will not be covered here. but i want to show you how to create tests in your Angular 2 application.\f1\lang16393\par
\f0\fs40\lang9 387)Analyzing the testing setup (as created by CLI)\f1\fs24\lang16393\par
\f0\lang9 we cteated a brand new project with cli. again at the end of this module you will find a lecture where there is ,link to official docs which really have a great article on testing and not only this article dive deep into it and explore some use cases that are not covered in this module, it also gives you set of instructions on how to set up testing envirenemnt for example with systemJs.\f1\lang16393\par
\f0\lang9 now back to cli case . we do have app.component and by default we have  app.component.spec.ts file and this file is not empty.this code has unit test or actually couple of unit tests. each block begining with \lquote it\rquote  is a test.  Code-\f1\lang16393\par
\f0\lang9 app.component.spec.ts -\f1\lang16393\par
\cf1\highlight2\f0\lang9 import\cf3  \{ \cf4 TestBed\cf3 , \cf4 async\cf3  \} \cf1 from\cf3  \cf5 '@angular/core/testing'\cf3 ;\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 AppComponent\cf3  \} \cf1 from\cf3  \cf5 './app.component'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 describe\cf3 (\cf5 'AppComponent'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 beforeEach\cf3 (\cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 TestBed\cf3 .\cf6 configureTestingModule\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 declarations:\cf3  [\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 AppComponent\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 ],\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}).\cf6 compileComponents\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should create the app'\cf3 , \cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 AppComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 ).\cf6 toBeTruthy\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 `should have as title 'app'`\cf3 , \cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 AppComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 .\cf4 title\cf3 ).\cf6 toEqual\cf3 (\cf5 'app'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should render title in a h1 tag'\cf3 , \cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 AppComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'h1'\cf3 ).\cf4 textContent\cf3 ).\cf6 toContain\cf3 (\cf5 'Welcome to Angulartesting!'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\cf0\highlight0\f1\fs24\par
\f0\lang9 we also have beforeEach in begining, well as you might guess execute some code which should be run before running each test. here we are using a couple of angular 2 testing utilities to make our tests work. Before diving into them lets think our test should work theoratically.\f1\lang16393\par
\f0\lang9 If we think about logically,we do have here angular 2 application with, app.component and app.module, which run in browser. Somehow we need to run same in testing envirenmet and testing envirenment is juts script running over it, you could say. In order to simulate the same behaviour we also need to bootstrap our application. We need to bootstrpa our application, we need to set up app.module , then we need need to execute certain tasks which the user might do or see that is what is happening here. And i think that is great tasks to simply analyze this file to understand how angular unit tests actually work.\f1\lang16393\par
\f0\lang9 At the top we import 2 things from angular2 coretesting-\f1\lang16393\par
\cf1\highlight2\f0\lang9 import\cf3  \{ \cf4 TestBed\cf3 , \cf4 async\cf3  \} \cf1 from\cf3  \cf5 '@angular/core/testing'\cf3 ;\cf0\highlight0\f1\lang16393\par
\f0\lang9 this is testing package that angular ships with which has some utility tools like TestBed and async.i will explain them shortly. The we describe  our to be tested, unit in this case, which is app, here we want to test the app- app component and app module ofcourse.\f1\lang16393\par
\cf6\highlight2\f0\lang9 describe\cf3 (\cf5 'AppComponent'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf6\highlight2\f2\fs21 beforeEach\cf3 (\cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 TestBed\cf3 .\cf6 configureTestingModule\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 declarations:\cf3  [\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 AppComponent\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 ],\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}).\cf6 compileComponents\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should create the app'\cf3 , \cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 AppComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 ).\cf6 toBeTruthy\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 `should have as title 'app'`\cf3 , \cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 AppComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 .\cf4 title\cf3 ).\cf6 toEqual\cf3 (\cf5 'app'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should render title in a h1 tag'\cf3 , \cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 AppComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'h1'\cf3 ).\cf4 textContent\cf3 ).\cf6 toContain\cf3 (\cf5 'Welcome to Angulartesting!'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 we then have a closure(fucntion passed to describe) and that will all be executed by task runner , we are using and we will use cli with command(i will show in second) to run these tests. But you can setup any testing envirenemnt and typical test runner(confirm) is karma, a simple package that you install, and it is installed here, which runs our tests, the script i was refering to. Well the we firts execute beforeEach, So we do something  before each of these blocks(we are talking about it block) here is executed. Because , this is important, even thpugh these blocks are one after another, these are run totally independent of block before it. Blocks are not influenced by codes of other blocks. So beforeEach is only thing that will be executed before each individual block.\f1\lang16393\par
\f0\lang9 In beforeEach we configure a testing module as this metod on TestBed\f1\lang16393\par
\cf6\highlight2\f0\lang9 beforeEach\cf3 (\cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf4\highlight2\f2\fs21 TestBed\cf3 .\cf6 configureTestingModule\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 declarations:\cf3  [\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 AppComponent\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 ],\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}).\cf6 compileComponents\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9  and test bed is basically the main angular 2 testing utility object. So this allows us to configure modules for our testing and what we do here is,simply declare that whch components we want to have in this tetsing envirenment which is our app component. So this function , clearly looks like app.module but it does not have providers, bootstrap and imports. It only has declarations. And that make sense, because here we wnat to focus on part of application. We are not really running it in browser. We only wnat to focus on app component and rest will be simulated by  testing envirenment. So this is declared and initilized therefore-\f1\lang16393\par
\cf4\highlight2\f0\lang9 declarations:\cf3  [\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf4\highlight2\f2\fs21 AppComponent\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 ],\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 then we got couple of tests(\lquote it\rquote  blocks). The first one checks if the app was properly created. We always need to create a component in each \lquote it\rquote  block, since each it block is contained in itself. We do this by using createComponent on testBed and then we store this component in fixture variable.fixture is just the name you will commonly see for this created component, for this tetsing unit we are looking at. To this fucntion we pass as argument which component we want to create.\f1\lang16393\par
\cf6\highlight2\f0\lang9 it\cf3 (\cf5 'should create the app'\cf3 , \cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 const\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 AppComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 ).\cf6 toBeTruthy\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 `s\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 then we can get our app by  this fuxture which holds our created component. The dubugElement, that\rquote s just a property we can access  to , to get access to couple of elemens(on which we can have look at) for example instance of component which was created, which is our application in the end.\f1\lang16393\par
\f0\lang9 Then we always end our it block by using expect method , now that is not  coming from angular 2 as is beforeEach and it by the way. These are all related to testing package, so karma related or jasmine to be precise which is testing package. Testing package related methods. So expect basically says, we expect whatever we pass as argument(here we pass app) toBeTruthy which means yet to kind of exists. So this is how this test case can be written-\f1\lang16393\par
\f0\lang9 we have it block, then string is purely for human reading, then we tell what do we expect when we should create the app. We expect the app toBeTruthy , to be someohow existent.\f1\lang16393\par
\f0\lang9 In next block-\f1\lang16393\par
\cf6\highlight2\f0\lang9 it\cf3 (\cf5 `should have as title 'app'`\cf3 , \cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 const\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 AppComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 .\cf4 title\cf3 ).\cf6 toEqual\cf3 (\cf5 'app'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 we check that it should have title that says \f3\endash\f0  app. We craete component, we get access to the instance and then we say well we expect this app to have a title property(app component has variable named title) which is \lquote app\rquote . Obviously it is true as long as we do not chnage the value of title variable in app component. So that is how you write your test case. You have to reflect your actual application.\f1\lang16393\par
\f0\lang9 Finally third preexiting test is-\f1\lang16393\par
\cf6\highlight2\f0\lang9 it\cf3 (\cf5 'should render title in a h1 tag'\cf3 , \cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 const\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 AppComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'h1'\cf3 ).\cf4 textContent\cf3 ).\cf6 toContain\cf3 (\cf5 'Welcome to Angulartesting!'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 it is that it should rebder a h1 tag.here we call detectChanges to trigger chnage detection. That iis only way to do it. It won\rquote t run automatically since it does\rquote nt run in browser. So we trigger the chnage detection manually so that the template gets rendered. Here the native element which gives us access to our template. Then we say on this compiled template we expect h1 element, we get it with normal js query selector since this is normal javacsript object, the compiled variable here. We expect h1 to have text content \lquote app works\rquote .\f1\lang16393\par
\f0\lang9 This is 3 existing test cases and this is logic how this file gets executed, how it uses angular 2 tests utilities, with testbed and async, (i will comebsck to this ina second) . And default testing envirenment envirenment methods like it and expect to basically describe what we would like to see and how it should work.\f1\lang16393\par
\f0\lang9 This is theory. In next videos i will dive deeper into it and show some exmaples for testing a pipe, testing a component which sa a service injected into it and what does this asynce thing here actually does and what other utilities angular testing package offers us.\f1\lang16393\par
\f0\fs40\lang9 388)running tests(with the CLI)\f1\fs24\lang16393\par
\f0\lang9 now we understand how these tests are generally written, lets seethem in action. Go to project folder and run -\f1\lang16393\par
\b\f0\lang9 ng test\b0\f1\lang16393\par
\f0\lang9 thiw will run our tests through cli which again has this test runner and so on , built it.it will strtup the testing envirenment. We can gnore warning, it starts up karma. In terminal we can see that it executed 3 of 3 tests successfully. We we change some text , then we can see that our test failed.In terminal we can see how many tests have failed.\f1\lang16393\par
\f0\fs40\lang9 389)adding a component and some fitting tests\f1\fs24\lang16393\par
\f0\lang9 create anew component named user. User.html-\f1\lang16393\par
\cf8\highlight2\f0\lang9 <\cf7 div\cf3  \cf4 *ngIf\cf3 =\cf5 "isLoggedIn"\cf8 >\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf8\highlight2\f2\fs21 <\cf7 h1\cf8 >\cf3 User logged in\cf8 </\cf7 h1\cf8 >\cf0\highlight0\f1\fs24\par
\cf8\highlight2\f2\fs21 <\cf7 p\cf8 >\cf3 User is: \{\{user.name\}\}\cf8 </\cf7 p\cf8 >\cf0\highlight0\f1\fs24\par
\cf8\highlight2\f2\fs21 </\cf7 div\cf8 >\cf0\highlight0\f1\fs24\par
\par
\cf8\highlight2\f2\fs21 <\cf7 div\cf3  \cf4 *ngIf\cf3 =\cf5 "!isLoggedIn"\cf8 >\cf0\highlight0\f1\fs24\par
\cf8\highlight2\f2\fs21 <\cf7 h1\cf8 >\cf3 User not logged in\cf8 </\cf7 h1\cf8 >\cf0\highlight0\f1\fs24\par
\cf8\highlight2\f2\fs21 <\cf7 p\cf8 >\cf3 Please log in first\cf8 </\cf7 p\cf8 >\cf0\highlight0\f1\fs24\par
\cf8\highlight2\f2\fs21 </\cf7 div\cf8 >\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 user.ts-\f1\lang16393\par
\cf1\highlight2\f0\lang9 import\cf3  \{ \cf4 Component\cf3 , \cf4 OnInit\cf3  \} \cf1 from\cf3  \cf5 '@angular/core'\cf3 ;\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\par
\cf3\highlight2\f2\fs21 @\cf6 Component\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 selector:\cf3  \cf5 'app-user'\cf3 ,\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 templateUrl:\cf3  \cf5 './user.component.html'\cf3 ,\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 styleUrls:\cf3  [\cf5 './user.component.css'\cf3 ]\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\})\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 export\cf3  \cf7 class\cf3  \cf9 UserComponent\cf3  \cf7 implements\cf3  \cf9 OnInit\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 user\cf3 : \{\cf4 name\cf3 : \cf9 string\cf3\};\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 isLoggedIn\cf3  = \cf7 false\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 constructor\cf3 () \{ \}\cf0\highlight0\f1\fs24\par
\par
\cf6\highlight2\f2\fs21 ngOnInit\cf3 () \{\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par
\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\cf0\highlight0\f0\fs24\lang9 add this file to declaration array in app.module. Then we can go to app.component.html and use selector of this user component gere. But i wnt do it because i wnt watch this app in browser. Instead i will only test it.\f1\lang16393\par
\f0\lang9 Now i want to write some tests for this newly created user component.it has spec file but it is very basic.it includes TestBed and async task , but is not using them(in angular 6 file is little diffrent) It has test that checks that instance is created. Lets remove this test bevause it is not useful.lets write our own tests instead using angular 2 envirenment and not creating some well, non angular tests.\f1\lang16393\par
\f0\lang9 Here first i want to declare a module again. So i use beforeEach method here, which takes a callback here.i this callback i say, TestBed and testBed is really just this main testing object giving us acces to all this Configure my angular 2 application for tetsing utilities. Here i call configureTestingModule, it expects  a js object as argument. In this object i add decalrations like we do in @NgModule. Declaration is array and here i mention UserComponent becaus this is component that i want to test. Now Important, if you are not using cli or anyother webpack based setup, then you need to compileComponents thereafter. Like this-\f1\lang16393\par
\cf1\highlight2\f0\lang9 import\cf3  \{ \cf4 async\cf3 , \cf4 ComponentFixture\cf3 , \cf4 TestBed\cf3  \} \cf1 from\cf3  \cf5 '@angular/core/testing'\cf3 ;\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserComponent\cf3  \} \cf1 from\cf3  \cf5 './user.component'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 describe\cf3 (\cf5 'Component: User'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 beforeEach\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 TestBed\cf3 .\cf6 configureTestingModule\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 declarations:\cf3  [\cf4 UserComponent\cf3 ]\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}).\cf6 compileComponents\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\b\par
\b0\f0\lang9 you need to execute compiledCompoennts ,to well ,compile them.\f1\lang16393\par
\f0\lang9 Only while using webpack, this is not needed. Because webpack has different workflow, built in process where it will do it anyways because of the way you import you external html files and css files(in component ts file). It will do it while bundling or producing your app.\f1\lang16393\par
\f0\lang9 In  system.js setup for example, it wnt do this automatically, so you have to do that. Since angular 2 compiler which would do this in browser won\rquote t run here. So with we have compiled component or setup here. Next i wnat to craete a test. So we create it block, we give it aa desxription string. Where we will check that it creates the app. Then as second argument we pass arrow fucntion. In this function we create fixture again, wher i testBed and then createComponent and create UserComponent. Now we craeted this component in testing envirenment, it is like it was added with some selectore in some html template and we browsed to this page and then angular 2 will create it in background. Now i can get my app from this fixture and there we typically do this by accessing debug elment which is element exposed to use for testing purposes, where i can access my component instance. So this my my application,this running component instnace. Then i can say that i expact this app to truthy. We saw that before. It just checks that does it kind of exist.\f1\lang16393\par
\f0\lang9 App.component.spec.ts-\f1\lang16393\par
\cf1\highlight2\f0\lang9 import\cf3  \{ \cf4 async\cf3 , \cf4 ComponentFixture\cf3 , \cf4 TestBed\cf3  \} \cf1 from\cf3  \cf5 '@angular/core/testing'\cf3 ;\cf0\highlight0\f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserComponent\cf3  \} \cf1 from\cf3  \cf5 './user.component'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21\par
\cf6 describe\cf3 (\cf5 'Component: User'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 beforeEach\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 TestBed\cf3 .\cf6 configureTestingModule\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 declarations:\cf3  [\cf4 UserComponent\cf3 ]\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}).\cf6 compileComponents\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'shoould create the app'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 ).\cf6 toBeTruthy\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\par
\f0\lang9 now if we run -\f1\lang16393\par
\b\f0\lang9 ng test\b0  we can see that 4 tests are passed. It very simple test though, it is just checking that test ot application is strting up though.\f1\lang16393\par
\f0\fs40\lang9 390)testing Dependencies: Components and Services\f1\fs24\lang16393\par
\f0\lang9 till now are running simple test like component is created or not. Now create a service- user.service.ts is user folder. In this file we want to have auser object that i can retrieve from my component. User.service.ts-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 export\cf3  \cf7 class\cf3  \cf9 UserService\cf3  \{\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf4\highlight2\f2\fs21 user\cf3  = \{\cf4 name:\cf3  \cf5 'Max'\cf3\};\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 in usercomponennt we inject this service and use this user from service. Then we provide thiss ervice at level of component by using proivders on component. UserComponent.ts-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 import\cf3  \{ \cf4 Component\cf3 , \cf4 OnInit\cf3  \} \cf1 from\cf3  \cf5 '@angular/core'\cf3 ;\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserService\cf3  \} \cf1 from\cf3  \cf5 './user.service'\cf3 ;\cf0\highlight0\f1\fs24\par
\par
\cf3\highlight2\f2\fs21 @\cf6 Component\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 selector:\cf3  \cf5 'app-user'\cf3 ,\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 templateUrl:\cf3  \cf5 './user.component.html'\cf3 ,\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 styleUrls:\cf3  [\cf5 './user.component.css'\cf3 ],\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 providers:\cf3  [\cf4 UserService\cf3 ]\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\})\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 export\cf3  \cf7 class\cf3  \cf9 UserComponent\cf3  \cf7 implements\cf3  \cf9 OnInit\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 user\cf3 : \{\cf4 name\cf3 : \cf9 string\cf3\};\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 isLoggedIn\cf3  = \cf7 false\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 constructor\cf3 (\cf7 private\cf3  \cf4 userService\cf3 : \cf9 UserService\cf3 ) \{ \}\cf0\highlight0\f1\fs24\par
\par
\cf6\highlight2\f2\fs21 ngOnInit\cf3 () \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 this\cf3 .\cf4 user\cf3  = \cf7 this\cf3 .\cf4 userService\cf3 .\cf4 user\cf3 ;\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par
\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\cf0\highlight0\f0\fs24\lang9 now our applications , works but how should we make testing work. Well we want to take user name from userService, so lets create a new test for that.in user.sepc.ts. We copy first 2 lines from last test to get my app, now i also want to inject my service. So how does we force it to inject userService  into the component in our testing envirenment. Well by creating a userService variable  here, where i say fixture, debugElement, injector(this is how we get access ro angular injector), get and then we pass userService.\f1\lang16393\par
\f0\lang9 What it does is it uses angular 2 injector which exists and which will well part of this component, we noe have created and tells it please get me instnace of this user service. This is how we do it. As a side note, you can learn more diffrent ways of injecting this in document at the end of this section. So this is userService here and with that userService i can now say that i expect my userService user\rquote name equal to app user\rquote s name. Code-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 import\cf3  \{ \cf4 async\cf3 , \cf4 ComponentFixture\cf3 , \cf4 TestBed\cf3  \} \cf1 from\cf3  \cf5 '@angular/core/testing'\cf3 ;\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserComponent\cf3  \} \cf1 from\cf3  \cf5 './user.component'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserService\cf3  \} \cf1 from\cf3  \cf5 './user.service'\cf3 ;\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21\par
\cf6 describe\cf3 (\cf5 'Component: User'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 beforeEach\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 TestBed\cf3 .\cf6 configureTestingModule\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 declarations:\cf3  [\cf4 UserComponent\cf3 ]\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}).\cf6 compileComponents\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'shoould create the app'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 ).\cf6 toBeTruthy\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should use teh user name from the service'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 userService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 UserService\cf3 );\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 userService\cf3 .\cf4 user\cf3 .\cf4 name\cf3 ).\cf6 toEqual\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\b\par
\b0\f0\lang9 upon running test now we should see 5 test ran. But no we get error-  cnt read name of undefined. What went wrong?followimg went wrong, we are getting this property from the service because we ijected it and we do this in ngonit but w eare misisng one thing that happens automatically in app running in browser but not here. We need to run chnage detection to update our properties and so on. So afer injecting service, call fixture.detectChanges(). Now our test will run,. Now w eare trying to access user name property on our component after we updaed it and we neede to update it because it is not in same state as it was at begining. We injected service and got data from there even though that happended synchronously but it\rquote s still not in same state as it was before.(in code it was undefined in begining, it at ngOnit(0 we assign it a value).\f1\lang16393\par
\f0\lang9 Code-\f1\lang16393\par
\f0\lang9 user.component.spec.ts-\f1\lang16393\par
\cf6\highlight2\f0\fs21\lang9 it\cf3 (\cf5 'should use teh user name from the service'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 userService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 UserService\cf3 );\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 userService\cf3 .\cf4 user\cf3 .\cf4 name\cf3 ).\cf6 toEqual\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 now our tests are passed. Now it would be intersting to see if our *ngIf thing here works correctly . So we want to check that we see user names only if we are lkogged in and we do not see user name if we are not logged in.for this create a new test(it block). In callback copy code from last test thogh here i wnat to do something diffrent.i also want to compile my code, so my template. So i will get access to the complied template, i should say. So i access fixture, then nativeElement , thenEleemnt, which is my template. Then i expect my compiled template to have paragraph element , and it\rquote s content should be eqlat to name proeprty of user variable in component.\f1\lang16393\par
\cf6\highlight2\f0\fs21\lang9 it\cf3 (\cf5 'should display user name if user is logged in'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 userService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 UserService\cf3 );\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'p'\cf3 ).\cf4 textContent\cf3 ).\cf6 toContain\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\b\par
\b0\f0\lang9  But this case will happen only if user is logged in. So if we run our test now, it will fail, because it cannot find p tag with that text. So we have to chnage this. I actually do not want to access my user service like this anymore, it will still get injected here but i do not want to access it like we do in last test case. So i do not need to explicitly need to name it here.i do not need to retreive it from injector i should say. It can be done by angular 2 automatically. So we remove that line. Then we setLoggedIn to true so that, we simulate the case where user is logged in. Then we write another test to check when user is not logged in.\f1\lang16393\par
\f0\lang9 User.component.spec.ts-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 import\cf3  \{ \cf4 async\cf3 , \cf4 ComponentFixture\cf3 , \cf4 TestBed\cf3  \} \cf1 from\cf3  \cf5 '@angular/core/testing'\cf3 ;\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserComponent\cf3  \} \cf1 from\cf3  \cf5 './user.component'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserService\cf3  \} \cf1 from\cf3  \cf5 './user.service'\cf3 ;\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21\par
\par
\cf6 describe\cf3 (\cf5 'Component: User'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 beforeEach\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 TestBed\cf3 .\cf6 configureTestingModule\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 declarations:\cf3  [\cf4 UserComponent\cf3 ]\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}).\cf6 compileComponents\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'shoould create the app'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 ).\cf6 toBeTruthy\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should use teh user name from the service'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 userService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 UserService\cf3 );\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 userService\cf3 .\cf4 user\cf3 .\cf4 name\cf3 ).\cf6 toEqual\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should display user name if user is logged in'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 app\cf3 .\cf4 isLoggedIn\cf3  = \cf7 true\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'p'\cf3 ).\cf4 textContent\cf3 ).\cf6 toContain\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should not display user name if user is not logged in'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'p'\cf3 ).\cf4 textContent\cf3 ).\cf4 not\cf3 .\cf6 toContain\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\fs40\lang9 391)simulating Async Tasks\f1\fs24\lang16393\par
\f0\lang9 we have\rquote nt talk about async that we import along with testbed-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 import\cf3  \{ \cf4 async\cf3 , \cf4 ComponentFixture\cf3 , \cf4 TestBed\cf3  \} \cf1 from\cf3  \cf5 '@angular/core/testing'\cf3 ;\cf0\highlight0\f1\fs24\lang16393\par
\f0\lang9 also cases that we handled were synchronous. Lets see some asynchronous tasks. Create  data.service.ts in shared folder.in this service we have a method that returns a promise. In user component we inject this service and we provide this service at component level. So this is asynchronous task. Code-\f1\lang16393\par
\f0\lang9 data.service.ts-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 import\cf3  \{ \cf4 promise\cf3  \} \cf1 from\cf3  \cf5 "protractor"\cf3 ;\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\par
\cf1\highlight2\f2\fs21 export\cf3  \cf7 class\cf3  \cf9 DataService\cf3\{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 getdetails\cf3 () \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 resultPromise\cf3  = \cf7 new\cf3  \cf9 Promise\cf3 ((\cf4 resolve\cf3 ,\cf4 reject\cf3 ) \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 setTimeout\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 resolve\cf3 (\cf5 'Data'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}, \cf11 1500\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 return\cf3  \cf4 resultPromise\cf3 ;\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\b\par
\b0\f0\lang9 Lets write some test. First lets write normal test(not asynchrnous) and see if it works. We name this test - \cf5\highlight2\fs21 should not fetch data if it is not called asycnchronously\cf0\highlight0\f1\fs24\lang16393\par
\f0\lang9 because i want to show diffrence between this way of setting up the test and using async function. So we setup this test, copy lines from previous test. And now somehoe i need to get acess getDeatils method which happen asynchronously. The thing is i don\rquote t necessarily want to execute the real getDetails method because this method might reach out to server and in real application you do not want to reach out to server each time you are testing the application.instead you kind of want to fake it. You want to overwrite it.you want to create your fake implementation which is still asynchrinous but does something else or does at leat not reach out to server and provide simply dummy data which real service would have given you back.\f1\lang16393\par
\f0\lang9 Therefore we create new variable spy, then i use spyOn(0, this is another function provided by testing envirenment, so not a angular 2 specific tetsing function. Here we girst tell on what we wnat to spy. I want to spy on dataservice. So we get access to dataService  using angular 2 injector, we have did that before also. Then we pass that as as first argument to spyOn.\f1\lang16393\par
\f0\lang9 In datasrvice we want to spy on getdeatils method. Which we pass as second argument to spyOn. Well with thi setup what i can do now is i can chain something with and then say returnValue. So we spy on that, means we get informed whenever getDetails gets executed. So this is what spyOn means we lsiten to it adn wheneevr it gets executed, when running a test, we wnt execute it instead we will return a value on our own. The value that we return is Promise.resolve(data).\f1\lang16393\par
\f0\lang9 Now what does this does behind the scenes is it wll execute the code , the asynchronous code but it will eventually gives us back our own data not what asynchroous task would have given us.it will still run in asynchronous fashion though. So i spy on it and get data.\f1\lang16393\par
\f0\lang9 Then i run chnage detection to update my component after i get this data here.then i want to chekc that if it works. So i expect my app.data filed to be undefined. Normallly i would expect it to be something else becuase in app.component.ts w ehave-\f1\lang16393\par
\cf6\highlight2\f0\fs21\lang9 ngOnInit\cf3 () \{\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 this\cf3 .\cf4 user\cf3  = \cf7 this\cf3 .\cf4 userService\cf3 .\cf4 user\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 this\cf3 .\cf4 dataService\cf3 .\cf6 getDetails\cf3 ().\cf6 then\cf3 ((\cf4 data\cf3 : \cf9 string\cf3 ) \cf7 =>\cf3  \cf7 this\cf3 .\cf4 data\cf3  = \cf4 data\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\cf3\highlight2\f2\fs21\par
\cf0\highlight0\f0\fs24\lang9 so data that promises returns is tored in data property.\f1\lang16393\par
\f0\lang9 User.compoennt.spec.ts-\f1\lang16393\par
\cf6\highlight2\f0\fs21\lang9 it\cf3 (\cf5 'should not fetch data if it is not called asycnchronously'\cf3 ,() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 dataService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 DataService\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 spy\cf3  = \cf6 spyOn\cf3 (\cf4 dataService\cf3 , \cf5 "getDetails"\cf3 )\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 .\cf4 and\cf3 .\cf6 returnValue\cf3 (\cf9 Promise\cf3 .\cf6 resolve\cf3 (\cf5 'Data'\cf3 ));\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 .\cf4 data\cf3 ).\cf6 toBe\cf3 (\cf7 undefined\cf3 );\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl285\slmult0\cf3\highlight2\f0\fs21\lang9\});\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9  Here in our test\f1\lang16393\par
\f0\lang9 i expect it to be undefined and reson why I do expect that is because I know that this will kind of fail and i will come back on it in a second. Lets run our test cases.\f1\lang16393\par
\f0\lang9 User.component.spec.ts-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 import\cf3  \{ \cf4 async\cf3 , \cf4 ComponentFixture\cf3 , \cf4 TestBed\cf3  \} \cf1 from\cf3  \cf5 '@angular/core/testing'\cf3 ;\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserComponent\cf3  \} \cf1 from\cf3  \cf5 './user.component'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserService\cf3  \} \cf1 from\cf3  \cf5 './user.service'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 DataService\cf3  \} \cf1 from\cf3  \cf5 '../data.service'\cf3 ;\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21 // describe('UserComponent', () => \{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // let component: UserComponent;\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // let fixture: ComponentFixture<UserComponent>;\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21 // beforeEach(async(() => \{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // TestBed.configureTestingModule(\{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // declarations: [ UserComponent ]\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \})\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // .compileComponents();\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \}));\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21 // beforeEach(() => \{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // fixture = TestBed.createComponent(UserComponent);\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // component = fixture.componentInstance;\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // fixture.detectChanges();\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \});\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21 // it('should create', () => \{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // expect(component).toBeTruthy();\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \});\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 describe\cf3 (\cf5 'Component: User'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 beforeEach\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 TestBed\cf3 .\cf6 configureTestingModule\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 declarations:\cf3  [\cf4 UserComponent\cf3 ]\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}).\cf6 compileComponents\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'shoould create the app'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 ).\cf6 toBeTruthy\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should use teh user name from the service'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 userService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 UserService\cf3 );\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 userService\cf3 .\cf4 user\cf3 .\cf4 name\cf3 ).\cf6 toEqual\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should display user name if user is logged in'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 app\cf3 .\cf4 isLoggedIn\cf3  = \cf7 true\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'p'\cf3 ).\cf4 textContent\cf3 ).\cf6 toContain\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should not display user name if user is not logged in'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'p'\cf3 ).\cf4 textContent\cf3 ).\cf4 not\cf3 .\cf6 toContain\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should not fetch data if it is not called asycnchronously'\cf3 ,() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 dataService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 DataService\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 spy\cf3  = \cf6 spyOn\cf3 (\cf4 dataService\cf3 , \cf5 "getDetails"\cf3 )\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 .\cf4 and\cf3 .\cf6 returnValue\cf3 (\cf9 Promise\cf3 .\cf6 resolve\cf3 (\cf5 'Data'\cf3 ));\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 .\cf4 data\cf3 ).\cf6 toBe\cf3 (\cf7 undefined\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 user.compoent.ts-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 import\cf3  \{ \cf4 Component\cf3 , \cf4 OnInit\cf3  \} \cf1 from\cf3  \cf5 '@angular/core'\cf3 ;\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserService\cf3  \} \cf1 from\cf3  \cf5 './user.service'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 DataService\cf3  \} \cf1 from\cf3  \cf5 '../data.service'\cf3 ;\cf0\highlight0\f1\fs24\par
\par
\cf3\highlight2\f2\fs21 @\cf6 Component\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 selector:\cf3  \cf5 'app-user'\cf3 ,\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 templateUrl:\cf3  \cf5 './user.component.html'\cf3 ,\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 styleUrls:\cf3  [\cf5 './user.component.css'\cf3 ],\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 providers:\cf3  [\cf4 UserService\cf3 , \cf4 DataService\cf3 ]\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\})\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 export\cf3  \cf7 class\cf3  \cf9 UserComponent\cf3  \cf7 implements\cf3  \cf9 OnInit\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 user\cf3 : \{\cf4 name\cf3 : \cf9 string\cf3\};\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 isLoggedIn\cf3  = \cf7 false\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 data\cf3 : \cf9 string\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 constructor\cf3 (\cf7 private\cf3  \cf4 userService\cf3 : \cf9 UserService\cf3 , \cf7 private\cf3  \cf4 dataService\cf3 : \cf9 DataService\cf3 ) \{ \}\cf0\highlight0\f1\fs24\par
\par
\cf6\highlight2\f2\fs21 ngOnInit\cf3 () \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 this\cf3 .\cf4 user\cf3  = \cf7 this\cf3 .\cf4 userService\cf3 .\cf4 user\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 this\cf3 .\cf4 dataService\cf3 .\cf6 getDetails\cf3 ().\cf6 then\cf3 ((\cf4 data\cf3 : \cf9 string\cf3 ) \cf7 =>\cf3  \cf7 this\cf3 .\cf4 data\cf3  = \cf4 data\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par
\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\cf0\highlight0\f0\fs24\lang9 data.service.ts-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 import\cf3  \{ \cf4 promise\cf3  \} \cf1 from\cf3  \cf5 "protractor"\cf3 ;\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\par
\cf1\highlight2\f2\fs21 export\cf3  \cf7 class\cf3  \cf9 DataService\cf3\{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 getDetails\cf3 () \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 const\cf3  \cf4 resultPromise\cf3  = \cf7 new\cf3  \cf9 Promise\cf3 ((\cf4 resolve\cf3 ,\cf4 reject\cf3 ) \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 setTimeout\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 resolve\cf3 (\cf5 'Data'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}, \cf11 1500\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 return\cf3  \cf4 resultPromise\cf3 ;\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 upon running we can see that all test cases are passed.so that means it does not gives us normally expected result. Normal test result would be value of app.data shuld be \lquote data\rquote . Becaus ethis is what promise resolves too. So last line of final test should be - \f1\lang16393\par

\pard\nowidctlpar\hyphpar0\sa200\sl285\slmult0\cf6\highlight2\f0\fs21\lang9 expect\cf3 (\cf4 app\cf3 .\cf4 data\cf3 ).\cf6 toBe\cf3 (\cf5 'Data'\cf3 );\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9  but if we run ttets using last line it fails. We expect data to be undefined at begining but in ngOnit we set to value that prmoise will be resolved to. So how does we test such a asynchrounus taks, where state chnages during run time. \f1\lang16393\par
\f0\lang9 Lets write second test case.cipy teh [revioud test acse , change the description string. Here we wrap our callback that we pass to \lquote it\rquote  block in aync function. We import async function from angular 2 testing package.\f1\lang16393\par
\cf6\highlight2\f0\fs21\lang9 it\cf3 (\cf5 'should fetch data if called asycnchronously'\cf3 ,\cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 dataService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 DataService\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 spy\cf3  = \cf6 spyOn\cf3 (\cf4 dataService\cf3 , \cf5 "getDetails"\cf3 )\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 .\cf4 and\cf3 .\cf6 returnValue\cf3 (\cf9 Promise\cf3 .\cf6 resolve\cf3 (\cf5 'Data'\cf3 ));\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 .\cf4 data\cf3 ).\cf6 toBe\cf3 (\cf7 undefined\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 now what it does is, it creates a kind of asynchronous r-testing envirenemnt for angular 2. it fakes it, it \lquote s not really asynchronous but it allows us to run asynchronous tasks there and angular 2 is aware that there are async tasks and is able to handle them as if it would handle them in real application wher they are inded also asynchronous. Do this i need to do one more thing, after detecting changes i need to run whenStable on fixture. This function on fixture allows me to react when all asynchronous tasks are finished. Here i can then execute then function of my promise whichtakes a call back to be executed and inside of this callback I expect something to happen i.e we move expect function inside this callback. So once async task has been finished  then expact data variable of component to have \lquote string \lquote data\rquote  value. Now our test passes with string \lquote data\rquote  value-\f1\lang16393\par
\cf6\highlight2\f0\fs21\lang9 it\cf3 (\cf5 'should fetch data if called asycnchronously'\cf3 ,\cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 dataService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 DataService\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 spy\cf3  = \cf6 spyOn\cf3 (\cf4 dataService\cf3 , \cf5 "getDetails"\cf3 )\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 .\cf4 and\cf3 .\cf6 returnValue\cf3 (\cf9 Promise\cf3 .\cf6 resolve\cf3 (\cf5 'Data'\cf3 ));\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 whenStable\cf3 ().\cf6 then\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 .\cf4 data\cf3 ).\cf6 toBe\cf3 (\cf7 undefined\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\lang9 because now we are waiiting for asynchrnous tasl to finish.it is not really happening asynchronously. We are faking it here. Remember we are reurning our own value in test , but with async wrapping this callback we are telling angular 2 that hey we do have some asynchronous taks even though promise resolves instantly, it still is promise wrapping some value and not resolved not the value itself. So with async we are now able to call whenStable here and wait for our envirenment to stabilize, for wll async tasks to finish and therefore successfully access the data at a state that it would be in real envirenment.\f1\lang16393\par
\f0\lang9 code-\f1\lang16393\par
\f0\lang9 user.component.spec.ts-\f1\lang16393\par
\cf1\highlight2\f0\fs21\lang9 import\cf3  \{ \cf4 async\cf3 , \cf4 ComponentFixture\cf3 , \cf4 TestBed\cf3  \} \cf1 from\cf3  \cf5 '@angular/core/testing'\cf3 ;\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserComponent\cf3  \} \cf1 from\cf3  \cf5 './user.component'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 UserService\cf3  \} \cf1 from\cf3  \cf5 './user.service'\cf3 ;\cf0\highlight0\f1\fs24\par
\cf1\highlight2\f2\fs21 import\cf3  \{ \cf4 DataService\cf3  \} \cf1 from\cf3  \cf5 '../data.service'\cf3 ;\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21 // describe('UserComponent', () => \{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // let component: UserComponent;\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // let fixture: ComponentFixture<UserComponent>;\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21 // beforeEach(async(() => \{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // TestBed.configureTestingModule(\{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // declarations: [ UserComponent ]\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \})\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // .compileComponents();\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \}));\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21 // beforeEach(() => \{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // fixture = TestBed.createComponent(UserComponent);\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // component = fixture.componentInstance;\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // fixture.detectChanges();\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \});\cf0\highlight0\f1\fs24\par
\par
\cf10\highlight2\f2\fs21 // it('should create', () => \{\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // expect(component).toBeTruthy();\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \});\cf0\highlight0\f1\fs24\par
\cf10\highlight2\f2\fs21 // \});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 describe\cf3 (\cf5 'Component: User'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 beforeEach\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 TestBed\cf3 .\cf6 configureTestingModule\cf3 (\{\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 declarations:\cf3  [\cf4 UserComponent\cf3 ]\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}).\cf6 compileComponents\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'shoould create the app'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 ).\cf6 toBeTruthy\cf3 ();\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should use teh user name from the service'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 userService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 UserService\cf3 );\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 userService\cf3 .\cf4 user\cf3 .\cf4 name\cf3 ).\cf6 toEqual\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should display user name if user is logged in'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 app\cf3 .\cf4 isLoggedIn\cf3  = \cf7 true\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'p'\cf3 ).\cf4 textContent\cf3 ).\cf6 toContain\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should not display user name if user is not logged in'\cf3 , () \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 compiled\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 nativeElement\cf3 ;\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 compiled\cf3 .\cf6 querySelector\cf3 (\cf5 'p'\cf3 ).\cf4 textContent\cf3 ).\cf4 not\cf3 .\cf6 toContain\cf3 (\cf4 app\cf3 .\cf4 user\cf3 .\cf4 name\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 it\cf3 (\cf5 'should fetch data if called asycnchronously'\cf3 ,\cf6 async\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 dataService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 DataService\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 spy\cf3  = \cf6 spyOn\cf3 (\cf4 dataService\cf3 , \cf5 "getDetails"\cf3 )\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 .\cf4 and\cf3 .\cf6 returnValue\cf3 (\cf9 Promise\cf3 .\cf6 resolve\cf3 (\cf5 'Data'\cf3 ));\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 whenStable\cf3 ().\cf6 then\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 .\cf4 data\cf3 ).\cf6 toBe\cf3 (\cf5 'Data'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\});\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\f0\fs40\lang9 392) Using \ldblquote fakeAsync\rdblquote  and \ldblquote tick\rdblquote\f1\fs24\lang16393\par
\f0\lang9 we do have an alternative to using setup thatw e used in last lecture. \f1\lang16393\par
\f0\lang9 Since it kind of happens synchronously anyways and is theoratically asynchronous. You will notice that we didnt wait 1.5 seconds before resolving promise.\f1\lang16393\par
\f0\lang9 Copy last test and paste it below it. We will modify it a little-\f1\lang16393\par
\f0\lang9 instead of wrapping a callback in async function we use fakeAsync, you need to import it from anguar testing framwork. What it allows me to do is, it allows me to get rid of whenStable fucntion. So we can execute  expect directly. But we have to call tick in betwee. This gain nees to be imported. Tick basically means in fakeasynchronous envirenment, finish all asynchronous asks now. When tick is executed all asynchrnous tasks are finished, we can finished them immediatley  since we resolve promise instantly, we do not wait 1.5 seconds to resolve it. That is why we wrote it in this way. We don;t wnat to wait that time when testing. Now we should have access to our data. After that w eexecute expect block. Test runes fine.\f1\lang16393\par
\cf6\highlight2\f0\fs21\lang9 it\cf3 (\cf5 'should fetch data if called asycnchronously'\cf3 ,\cf6 fakeAsync\cf3 (() \cf7 =>\cf3  \{\cf0\highlight0\f1\fs24\lang16393\par

\pard\nowidctlpar\hyphpar0\sl285\slmult0\cf7\highlight2\f2\fs21 let\cf3  \cf4 fixture\cf3  = \cf4 TestBed\cf3 .\cf6 createComponent\cf3 (\cf4 UserComponent\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 app\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 componentInstance\cf3 ;\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 dataService\cf3  = \cf4 fixture\cf3 .\cf4 debugElement\cf3 .\cf4 injector\cf3 .\cf6 get\cf3 (\cf4 DataService\cf3 );\cf0\highlight0\f1\fs24\par
\cf7\highlight2\f2\fs21 let\cf3  \cf4 spy\cf3  = \cf6 spyOn\cf3 (\cf4 dataService\cf3 , \cf5 "getDetails"\cf3 )\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21 .\cf4 and\cf3 .\cf6 returnValue\cf3 (\cf9 Promise\cf3 .\cf6 resolve\cf3 (\cf5 'Data'\cf3 ));\cf0\highlight0\f1\fs24\par
\cf4\highlight2\f2\fs21 fixture\cf3 .\cf6 detectChanges\cf3 ();\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 tick\cf3 ();\cf0\highlight0\f1\fs24\par
\cf6\highlight2\f2\fs21 expect\cf3 (\cf4 app\cf3 .\cf4 data\cf3 ).\cf6 toBe\cf3 (\cf5 'Data'\cf3 );\cf0\highlight0\f1\fs24\par
\cf3\highlight2\f2\fs21\}));\cf0\highlight0\f1\fs24\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\b\par
\b0\f0\lang9 so you can use either of 2 approaches. In first approacj we fake or  or ehave like it was really asynchronous, in secomd approach you use tick to say, yeah, lets go on.\f1\lang16393\par
\f0\lang9 This is how you can use services and components. I picked tis task as they are very importnat and probbaly ,most complex especially with injection and asynchronous tasks.again i do have a doc where you can dive deeper into that.\f1\lang16393\par
}
 
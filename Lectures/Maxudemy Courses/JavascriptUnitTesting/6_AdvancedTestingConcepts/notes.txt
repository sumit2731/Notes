47)Advanced Concepts -
    Testing Asynchronous Code - 
        async-example.test.js (callback based and promise based)
        jest docs -
            https://jestjs.io/docs/asynchronous
            https://jestjs.io/docs/tutorial-async#resolves
    Using Setup & CleanUp Hooks
    Vitest Specific features -
        Concurrent Tests

48)toBe() vs toEqual()
    toBe() - test equality
    toEqual() - Does the deep comparison of value


50)Testing Asynchronous code with callbacks
    see async--example.test.js file.

    also see jest docs

    important thing is jest should not finish test bfore your asynchronous code is executed. there are various ways to do that-
        a)use done function while using callback
        b)return a promise from test callback
        c)use async await(this automatically return a function)

        from docs -
            a)Specify number of assertions to be made - expect.assertions(number)
            b)specify there aare some assertions in code - expect.hasAssertions()

53)Getting Started with Hooks
    Hooks are functions that are executed automatically by test runner at certains points of time.

    beforeAll
    beforeEach
    afterAll
    afterEach

    these hooks can be defined at file level as well as suite level.there is difference in that

    code - hooks/hooks.test.js


56)Concurrent Tests
    describe.concurrent() - all tests in suite will be executed paralelely.
    it.concurrent() - all tests in same file which have this concurrent property will run in parallele

    Test in different files are always executed concurrently. -

        https://www.udemy.com/course/javascript-unit-testing-the-practical-guide/learn/lecture/31879108#questions


Files changed -
    a)async-example.test.js
    b)hooks.test.js

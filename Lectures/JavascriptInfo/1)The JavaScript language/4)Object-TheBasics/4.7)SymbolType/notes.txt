Symbol -

    Symbol is a primitive type for unique identifiers.
    object property keys may be either of string type, or of symbol type.


Accessing symbol properties over object
    
    Symbols are skipped by for…in
    Object.keys(user) also ignores them
    Object.getOwnPropertySymbols - It gives objects own symbol properties even if they are non enemreble.
    Reflect.ownKeys() - Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target)).

In contrast, Object.assign copies both string and symbol properties.


Global symbol registry - 

    API -
        Symbol.for(key
        Symbol.keyFor(sym)

    If we want same-named symbols to be same entities. For instance, different parts of our application want to access symbol 
        "id" meaning exactly the same property.To achieve that, there exists a global symbol registry.We can create symbols in
         it and access them later, and it guarantees that repeated accesses by the same name return exactly the same symbol.


    In order to read (create if absent) a symbol from the registry, use Symbol.for(key).That call checks the global registry, 
        and if there’s a symbol described as key, then returns it, otherwise creates a new symbol Symbol(key) and stores it in
         the registry by the given key


    Symbols inside the registry are called global symbols. If we want an application-wide symbol, accessible

    Symbol.keyFor(sym), that does the reverse: returns a name by a global symbol.

System Symbol-

    There are many system symbols used by JavaScript which are accessible as Symbol.*. We can use them to alter some built-in
     behaviors. For instance, later in the tutorial we’ll use Symbol.iterator for iterables, Symbol.toPrimitive to 


Well Known System Symbols - 

    Symbol.hasInstance
    Symbol.isConcatSpreadable
    Symbol.iterator -  for iterables,
    Symbol.toPrimitive - setup object-to-primitive conversion and so on.
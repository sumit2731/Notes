65)Understanding JOb Artifacts (slide 43)
    there are many data definitions in github actions, lets start with Job Artifacts
    Job Artifacts - It's the output, the assets generated by a Job.like build files

    what we can do with artifacts -
        a)we can upload,and save those artifacts that are produced by a Job,so that as a user,
            as the owner of the Repository,we could download them manually
        b) we can also download,and use them automatically in other Jobs. we can subsequent job
            that do something with that artifact.


66,67) Downloading artifacts
    here In a job we saved a artifactl which can be later downloaded in giitgub actions.
    we used the uplaod-sartifact actions for same. see docs for all configs.
    in demo.yaml read comments

68)Downloading artifact
    Here we downloaded the artifact thet was upload in previous job.
    here we used the download-artifact action. see docs for detail.

69)Artifacts vs JOb Outputs
    slide 44
    it could be any kind of value that we wanna make available across jobs,so values that are 
    derived in one job and must be available in other jobs,that could be dates, hashes, random
    values,anything like that.


70)JOb Outputs - An Example
    here we set the output value in a steps, via >> GITHUB_OUTPUT and then via steps context 
     we accessed that value at job level and exposed that value in output field of job.
    at job level we access value like this - 
    
    at step level - 
        run: find  dist/assets/*.js -type f -execdir echo 'script-file={}' >> GITHUB_OUTPUT ';'
    at job level - 
        outputs:
            script-file: ${{steps.publish.outputs.script-file}}

    how to set value at steps  level - https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs


71)Using job outputs in other jobs
    we can access job outputs via jobs context also but for getting outputs, depends context in better.
    it has all jobs that this current job depends upon.

    run: echo "${{needs.build.outputs.script-file}}"


72)The Need For Dependency Caching  
    You can cache the dependencies across jobs/ workflows.
    As we saw that step that takes longest time is installing dependecies.

    there is built in actions for caching the dependecies -
        https://github.com/actions/cache

73)Caching Dependencies in Practice
    here we used the actions/cache@v3 action to cache the dependencies. cache strategy depends upon language
    and tool that you are using,for full list have a look at  documentation.



Things we did in this section -
    a)We saved the artifacts using a inbuilt upload action. 
        these artifacts can be later downloaded manually or can be
        accessed in other job using another built-in action called download artifacts.

    b)Then we saw how we can generate outputs in actions, access them at job level.

    c)how we can access outputs from one job at other job.


1)Querying Store -

    Here we will see how we can get state from store. see app.component.ts. so we injected instance of
        store service. It is a observable, we can subscribe to it, we will get new value everytime state
        changes. like this-

        constructor(private router: Router, private store: Store<AppState>) {}

        this.isLoggedIn$ = this.store.pipe(map(state => !!state['auth'].user));

2)Initial Actions in store-

    If we see in "Redux DevTools" ,we see 2  actions before doing anything, 
        a)@ngrx/store/init - it is store initial action which gets dispatch automatically at application start up time, 
            in order to initialize the defualt values of our store.

        2)@ngrx/store/update-reducers -  on the other hand whenever we add new feature modules to our application, each 
            time that that happens we're going to be triggering this action

        So these actions can be useful in certain circumstances if we want to trigger something in response to one of 
        these initialization events.

now refer to lectures
3)better of querying the store(14)14. NgRx Selectors - An In-Depth Explanation)-
    Our application will have lot of actions. And with each action that gets dispatched there will be a new value 
        emitted here by our store observable.with each new value emitted by the store observable.There will be a new 
        value for isLoggedIn$ observable as it's currently implemented using the map.

    So, with any other action that gets dispatched in the store, a new value is going to get emitted by the store and 
        these value of isLoggedIn$ to be recalculated each time. but once user has logged in, this observable will only
        emit true value.so there is no point in recalculating this value when other actions are dispatched.

    So in that case we will be continuously pushing here to the view using the async pipe, the same value again and 
        again and again.Now we would like to optimize a bit the way that we report data changes to the view. we would
        like to make sure that these observables only emit new values,If the value has changed since last time.
    
    So there is no point in clearly in emitting to the view, 10 times the same isLoggedin$, true value.We only want to 
        report a new value to the view if the user authentication state has changed.We can do that by adding,
        distinctUntilChnge operator. but this need of eliminating duplicate value is so common, ngRx provides its custom
        operatir for that.this operator that does both mapping of values and elimination of duplicates is called the Select
        operator.
            
            this.isLoggedIn$ = this.store.pipe(select(state => !!state['auth'].user));
        
        So this operator is what we're going to be using in order to derive data from our store.besides these 
            optimization over removing duplicate values and preventing them from reaching the view each time we are 
            going to take this one step further.even though we are removing the duplicates with the select operator, 
            these calculation here which takes the global application state and produces derived state, here isLoggedIn$,
            this calculation is still going to be repeated each time that the store emits a new value.

        Now let's take these optimization one step further.This function that we have here inside the select operator is 
            a pure mapping function.It takes an input and maps it to an output.Now in this function if the input does not 
            change then the output will also not change.So if we keep emitting the exact same value in the input we are 
            going to continuously get the same value in the output.Now what we would like to avoid is to compute this 
            calculation again in case the input has not changed.So it's another level of optimization that we are 
            looking for here.

        We want to be able to perform these mapping operation for a given input and we want to keep the output of that 
            mapping operation in memory.Then we are only going to perform the mapping again in case that the input 
            changes, if the input remains the same across multiple valleys emitted by the store.Then we are not going to
            repeat the calculation of the derived value.Instead we are going to take a previously calculated value from 
            an in-memory cache.So this notion of a mapping function with memory is known in ngRx as the "Selector".


4)we create auth.selector.ts . here we will have our selectors. then we use these selectors inplce of our mapping function
    in app.component.ts. selectors do same thing as mapping functions bBut the difference is we are doing this in an optimal 
    way avoiding unnecessary calculations via the use of selectors and preventing the duplicate values from reaching the view 
    using the select operator.

5)Then we introduce the concepts of feature selectors. we improve the selectors created instep 4 in auth.selector.ts

6)then we implemneted the logout functionality. on click of logout button we dispatch a action and we wrote corrospodig reducers
    for same.

7)Then we implemented the AuthGuard service in auth.guard.ts file.

8)then we imported the Effects module in app.module and auth.module. now we awant to create side effects. so we created file,
    auth.effects.ts.In ths file we have 2 side effects login$ and logout$


Now see lectures, here we cover ngrxEffects.

        
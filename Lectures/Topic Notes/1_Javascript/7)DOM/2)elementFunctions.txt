1)Navigation in DOM -
    parentElement
    previousElementSibling, nextElementSibling 
    children
    firstElementChild, lastElementChild

2)searchingElement - 

    document.getElementById(id)
    elem.querySelector(css) - returns the first element for the given CSS selector.If new elements are added after this runs, then those
        are not added in collection.
    elem.querySelectorAll('') - returns all elemnts. Static Collection.
        can query pseudo classes as well, :hover returns all elemnts with hover starting from document.

    

    element.closest('cssSelector') - Ancestors of an element are: parent, the parent of parent, its parent and so on. The 
        ancestors together form the chain of parents from the element to the top.For that chain this selcts the closes 
        element.element itself is also included.when a element matches , then serach is stopped and element is returned.

    getElementsBy - return Live Collection i.e newNodes that are added in DOM after query are also added to live Collection

        elem.getElementsByTagName(tag)
        elem.getElementsByClassName(className) - If given class is present in element then result is retirned.
        document.getElementsByName(name)


3)Methods to check if element matches a given selector or not -
    a)element.matches("cssSelector") - It checks whether a CSS selectir matches the element or not.
        returns tru or false.
    b)elemA.contains(elemB) returns true if elemB is inside elemA (a descendant of elemA) or when elemA==elemB.


4)attbibutes -

    elem.hasAttribute(name) – checks for existence.
    elem.getAttribute(name) – gets the value.
    elem.setAttribute(name, value) – sets the value.
    elem.removeAttribute(name) – removes the attribute.

    elem.attributes: a collection of objects that belong to a built-in Attr class, with name and value properties.


5)element content properties -

    element.tagName/nodeName
    element.innerHTML (text is inserted as html, chnaging it rerenders whole element)
    element.outerHTML (inner html + current element, changing it replaces the element)
    element.textContent (text content of element + all descendents)
    node.nodeValue/data - Gives value of text node, useful when element has some descendents and we want to replace
        text content of element
    element.hidden
    element.id
    element.href

6)class
    element.className - Assigning some values to it replaces whole string of classes.
    element.classList - It is a special object with methods to add/remove/toggle/contains a single class.
        This is iterable.

7)inserting into DOM -

    Note - here string is inserted as string not html
    node.append(...nodes or strings) – append nodes or strings at the end of node,
    node.prepend(...nodes or strings) – insert nodes or strings at the beginning of node,
    node.before(...nodes or strings) –- insert nodes or strings before node,
    node.after(...nodes or strings) –- insert nodes or strings after node,
    node.replaceWith(...nodes or strings) –- replaces node with the given nodes or strings.

    To insert string as HTMLElement- 
        elem.insertAdjacentHTML/Text/Element

8)removal -
    node.remove()

9)cloningNode 
    elem.cloneNode(true) creates a “deep” clone of the element – with all attributes and subelements. 
    If we call elem.cloneNode(false), then the clone is made without child elements.


10)DocumentFramgment -

    How to create it -

        a)let fragmnet = new DocumentFragment();



11)styles (read/write)

    Setting Single Styles -

        a)element.style.cssProp = value
            element.style is read only object, but in react we can reset the sty;e 
        b)element.style.setProperty(propertyName, value) - used to set css variable on style prop



    Setting Multiple Styles -
        a)div.style.cssText=`color: red !important;
            background-color: yellow;
            width: 100px;
            text-align: center;
        `;

        b)div.setAttribute('style', 'color: red...')

        This property is rarely used, because such assignment removes all existing styles: it does not add, but replaces
        them. May occasionally delete something needed. But we can safely use it for new elements, when we know we won’t
        delete an existing style.

12)getComputedStyle(element,[pseudo])
    styles property return only inline styles, how do we read styles applied through classes?

Changing Inline Style of elements -

    a)Setting Single Property -
        

        b)element.style.setProperty(propertyName, value)
    
    b)Setting Multiple Properties -

        c)
            let content = document.querySelector('#content');
            css(content, { background: 'yellow', border: 'solid 1px red'});

        

    

1)Element Dimension -

    a)Element.clientLeft -The width of the left border of an element in pixels. It includes the width of the vertical scrollbar
     if the text direction of the element is right–to–left and if there is an overflow causing a left vertical scrollbar to be 
     rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.
    
    b)element.offsetWidth -This is width of element including any borders, padding, and vertical scrollbars (if rendered). 
     It does not include the width of pseudo-elements such as ::before or ::after.

    c)element.getBoundingClientRect() - Gives a rectangle that represenets bot lement distnace as well as element size.


    1.2)elementWidth -

        clientWidth - content + padding
        offsetWidth - content + padding + border + scrollbar
        getBoundingClientRect() (offset width) - To get the width & height of an element as floating-point after CSS transformation.

    1.2)margin,border width
        let box = document.querySelector('.box');
        let style = getComputedStyle(box);
        
        let marginLeft = parseInt(style.marginLeft);
        let borderTopWidth = parseInt(style.borderTopWidth) || 0;



2)text of element -
    node.textContent - text content of element and all its childern.As you can see clearly from the output, the textContent 
        property returns the concatenation of the textContent of every child node, excluding comments. It has textContent even of
        hidden chidles.
    innerText returns the human-readable text that takes CSS into account.



1)Element.closest() -The closest() method traverses the Element and its parents (heading toward the document root) 
    until it finds a node that matches the provided selector string. Will return itself or the matching ancestor. 
    If no such element exists, it returns null. it is useful in event delegation examples

    var closestElement = targetElement.closest(selectors);


2)elem.hidden - When tre it hidea the element.
    elem.hidden = true

3)element.className - returns class string.

4)elem.ClaslList- gives a read-only property that returns a live DOMTokenList collection of the class attributes 
    of the element. This can then be used to manipulate the class list.

5)elem.matches - checks if element matches a selector





HTMLTableElement

1)HTMLTableElement.rows(Read only) - Returns a live HTMLCollection containing all the rows of the element, that is all <tr> that are a child of the 
    element, or a child of one of its <thead>, <tbody> and <tfoot> children. The rows members of a <thead> appear first, 
    in tree order, and those members of a <tbody> last, also in tree order. The HTMLCollection is live and is automatically
    updated when the HTMLTableElement changes. also we can call this method on tbody to get.

2)HTMLTableElement.insertRow() -Returns an HTMLTableRowElement representing a new row of the table. It inserts it in the rows 
    collection immediately before the <tr> element at the given index position. If necessary a <tbody> is created. If the index 
    is -1, the new row is appended to the collection. If the index is smaller than -1 or greater than the number of rows in the 
    collection, a DOMException with the value IndexSizeError is raised.

3)HTMLTableElement.deleteRow() -Removes the row corresponding to the index given in parameter. If the index value is -1 the last 
    row is removed; if it smaller than -1 or greater than the amount of rows in the collection, a DOMException with the value 
    IndexSizeError is raised.




HTMLTableRowElement

1)HTMLTableRowElement.cells - Returns a live HTMLCollection containing the cells in the row. The HTMLCollection is live and 
    is automatically updated when cells are added or removed.
    
    like - rowElemeent.cells[0].innerHtml

2)HTMLTableRowElement.rowIndex -Returns a long value which gives the logical position of the row within the entire table. 
    If the row is not part of a table, returns -1

3)HTMLTableRowElement.sectionRowIndex – the position (index) of the given <tr> inside the enclosing <thead>/<tbody>/<tfoot>.

5)HTMLTableRowElement.deleteCell() - Removes the cell at the given position in the row. If the given position is greater 
    (or equal as it starts at zero) than the amount of cells in the row, or is smaller than 0, it raises a DOMException 
    with the IndexSizeError value.

6)HTMLTableRowElement.insertCell() - Inserts a new cell just before the given position in the row. If the given position 
    is not given or is -1, it appends the cell to the row. If the given position is greater (or equal as it starts at zero) 
    than the amount of cells in the row, or is smaller than -1, it raises a DOMException with the IndexSizeError value. 
    Returns a reference to a HTMLTableCellElement [en-US].




Disadvantages of context -

    a)complexity - setup and managing state with react context can be complex. for large apps you can end up with
        setup like shown in slide 5 in pdf. if you try to manage all things in single context, then single context 
        will become complex, see slide 6.

    b)performnace - for frequent state updates context is not that great. react team member says it is replacement
     of flux like architecture in all usecaases.slide 7.


Code Notes -

    1)first we saw how we can use redux in any javascript application. code/reduxWithoutReact. see notes in code folder 1.
    2)then we used redux in react application.
        1)then we we installed -
            npm install redux react-redux

            react-redux is needed so that using redux inside react project is easier.it makes easier to connect
            rect application with store and reducers and so on very simple.it will for example make it very simple
            to subscribe components to redux store.

        2)steps to use redux in react application -

            1)create a store and reducer (store/index.js)
            2)provide store using Provider form react-redux. only component which are wrapped inside this Provider
                will have access to redux.here we provide store at highest level in app by wrapping root component
                by Provider(index.js)

            3)we tell Provider which store we want to provide by using store prop on Provider component. now 
             components of our app can tap into store, can set up subscription to the data and dispatch actions.

            4)access store using useSelector hook provided by react-redux in counnter.js.w wecan also use useStore
            hook whic gives access to whole store but useSelector is moe convininet as it allows us to select a part
            of state managed by store.

            In case of class based componnet, we can use connect function, which will be wrapped around class based
            component and will connect component to store.

            useSelector takes a function as argument which determines which piece of data we want to extract form 
            store. argumnt to function is whole store. this functionnis executed by react-redux.

            now whenever that part of state chnages, our component function is rexecucuted because behind the scenes a 
            subscripton is setup.


            5)dispatching action from component.

                here we use useDispatcher hook to get access to dispatch function.

            6)using redux in class based components. see counter.js to see how we use connect for this.

            7)avoid mutting the state. see lecture 240.

    3)redux devtoolkit -there is slightly easie way of using redux as well.we saw core foundation first, to understand how
            how it works.lets see a approach which is easier to setup and maintain. problems that we will face if our application
             cocntinues to grow, i.e if we manage more and more state with redux -

                a)avoiding typos in action types. clashing action names in reducers.
                b)amount of data managed by state.we have to mention all properties again when we change one proeprty. also number
                of if checks will increase, so reducer file can get very large.
                c)we can accidentaly mutate the existing state, if we have nested object and arrays.

                there are solution to these problem in vanilla js like using constants instead of harcoding action types, spliting
                large redcucer into multiple smaller reducers, so that file is not very large, there are third paty packages that 
                allow you to automtically copy state and ensure that you do not accidentally edit it.instead of loooking into 
                diffrent solutions, we can have one solution - redux toolkit.it just makes working ith reduc esier.

    4)working with redux-toolkit -

        a)managing single State Slice(code folder 3)  -

            1)npm install @reduxjs/toolkit, 
                we can uninstall the redux library because it is already included in toolkit.

            2)createSlicer
                see src/store/index.js of folder3.  
            3)now we have state slice, how do we make our store aware of this slice, how we dispatch actions againts this slice?
                for that we need to pass reducer to our store.see index.js of folder 3.

                const store = configureStore({
                    reducer: counterSlice.reducer
                });

            4)now how do we dispatch actions, because we do not have our own if checks, we do not know what 
            identifiers for our actions should be?we have just those methods names. how do we know what to dispatch.

                For this we accsed action property on created state slice. it gave us methods which will create action objects
                with unique identifiers for us.we export these and use it in components where we need them.

                also we can pass any data to actionCreators and in redcuer it can be accsed via payload property.

                see store/index.js and store/counter.js.


        b)managing multi State Slices(code folder 4) -

            1)here we want to manage auth state through redux, so we will 2 slices for state instead of one.
            2)when we had single slice,To configureStore method in store/index.js we pass reducer directly -

                const store = configureStore({
                    reducer: counterSlice.reducer
                });

                now we have multiple reducers, so we will pass reducerMap to configureStore -

                const store = configureStore({
                    reducer: {
                        counter: counterSlice.reducer,
                        auth: authSlice.reducer
                    }
                });

                here name of keys will become important while selecting this state slice from overall state.

            3)here key names for reducer map are - counter and auth. they are used in useSelector -

                selectors with single state slice  -
                    const counter = useSelector(state => state.counter);
                    const show = useSelector(state => state.showCounter);

                selectors with mutistate slices -
                
                finally -
                      const counter = useSelector(state => state.counter.counter);
                      const show = useSelector(state => state.counter.showCounter);
                      const isAuth = useSelector(state => state.auth.isAuthenticated);



            5)then we added a new slice of state(authentication) in our store in store/index.js file.


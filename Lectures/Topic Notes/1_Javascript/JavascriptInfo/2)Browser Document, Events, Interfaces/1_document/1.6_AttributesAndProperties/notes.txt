For element nodes, most standard HTML attributes automatically become properties of DOM objects.

For instance, if the tag is <body id="page">, then the DOM object has body.id="page".But the attribute-property 
    mapping is not one-to-one! 



DOM Properties - Any Value can be added.
HTML Attributes - When the browser parses the HTML to create DOM objects for tags, it recognizes standard attributes 
    and creates DOM properties from them. But that doesn’t happen if the attribute is non-standard.


So, if an attribute is non-standard, there won’t be a DOM-property for it. Is there a way to access such attributes?

    elem.hasAttribute(name) – checks for existence.
    elem.getAttribute(name) – gets the value.
    elem.setAttribute(name, value) – sets the value.
    elem.removeAttribute(name) – removes the attribute.

    elem.attributes: a collection of objects that belong to a built-in Attr class, with name and value properties.
        This has all attbibutes as properties of object, you can also access them by index. If we iterate over them
        by for loop, only index properties are accessed.The attributes collection is iterable and has all the attributes
        of the element (standard and non-standard) as objects with name and value properties.
    

    These methods operate exactly with what’s written in HTML.

    HTML attributes have the following features:

        Their name is case-insensitive (id is same as ID).
        Their values are always strings.We can assign anything to an attribute, but it becomes a string. So here we 
            have "123" as the value.
        All attributes including ones that we set are visible in outerHTML.


Property-attribute synchronization
    When a standard attribute changes(via js), the corresponding property is auto-updated, and (with some exceptions) 
    vice versa.

    But there are exclusions, for instance input.value synchronizes only from attribute → property, but not back.That 
        “feature” may actually come in handy, because the user actions may lead to value changes, and then after them, 
        if we want to recover the “original” value from HTML, it’s in the attribute.

DOM Properties are typed
    DOM properties are not always strings. For instance, the input.checked property (for checkboxes) is a boolean:
    The style attribute is a string, but the style property is an object.
    Most properties are strings though.
    Quite rarely, even if a DOM property type is a string, it may differ from the attribute. For instance, the href 
        DOM property is always a full URL, even if the attribute contains a relative URL or just a #hash.

    

Non-standard attributes, dataset

    Sometimes non-standard attributes are used to pass custom data from HTML to JavaScript, or to “mark” HTML-elements 
        for JavaScript.
    We can target element through attribute selectors in css.why not use classes, becaise chnagig attributes is easier.

    All attributes starting with “data-” are reserved for programmers’ use. They are available in the dataset property.
    if an elem has an attribute named "data-about", it’s available as elem.dataset.about.
    Multiword attributes like data-order-state become camel-cased: dataset.orderState.


Summary -
    For most situations using DOM properties is preferable. We should refer to attributes only when DOM properties do not 
        suit us, when we need exactly attributes, for instance:

    We need a non-standard attribute. But if it starts with data-, then we should use dataset.
    We want to read the value “as written” in HTML. The value of the DOM property may be different, for instance the href 
        property is always a full URL, and we may want to get the “original” value.


Some Examples -
    When attributes and DOM proeprties are same in sync - id
    When attributes and properties are same, but not sync - value in input tag. chnages in attribute change property 
        but not vice versa
    when data types is diffrent -
        style
        checked
    when data types is same but attribute and property differs -
        href - attributes can be relative url, proeprty will be full url
    When attribute namd and property name are different
        class attribute and classname proeprties, this is because In the ancient time, there was a limitation in 
            JavaScript: a reserved word like "class" could not be an object property

questions -
    1)attbibutes vs properties
    2)way to access non standrd attributes
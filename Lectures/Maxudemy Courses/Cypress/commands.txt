visisting page -


    1)cy.visit('url')
        visist a webpage, implicit assertion.

        see this blog for advance useage of this - https://www.cypress.io/blog/2018/02/05/when-can-the-test-start/
Finding element -

    2)cy.get("css selector")

        a)getting DOM element

            find all elemnts by  css selector, has implicit assertion.
            in case of single element found , it returns that elements so you can do user interactios on this.

            variations -
                a)nested element -
                    a)cy.get('.main-header img')
                        pass css selector

                    b)use find after get - 
                        cy.get(.main-header).find('img')

                        find can only be used after using get.
                        wrog way of doing it -
                            cy.get('.main-header').get('img')

                            finds mian-header and then finds img , img is serached in root element, not inside .main-header

                    c)after get use contains -
                        cy.get('Some css Selector').contains("Texxt on nexted element")
                            this returns the nested element, so you can do some operations on this

                b)asserting on text of found element -

                    1)cy.get('h1').contains("My Cypress Course Tasks");
                    checks if found has elment has given text and returns the element

                c)checking that element shoud not exists -
                    cy.get('.backdrop').should('not.exist')

                d)finding individual elements inside set of elements -
                    cy.get('someSelector').first()
                    cy.get('someSelector').last()
                    cy.get('.task').eq(index)

                e)saving element returned by query. you can use alias to save the element returned by get

                    cy.get('[data-cy="contact-btn-submit"]').as('submitBtn')
                    cy.get('@submitBtn').click();

                    code - section 3, file contact,cy.js

                    cypress rereuns the command when you refer to alias.

                    docs - https://docs.cypress.io/guides/core-concepts/variables-and-aliases#Elements


                d)getting parent and children -
                    cy.get('selector').parent()
                    cy.get('selector').children()

        b)getting alias object, alias can also refer to non dom elments like stubs,fixtures etc.

            cy.get("@aliasName")



    3)cy.contains("some text") or called on element returned by cy.get("some css selector")

        When called on cy searchs for elements with text on etire doc.
        when called on cy.get(''), searchs for element with given text inside element returned by cy.get('') only

        Checks if any element with given text is present.This has implicit assertion.
        Search case senstove, but even if element has some extra text, it is searched.
        returns the searched element, so you can do user interations on this

interacting with BOM -

    1)cy.location() - Gives us information about location we are currently on our website
        cy.location('pathname').should('eq',3)

    2)cy.go() - go back and forward in browser
        cy.go('back')
        cy.go('forward')
Explicit assertions -


    4)cy.get('h1').should('have.length',1)

        should is another command which is used to add expectation


User interactions -

    commands which returns elements -
        cy.contains("text content")
        cy.get("css selector")
        cy.get("css selector").find("some css selector")
        cy.get("css selector").conatins("text content")
        cy.get('someSelector').first()
        cy.get('someSelector').last()
        cy.get('.task').eq(index)

    a)on retruned element, perform user interaction -

        1)element.click() - clicks on element

        2)element.type("text content") - types text in textINput or textArea
            pressing special keys -
                cy.get('[data-cy="contact-btn-submit"]').should('be.disabled')  

        3)selectElement.select("visisbleText or value field")

        4)element.focus()

        5)element.blur()


Assertions -
    There are 2 ways should(or and) and then

        a)should (and is alias of should)
            It has 2 forms -
                a).should(chainers, method, value)
                    cy.get('h1').should('have.length',1)
                    cy.get('.backdrop').should('not.exist')
                    cy.location('pathname').should('equal','/home')

                    asserting on elements -
                        a)Checking any attribute -
                            cy.get('[data-cy="contact-btn-submit"]').should('have.attr','disabled')
                        b)Checking if text box is disabled
                            cy.get('[data-cy="contact-btn-submit"]').should('be.disabled')

                b).should(callbackFn)
                    el.should(el => {
                        expect($el).to.have.class('foo')
                    })

                    cypress commands should not be used inside should

                    el.shoud(() => {
                        cy.log("Something")
                    })

            return value -
                in first form most of cases it returns value yielded from previous command. but in some cases a new value is returned.
                    see 5th testcase in contact.cy in section 3. for more details see docs.
                In callback form it always returns the value yielded from previous command
                should returns something, it returns a value that makes sense for the assertion you ran before.
        b)then - .then(el => {}) is chained after other cypress queries to get direct access to subject of those quesries.

            return value see docs.

            you can use this command if you want to stop test execution for some time

    Which one should be use -
        Any type of assertion that can be done with should can be done with expect also. Here are differences -
            a)should is reccommended way.but should is avalaible on cypress chainable object like cy.get()
            b)should assertions are retried until they pass or timeout. both with chainers and callback syntax.
            c)inside .then and callback variant of should, you cannot use should ob argument passed to callback.as should can be called on 
                chainable objects, returned by cypress objects.so we use expect(expect is globally avalaible)
                
            then should be used when - 
                
                    a)we want to modify result of previous query before query
                    b)we want to execute logic only once.(lecture 39 explains this point)



then - 
        see lecture 37.

        see cypess docs, it can be chained to cypress queries to get direct access to subjects yieldwd by those queries.

        1)getting accesss to element -
            cy.get("element").then((element) => {})
        2)getting access to windowObject
            cy.visit("url").then((windowObject) => {})
            now you can provide provide stubs for window object inside function.
            also you can return a promise from callback to then wwhich will stop the test from executing until, your promise resolves

        3)you can load your fixtures
            cy.get(@alias).then(aliasObject => {})
            inside then you can do all kind of things with fixtureObject for eaxmple like defining stubs and using fixture object in asserrtion. see location.cy.js in section 5.

screenshots -
    cy.screenshot() - takes screenshot while running "cypress run"


adding wait to test -

    cy.wait(timeInMs)


cy.now -
    will execute a cypress function immediately instead of creating a query. used while creating custom queries.
    see cypress/supports/commands.js folder of module 4 -
        
        Cypress.Commands.addQuery('getById', (id) => {
            const getFn = cy.now('get',`[data-cy="${id}"]`);
            return () => {
                return getFn();
            }
        })


cy.task -

    runs a command a task defined in cypress.config.js
    see lecture 56. code -

        section 4
            tasks is defined in - cypess.config.js
            task is executed in contact.cy.js
    
    see cyoress.config file in module


cy.stub -
    creates a stub function.
        cy.stub(win.navigator.geolocation, 'getCurrentPosition').as('getUserPosition');

    see location.cy.js of section 5.

    functions that can be called on stub -
        a)callsFake(fn) - used to give fake implementation to stub
        b)resolves() - stub returns a promise that is resolved immediately

    asesrtions on stub -

        cy.get('@saveToClipBoard').should("have.been.called");
        cy.get('@saveToClipBoard').should(
            "have.been.calledWithMatch",
            new RegExp(`${37.75}.*${48.01}.*${encodeURI('John Doe')}`)
        );

cy.fixture -
    loads the fixture into testingFile.

    cy.fixture("pathOfFile").as('aliasName')



alias -
    1)document element
        see lecture 35 notes.
        you can query element using get and give it alias. later instead of refering to whole query, you can only refer to that alias while using get.
    2)stub can be saved into alias and then we can use get to get hold of that stub be refering to its alias.
        in sction 5, see first test in location.cy.js

    3)we can lod fixture data in test and assign them alias, so that later they can be used in test.
        see location.cy.js in secton 5.


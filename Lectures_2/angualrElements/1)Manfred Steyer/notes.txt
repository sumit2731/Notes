ng add ngx-build-plus


1)Intro-

    1)Pollyfills - there are pollyfills that can make webcompoents work even with legacy browseres.
        @webcomponents/webcomponentsjs - enables even IE to run webcompoennts. bit heavy, but works for all browser.
            slimmer ones do not work with all browsers.

        but we have 2 polyfills.it is because browser understand only in ES2015.


    2)ng add ngx-build-plus:ws-pollyfill

    3)we can use variables in web compoennt to allow users to apply theme.
        :root {
            --my-color: lightsteelblue;
        }
        In webcmponent
        {
            color: var(--my-color);
        }


2)Adding web components dynamically(figure 3) -

    document object is good for server side rendering. but anguar is simulating document object for server side rendering.
    you can get hold of it by dependency injection in server side. but that does not mean to use document all the time.

3)lazy loading(figure 4)-
    refer module in lazyload in angular.json, then use loaded to load that module. as web elements are defined in that
    modules, now we can use those web compoennts.

4)External Web components -
    not officially supported because bundle size becomes very large. to combine all files into one-
    ng build --single-bundle

    Bundle size problem-

    a)Ivy down everything to code that is quite near to DOM.so we wnt need much of angilar code,
    especially when it comes to web components.it may reduce bundle size. dnt epect wonders.
    b)sharing libraries(figure 5), for that we need to tweak the cli, for that we can use ngx-build-plus.
    so produce bundles will reference th weindow object. but this is not offcial and it increases the 
    comlexity.

    b)resue angular libraries
        ng g ngx-build-plus:externals
        ng build --extra-webpack-config webpack.externals.js --prod --single-bundle --output-hashing none

        creates the webpack.external.js file

    c)Going zoneless - figures 7 and 8. there will be future when zone.js will be optional.
        how o exclude it, see slide 9


5)Content Projection and slot API-

    changes in your web compoent template- 11 ad 12.
    in 12 we are using named slots. see 13 to pass these slots. to use slots, there are 
    some requirements, see 14.

    then we used slotchnaged event, it is part of shadow dom standard for content projection. then we saw ,how
    we can communicate with projected content.

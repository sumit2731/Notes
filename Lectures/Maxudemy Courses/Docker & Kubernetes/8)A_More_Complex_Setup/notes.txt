111)Intro
    In this module we're going to practice what we ave already learnt, a bit more, and we're also going to learn about a couple of 
    new aspects. and new ways of using Docker compose.We're going to practice this on a Laravel PHP project,setting up a Laravel 
    PHP project on our local machine with Docker. why we choose laravel?
        a)We already saw nodejs setup.
        b)nodejs setup was very simple, laravel project setup is more complicated. it is very annoying.


112)The Target Setup
    see slide 1, we will have 6 container which are working with each other.

    main idea is build and run php application without any installing any tools on local machine.

113) Adding a nginx(web server) Container
    here we built the nginx container. see code1.

    see server service section in docker-compose.yaml file.

114)Adding a PHP container

    Here, I actually want to use a custom docker file though because there is no finished image which has everything I need.
        Just to clarify that, if you search for a PHP on docker hub,you will find an official image and we are going to use that.
        But I actually wanna build a custom image,building up on that image because I don't just want PHP,I also want to install
        some extra extensions which laravel needs.


    If you don't have a command or entry point at the end,then the command or entry point of the base image will be used if it has 
    any.And this base image here, this php base image will have a default command which is executed which in the end is a command 
    that invokes the PHP interpreter.So this image which we're building here will then automatically run this default command of the
    base image. And therefore it will be able to deal with incoming PHP files that should be interpreted because our base image is
    invoking this interpreter.

    The first very important thing we have to do here is we have to ensure that this php interpreter can reach our source code.so
    lets use bind mount for that. here we use delagted option see docker-compose.yaml file for this.

    The other important thing is the port on which his PHP interpreter listens for work you could say.And this port is actually 
    defined here in nginx conf.Here, I'm sending requests or PHP requests, you could say, to php:3000. here isntead of using php
    we can use a IP adress of localhost, But I'm actually utilizing the fact that all the containers created in one docker compose
    file are part of the same network and can discover each other by name(name of services).

    now in nginx server we are routing any php file access to php:3000. but php image exposes port 9000. so in nginx file we chnage 
    port to 9000.php is exposing port 9000, this we found out at - 
    https://github.com/docker-library/php/blob/master/7.4/alpine3.16/fpm/Dockerfile
        this github of docker php image, then navigated to some folders to see Dockerfile of image that we are using - php/7.4/alpine3.16/fpm/Dockerfile


115)Adding My SQL Container

    We need to provide some environment variables,which are used by this image,to setup a database,a user, a password and so on.
        And we find the detailed description again,on the Docker Hub page for this MySQL image. here we can see what envirenemnt
        variables we can set and what they do -
            https://hub.docker.com/_/mysql


    we use envirenment variables to set -

    MYSQL_DATABASE = homestead
        this is name of a default initial database which will be created when this container starts up.we set this to a homestead,
        you can find this in the Laravel documentation.


116)Adding a Composer Utility Container
    to create the laravel application we need composer tool. so we setup this utility container.which will then not only be used 
    internally by Laravel,but which most importantly can be used by us,to also set up a Laravel application in the first place.


    Now we need to ensure that we expose our source code directory to that image,so that this image works on our source code directory,
    and when we use it to install Laravel and set up a Laravel project,it does so in our source folder.


    we'll need the other two utility containers for a certain features inside of Laravel.But for the moment, we can ignore them.
        And instead we can start using the composer utility container to create a Laravel application And then we can see if we can
        launch this application with help of our free containers.


117)creating laravel App via Composer Untility container
    docker-compose run --rm composer create-project --prefer-dist laravel/laravel .

    this creates the laravel app and copy the folder into local path


118)Permission errors in linux
    here we had a look at permission errors in linux system while adding bind mount.

119)Launching only some dicker compose services
    here we started our all services by - 
        docker compose up -d server php mysql

    then we had a look at doker-compose up --build, which rebulds the image if something chaned in dockerFile or files which are copied from
        local system to docker container.

    also we saw that we can use "depends_on:" filed in docker-compose.yaml and start only one service, dependent services will be started`
    automatically. even if we are starting all services, service will depends_on flag will only start when dependent services are 
    started.

120)Adding more utility containers
    We need the artisan tool to run certain laravel commands.For example, to populate the database with some initial data.

    so we set up new services artisan and npm in docker-compose.yaml. in case of artian just add some initial data into
    db , here we use same dockerFile as server config and we add entrypoint. so there are some config that are upto this 
    point we have been adding in dockerFile but they can also be added in docker-compose.yaml.

    here we set entrypoint and working dir for docker-compose.yaml. this will override these config , if they are specified in
        dockrFile. then we run this command -

    docker-compose run --rm artisan migrate
        This will write some data to the database and it will therefore also check whether this database set up work.


121)Docker Compose with and without Dockerfiles
     
    adding docker file instructions in the docker compose file, like entry point or working dir, This is something you can do,
        but not something you have to do.it is up to you which approach you prefer.if you need to runa certain command in an image,
        or if you need to copy something you'll need a docker file anyways because you don't have copy or run available here in a 
        docker compose file.

    bind mounts are great for development so that you can mirror a certain folder on your host machine into a container.But that 
    they're not really an option if you then also plan on deploying a container.

    Because In, your local folders on your host machine are really only available there on your host machine.If you take this 
    container, server container let's say,and you put it on another server,your source code, and this folder structure, won't be 
    there.Sure, you could create it there but that's not the idea of containers.Instead, the idea behind containers is that everything
    a container needs is inside of that container.


    And the idea of bind mounts really is just that we can have an easier time during development,for example because our latest 
    source code and our latest nginx configuration is always directly exposed to a container.
    
    The implication of that is that we might want to consider creating a docker file for this server and copying over our source code
        and our nginx configuration into that image so that besides that bind bound, which works during development, we also  copy a
        snapshot of the source code and have our configuration in the image when it's being built.So that when we later deploy that 
        image,it already contains all the source code and the configuration it needs.


122)Bind Mounts and Copy: When to use What

    as discussed in last lecture, here isntead of relyting on bind mounts we copied src and nginx config into server container by
    creating a dockerFile. see code2.

    in nginx.dockerfile, we do not specify any cmd because nginx has a default command and if we do not specify our own command,
    the default command of nginx image will run and that will start this server, which is what we want.

    then we make corrosponding chnages in docker-compose.yaml. here one important chnage is, until now under build value of context
    was folder in which our dockerFile will be found.Now, that won't work here,because the context does more than just set the folder
    in which this dockerfile can be found.It also sets the folder in which the dockerfile will be built.And that matters.

    In this dockerfile, I'm referring to the nginx folder,and I'm referring to the src folder. both these folders are outside of
    of dockerfiles folder.So if I set dockerfiles as my context and the dockerfile is built in that folder,nginx and src are 
    unreachable,and hence, building this image would fail.

    so we specify the context as . which means path in which docker-compose.yaml exist and then we refer the path of dockerFile with
    dockerfile proeprty.

    then we do the same of php container i.e remove bind mount and copy files insids the container.

    now lets run the server container -

    docker-compose up --build server
        we use build command because we want to rebuild the images.

    then there was error because php images restricts the read and write access inside container and in php images we are copying the 
    files inside docker system.This wasn't a problem with the bind mount which we used before,but it is a problem if we work only
    inside of the container as we're doing it now.

    The solution is to give our container write access to certain folders to be precise to our source code folder, our working directory 
    here.The solution is to give our container write access to certain folders to be precise to our source code folder,our working 
    directory here. And we can do this by running a number of command



summary -

    here we mainly talked about laravel and nginx setup. i wa snot able to follow along because of nginx server was not showing correctpage.
    may be some config needs to be done. key things -

        1)role of context under build in docker-compose.yaml.
        2)bind mounts are perefered in dev setup only. in prrod setup yu can create your file system on server but this not idea of
            docker. everything should be in your docker container only.
        3)some configs that we mention in dockerFile like WORKDIR and ENTRY point can also be mentioned in docker-compose.yaml.
            if speciffied at both then docker-yaml will override.
        4)then we saw how to chnage permission of user to have read and write access in container.
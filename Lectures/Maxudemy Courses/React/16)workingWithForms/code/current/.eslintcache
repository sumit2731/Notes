[{"D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\index.js":"1","D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\App.js":"2","D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\components\\SimpleInput.js":"3","D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\hooks\\use-input.js":"4","D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\components\\BasicForm.js":"5"},{"size":142,"mtime":1645324539276,"results":"6","hashOfConfig":"7"},{"size":235,"mtime":1645622290925,"results":"8","hashOfConfig":"7"},{"size":3910,"mtime":1645621337753,"results":"9","hashOfConfig":"7"},{"size":785,"mtime":1645376588911,"results":"10","hashOfConfig":"7"},{"size":2724,"mtime":1645623073902,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"giinbq",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\index.js",[],["24","25"],"D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\App.js",[],"D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\components\\SimpleInput.js",["26","27"],"import {useEffect, useState} from 'react';\r\nimport useInput from '../hooks/use-input';\r\n\r\nconst SimpleInput = (props) => {\r\n  const {\r\n    value: enteredName,\r\n    isValid: enteredNameIsValid,\r\n    hasError: nameInputHasError, \r\n    valueChangeHandler:nameChangeHandler,\r\n    inputBlurHandler: nameBlurHandler,\r\n    reset: resetNameInput\r\n  } = useInput(value => (value.trim() !== ''));\r\n  \r\n  const {\r\n    value: enteredEmail,\r\n    isValid: enteredEmailIsValid,\r\n    hasError: emailInputHasError, \r\n    valueChangeHandler:emailChangeHandler,\r\n    inputBlurHandler: emailBlurHandler,\r\n    reset: resetEmailInput\r\n  } = useInput(value => value && value.indexOf('@') !== -1);\r\n  \r\n  // const [enteredName , setEnteredName] = useState('');\r\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\r\n\r\n  //const [enteredEmail, setEnteredEmail] = useState('');\r\n  //const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\r\n\r\n  \r\n  \r\n  // const enteredNameIsValid  = enteredName.trim() !== '';\r\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\r\n  \r\n  //const enteredEmailIsValid = enteredEmail && enteredEmail.indexOf('@') !== -1;\r\n  //const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\r\n  \r\n  let formIsValid = false;\r\n  /**\r\n   * @Desc here check all inputs, in this case we have only one input\r\n   */\r\n  if(enteredNameIsValid && enteredEmailIsValid) {\r\n    formIsValid = true;\r\n  } else {\r\n    formIsValid = false;\r\n  }\r\n\r\n  /**\r\n   * @Desc we validate validity fo form in useEffect as value of this state depends upon value of other state\r\n   *  here dependecies will be all inputs in form , here we have only one.\r\n   * \r\n   * @Desc This code is commneted out because we do not need to manage a separate state, we can just use a varibel for this.\r\n   */\r\n  // useEffect(() => {\r\n  //   if(enteredNameIsValid) {\r\n  //     setFormIsValid(true);\r\n  //   } else {\r\n  //     setFormIsValid(false);\r\n  //   }\r\n  // },[enteredNameIsValid]);\r\n  \r\n  \r\n  // const nameInputChnageHandler = event => {\r\n  //   setEnteredName(event.target.value);\r\n  // }\r\n\r\n  // const emailInputChangeHandler = event => {\r\n  //   setEnteredEmail(event.target.value);\r\n  // };\r\n\r\n  // const nameInputBlurHandler = (event) => {\r\n  //   setEnteredNameTouched(true);\r\n  // };\r\n\r\n  // const emailInputBlurHandler = (event) => {\r\n  //   setEnteredEmailTouched(true);\r\n  // }\r\n\r\n  const formSubmissionHandler = event => {\r\n    event.preventDefault();\r\n    //setEnteredNameTouched(true);\r\n    if(!enteredNameIsValid || !enteredEmailIsValid) {\r\n      return ;\r\n    }\r\n    \r\n    // setEnteredName('');\r\n    // setEnteredNameTouched(false);\r\n\r\n    resetNameInput();\r\n    \r\n    // setEnteredEmail('');\r\n    // setEnteredEmailTouched(false);\r\n\r\n    resetEmailInput();\r\n    console.log(enteredName);\r\n  }\r\n  \r\n  const nameInputClasses = (nameInputHasError) ? `form-control invalid` : `form-control`;\r\n  const emailInputClasses = (emailInputHasError) ? `form-control invalid` : `form-control`;\r\n  return (\r\n    <form onSubmit = {formSubmissionHandler}>\r\n      \r\n      <div className= {nameInputClasses}>\r\n        <label htmlFor='name'>Your Name</label>\r\n        <input type='text' id='name' onChange = {nameChangeHandler} onBlur = {nameBlurHandler} value ={enteredName} />\r\n        {nameInputHasError && <p className =\"error-text\" >Name must not be empty</p>}\r\n      </div>\r\n\r\n      <div className= {emailInputClasses}>\r\n        <label htmlFor='email'>Your Email</label>\r\n        <input type='email' id='email' onChange = {emailChangeHandler} onBlur = {emailBlurHandler} value = {enteredEmail} />\r\n        {emailInputHasError && <p className =\"error-text\" >Please Enter a Valid Email</p>}\r\n      </div>\r\n      \r\n      <div className=\"form-actions\">\r\n        <button disabled={!formIsValid}>Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SimpleInput;\r\n","D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\hooks\\use-input.js",[],"D:\\notes\\notes\\Lectures\\Maxudemy Courses\\React\\16)workingWithForms\\code\\current\\src\\components\\BasicForm.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":9,"nodeType":"34","messageId":"35","endLine":1,"endColumn":18},{"ruleId":"32","severity":1,"message":"36","line":1,"column":20,"nodeType":"34","messageId":"35","endLine":1,"endColumn":28},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]
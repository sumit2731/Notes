181)Kubernetes in Action - Diving into Core concepts
    ways to create infrastruture for kubernetes -
        
        a)kubermatic - built for kubernetes but not part of it
        
        b)elastic kubrnetes service (EKS) - That is a service which will allow you to bring your own Kubernetes configuration so that you
        don't have to use the AWS specific configuration as you did have to use with ECS but EKS. So this Elastic Kubernetes Service will
        then also set up all the resources neededby your Kubernetes configuration.


182)Kubenetes: Required Setup and installiyion steps

    refer slide 2

    things we need to get started -

        1)Cluster - Master and Worker Node, all softwares and services installed on them.
        
        2)kubectl or kube-control tool - we need another tool locally on our machine and that's the kubectl or kube-control tool. The 
            kubectl tool is actually a tool which you then use to send instructions to the cluster for example, to create a new deployment,
            delete a deployment or change our running deployment. kebectl sends instructions to master node, which in turn sends 
            instruction to slave node.


    Mincube -
        And for setting up this dummy cluster locally we can use a tool called minikube. Minikube is in the end a tool which you can 
        install locally for playing around with Kubernetes and for testing it and it will use a virtual machine on your laptop on your
        machine, on your local machine to create the cluster in there.So it simulates another machine on your machine by using such a
        virtual machine and the this virtual machine then holds this cluster.


        It will actually create a single node cluster which means there the worker and master node is combined into one single virtual 
        machine, this is not someting we do in deployment bit here it is fine.


183)MacOs setup
    see Kubenetes commands notes.

    here we installed minikube and kubectl. then we started our cluster by - minikube start

184)Windows setup

185)Understanding Kubernetes Object(Resources)
    slide3
    
    now we need to understand which kind of commands, which kind of language Kubernetes understands,for example,create a new pod and 
    start a new container.Kubernetes works with so called objects.Kubernetes knows a couple of objects, for example, pods, deployments,
    services, volumes,and way more than that.

    Now, the idea behind these objects,is simply that you can create such an object by executing a certain command.And then Kubernetes 
    will take that object created by you,which of course is just a thing in code in the end,and it will then do something based on the
    instructions encoded in that object, you could say.And these objects can actually be created in two different ways, 
    
        1)imperatively
        2)declaratively.

    Some key object kubernenets knows(slide 4) -

    a)Pods - If you wanna tell Kubernetes,that it should create a pod,run a container and do that on some worker node in the cluster.
        You would tell Kubernetes to do that,by creating a pod object in code or with help of a command,and sending that object to 
        Kubernetes. pods are part of cluster therefore can commnunicate with other pods outside world.by default pod has cluster-internal
        IP by default. we can chnage this and communicate with cluster even from outside the cluster.But by default, a pod has a cluster
        internal IP address,which can be used to send requests to that pod and there for to the containers running in the pod. containers
        inside same pod can communicate with each other with local host.

    important things about pods -
        1)pods are ephemeral,which basically means they don't persist.If a pod is replaced or removed by Kubernetes,all the resources in 
            the pod,for example, data stored and created by a container is lost.

        2)when working with Kubernetes,we can create pods on our own and start them on some worker node in our cluster,but that's typically
            not what we will do.Instead, we want Kubernetes to manage these pods for us,We want Kubernetes to automatically create and 
            remove and replace them.
            
        And that's why we typically don't just create pod objects and send them to the cluster,but why we create controller objects,
            specifically the deployment object,which then actually will create pods for us.So therefore, let's next have a look at this
            deployment object, and let's understand how that works.



186)The "Deployment" object
    we genrally do not create pod objects but we create deployment objects. see slide 5.

187)A First Deployment
    here we wanted to deploy code1 in kubernetes cluster.
    1)create docker image -
        docker build -t kub-first-app

    2)start kubernetes cluster , if it is not already running -
        minikube status (checks status)
        minikube start (starts cluster)

    3)we can now send our image or send the instruction to create a deployment to that cluster.we use kubectl command to create deployment
        object. with create command object is automaatically created and sent to cluster. so we use kubectl create command to create 
        deployment object, this is imperative way of creating the objects.

        kubectl create typeofObject nameOfObject --image=nameOfImageUsedByContainerOfPodCreatedByThisDeployment
        kubectl create deployment first-app




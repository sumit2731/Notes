1)implicit try catch block - The code of a promise executor and promise handlers has an "invisible try..catch" around it. 
    If an exception happens, it gets caught and treated as a rejection.

    a)If error ocuurs in executor then it is treated as promise has been rejected. only synchronous errors are handled
    b)if error ocuurs in any then or catch block, it is handled by next error handling block.

    Note above is true only for synchronous error. see MDN docs for Promise.catch.

4)rethrowing of error - If we throw inside .catch, then the control goes to the next closest error handler. And if we handle
 the error and finish normally, then it continues to the next closest successful .then handler. 

5)when there is no handler for rejected promise(or handler is there but noting is returned from handler) then script dies and error 
is thrown. In the browser we can catch such errors using the event unhandledrejection. we should report these events to server , so 
that our app just never dies.

6)read summary in javascript.info

6)See question in last.it proves that async error in executor functions do not mean promise rejection.


Notes on Promise.prototype.catch() on MDN -
    1)catch() internally calls then() on the object upon which it was called, passing undefined and onRejected as arguments. 
        The value of that call is directly returned. This is observable if you wrap the methods.

    2)Throwing errors -
        a)Errors thrown after resolve(in synchronous code) is called will be silenced:

            const p3 = new Promise((resolve, reject) => {
                resolve();
                throw new Error("Silenced Exception!");
            });

            p3.catch((e) => {
                console.error(e); // This is never called
            });


        b)Error inside asynchronous functions will act like uncaught errors -

            const p2 = new Promise((resolve, reject) => {
                setTimeout(() => {
                throw new Error("Uncaught Exception!");
                }, 1000);
            });

            p2.catch((e) => {
            console.error(e); // This is never called
            });

        c)catch() is not called if the promise is fulfilled

            // Create a promise which would not call onReject
            const p1 = Promise.resolve("calling next");

            const p2 = p1.catch((reason) => {
                // This is never called
                console.error("catch p1!");
                console.error(reason);
            });

            p2.then(
                
                (value) => {
                    console.log("next promise's onFulfilled");
                    console.log(value); // calling next
                },
                (reason) => {
                    console.log("next promise's onRejected");
                    console.log(reason);
                },
            );


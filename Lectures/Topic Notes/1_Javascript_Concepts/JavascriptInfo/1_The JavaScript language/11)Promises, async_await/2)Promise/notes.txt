1)Promise defination.Internal properties of promise(cannot be accessd from outside) - 
    state - 
        initially it is pending, 
        changes to 'fulfilled' when resolve is called
        'rejected' when reject is called
    result - 
        initially unefined, 
        value when resolve(value) is called
        error when rejected(error) is called
    The properties state and result of the Promise object are internal. We can’t directly access them.
2)A promise that is either resolved or rejected is called “settled”, as opposed to an initially “pending” promise.

3)Promise is resolved or rejected only once, further calls to resolved and rejected are ignored.

    let promise = new Promise(function(resolve, reject) {
        resolve("done");
        reject(new Error("…")); // ignored
        setTimeout(() => resolve("…")); // ignored
    });

4)resolve and rejected expect 1(or none) arguments, any additional arguments are ignored.

5)reject can be called with any type of argument (just like resolve). But it is recommended to be called either with Error object
    that inherts from Error Object.

6)consumer methods - A Promise object serves as a link between the executor (the “producing code” or “singer”) and the consuming
    functions (the “fans”), which will receive the result or error. Consuming functions can be registered (subscribed) using the
    methods .then and .catch.
    
    a)then - 2 methods first for resolve and second for rejected.
        if only interested in resolved state - p1.then(f1)
        if only resulted in catch state - p1.then(null, f1)
    b)catch - takes function which will only be called when promise is rejected.If we’re interested only in errors -
        
        // .catch(f) is the same as promise.then(null, f)
        promise.catch(alert); // shows "Error: Whoops!" after 1 second

        The call .catch(f) is a complete analog of .then(null, f), it’s just a shorthand.

        MY notes - see question of promise chaining n javascript.info to know diffrence. also see block 4 code
            of promise chaining.

    c)finally - executed in both cases when promise is resolved or rejected.The idea of finally is to set up a handler for 
        performing cleanup/finalizing after the previous operations are complete.
        
        The call .finally(f) is similar to .then(f, f) in the sense that f runs always, when the promise is settled: be it 
        resolve or reject.Please note that finally(f) isn’t exactly an alias of then(f,f) though.There are important differences:
        
        a)A finally handler has no arguments. In finally we don’t know whether the promise is successful or
         not. That’s all right, as our task is usually to perform “general” finalizing procedures.

        b)A finally handler passes through results and errors to the next handler.That’s very convenient, because finally is not 
            meant to process a promise result. As said, it’s a place to do generic cleanup, no matter what the outcome was.

            new Promise((resolve, reject) => {
                setTimeout(() => resolve("result"), 2000)
            })
            .finally(() => alert("Promise ready"))
            .then(result => alert(result)); // <-- result is argument passed to resolve function
            .catch(err => alert(err));  // <-- .catch handles the error object


        c)A finally handler also shouldn’t return anything. If it does, the returned value is silently ignored.

            The only exception to this rule is when a finally handler throws an error. Then this error goes to the next handler,
            instead of any previous outcome.

7)We can attach handlers to settled promises, they will be called immediately.

8)advantages of promises over callback. at the end of blog, in table.

9)Promise question in last - Draw and animate the circle
Types of Subject-

1)Subject-

2)behaviour Subject - The BehaviorSubject has the characteristic that it stores the “current” value. This means that you can 
    always directly get the last emitted value from the BehaviorSubject.There are two ways to get this last emited value. 
    You can either get the value by accessing the .value property on the BehaviorSubject or you can subscribe to it.
    

    const subject = new Rx.BehaviorSubject();

    Last but not least, you can create BehaviorSubjects with a start value.if no value is emittee till subscription is made 
    to subject, this value will be emitted by subject.
    
    const subject = new Rx.BehaviorSubject(Math.random());

    If Behaviour Subsjects errors out then, new subscribers wnt get any value, they will just get error notification.
    If behavour Subject completes, then new subscriptions only get any value, they will just get completed notification.

3)Replay Subject - The ReplaySubject is comparable to the BehaviorSubject in the way that it can send “old” values to new 
    subscribers. It however has the extra characteristic that it can record a part of the observable execution and therefore 
    store multiple old values and “replay” them to new subscribers.When creating the ReplaySubject you can specify how much 
    values you want to store and for how long you want to store them. In other words you can specify: “I want to store the last 
    5 values, that have been executed in the last second prior to a new subscription”.

    const subject = new Rx.ReplaySubject(2);
    const subject = new Rx.ReplaySubject(2, 100);

    Even If subject completes, later subscribers will get replayed values and complete notification
    Even If subject Errors out, later subscribers will get replayed values and complete notification

4)Async Subject - The AsyncSubject is aSubject variant where only the last value of the Observable execution is sent to its 
    subscribers, and only when the execution completes. it means subscribers will get value when subject completes.

    late as well as early subscribers will get last value and completed notification.

    
    const subject = new Rx.AsyncSubject();

    //this will get value
    subject.subscribe((data) => {
        console.log('Subscriber A:', data);
    });

    subject.next(Math.random())
    subject.next(Math.random())
    subject.next(Math.random())

    //this will get value
    subject.subscribe((data) => {
        console.log('Subscriber B:', data);
    });

    //this is last value before subject completes, so this will be emitted
    subject.next(Math.random());
    subject.complete();
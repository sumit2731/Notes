Array Detsructing -
    Destructuring assignment is a special syntax that allows us to “unpack” arrays or objects into a bunch of 
        variables, as sometimes that’s more convenient.


        let arr = ["John", "Smith"]
        // destructuring assignment
        // sets firstName = arr[0]
        // and surname = arr[1]
        let [firstName, surname] = arr;

    peculiar details though - 

        a)“Destructuring” does not mean “destructive”.
            It’s called “destructuring assignment,” because it “destructurizes” by copying items into variables. But 
            the array itself is not modified.It’s just a shorter way to write:

            // let [firstName, surname] = arr;
            let firstName = arr[0];
            let surname = arr[1];

        b)Ignore elements using commas
            Unwanted elements of the array can also be thrown away via an extra comma:

            // second element is not needed
            let [firstName, , title] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];
            alert( title ); // Consul

            In the code above, the second element of the array is skipped, the third one is assigned to title, and 
                the rest of the array items is also skipped (as there are no variables for them).

        c)Works with any iterable on the right-side

            …Actually, we can use it with any iterable, not only arrays:

                let [a, b, c] = "abc"; // ["a", "b", "c"]
                let [one, two, three] = new Set([1, 2, 3]);

            That works, because internally a destructuring assignment works by iterating over the right value. It’s
            kind of syntax sugar for calling for..of over the value to the right of = and assigning the values.

        d)Assign to anything at the left-side

            We can use any “assignables” at the left side.

            For instance, an object property:

            let user = {};
            [user.name, user.surname] = "John Smith".split(' ');

            alert(user.name); // John
            alert(user.surname); // Smith

        e)Looping with .entries()

            We can use it with destructuring to loop over keys-and-values of an object:


            let user = {
                name: "John",
                age: 30
            };

            // loop over keys-and-values
            for (let [key, value] of Object.entries(user)) {
                console.log(`${key}:${value}`); // name:John, then age:30
            }

        f)swap variables to left -

            let guest = "Jane";
            let admin = "Pete";

            // Let's swap the values: make guest=Pete, admin=Jane
            [guest, admin] = [admin, guest];

    Rest Opertor - 

        If we’d like also to gather all that follows – we can add one more parameter that gets “the rest” using three dots -


            let [name1, name2, ...rest] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];
            // rest is array of items, starting from the 3rd one
            alert(rest[0]); // Consul
            alert(rest[1]); // of the Roman Republic
            alert(rest.length); // 2

         parameter with rest operator should be the last in parameter list.

    Default Values -

        // default values
        let [name = "Guest", surname = "Anonymous"] = ["Julius"];

        console.log(name);    // Julius (from array)
        console.log(surname); // Anonymous (default used)


        Default values can be more complex expressions or even function calls. They are evaluated only if the value is not 
            provided.
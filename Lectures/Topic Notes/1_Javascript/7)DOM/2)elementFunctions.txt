1)Navigation in DOM -
    parentElement
    previousElementSibling, nextElementSibling 
    children
    firstElementChild, lastElementChild

2)searchingElement - 

    document.getElementById(id)
    elem.querySelector(css) - returns the first element for the given CSS selector.If new elements are added after this runs, then those
        are not added in collection.
    elem.querySelectorAll('') - returns all elemnts. Static Collection.
        can query pseudo classes as well, :hover returns all elemnts with hover starting from document.

    

    element.closest('cssSelector') - Ancestors of an element are: parent, the parent of parent, its parent and so on. The 
        ancestors together form the chain of parents from the element to the top.For that chain this selcts the closes 
        element.element itself is also included.when a element matches , then serach is stopped and element is returned.

    getElementsBy - return Live Collection i.e newNodes that are added in DOM after query are also added to live Collection

        elem.getElementsByTagName(tag)
        elem.getElementsByClassName(className) - If given class is present in element then result is retirned.
        document.getElementsByName(name)


3)Methods to check if element matches a given selector or not -
    a)element.matches("cssSelector") - It checks whether a CSS selectir matches the element or not.
        returns tru or false.
    b)elemA.contains(elemB) returns true if elemB is inside elemA (a descendant of elemA) or when elemA==elemB.


4)attbibutes -

    elem.hasAttribute(name) – checks for existence.
    elem.getAttribute(name) – gets the value.
    elem.setAttribute(name, value) – sets the value.
    elem.removeAttribute(name) – removes the attribute.

    elem.attributes: a collection of objects that belong to a built-in Attr class, with name and value properties.


5)element content properties -

    element.tagName/nodeName
    element.innerHTML (text is inserted as html, chnaging it rerenders whole element)
    element.outerHTML (inner html + current element, changing it replaces the element)
    element.textContent (text content of element + all descendents)
    node.nodeValue/data - Gives value of text node, useful when element has some descendents and we want to replace
        text content of element
    element.hidden
    element.id
    element.href

7)inserting into DOM -

    Note - here string is inserted as string not html
    node.append(...nodes or strings) – append nodes or strings at the end of node,
    node.prepend(...nodes or strings) – insert nodes or strings at the beginning of node,
    node.before(...nodes or strings) –- insert nodes or strings before node,
    node.after(...nodes or strings) –- insert nodes or strings after node,
    node.replaceWith(...nodes or strings) –- replaces node with the given nodes or strings.

    To insert string as HTMLElement- 
        elem.insertAdjacentHTML/Text/Element

8)removal -
    node.remove()

9)cloningNode 
    elem.cloneNode(true) creates a “deep” clone of the element – with all attributes and subelements. 
    If we call elem.cloneNode(false), then the clone is made without child elements.


10)DocumentFramgment -

    How to create it -

        a)let fragmnet = new DocumentFragment();

11)chnaging classes
    element.className - Assigning some values to it replaces whole string of classes.
    element.classList - It is a special object with methods to add/remove/toggle/contains a single class.
        This is iterable.

11)styles (read/write)

    Setting Single Styles -

        a)element.style.cssProp = value
            element.style is read only object,so in js we cannot change the whole object but in react we can reset the 
            style prop. 
        b)element.style.setProperty(propertyName, value) - used to set css variable on style prop

    resetting styles -

        a)element.style.cssProp = ''
        b)elem.style.removeProperty('cssProp')



    Setting Multiple Styles -
        a)div.style.cssText=`color: red !important;
            background-color: yellow;
            width: 100px;
            text-align: center;
        `;

        b)div.setAttribute('style', 'color: red...')

        This property is rarely used, because such assignment removes all existing styles: it does not add, but replaces
        them. May occasionally delete something needed. But we can safely use it for new elements, when we know we won’t
        delete an existing style.

12)getComputedStyle(element,[pseudo])
    styles property return only inline styles, how do we read styles applied through classes? this returns all final styles
    applied.

    also this returns computer styles(32 px) not resolved styles(2 rem)

13)Element Dimensions(All readonly) -
    a)offsetParent,offsetLeft, offsetTop, offsetWidth, offsetHeight
    b)clientTop,clientLeft, clientWidth, clientHeight
    c)scrollWidth,scrollHeight, scrollTop(read/write), scrollLeft(read/write)

        
14)window Dimension -
    window.innerHeight/innerWidth - content + scrollBar
    document.documentElement.clientWidth/clientHeight(does not include scroll bar)

15)scrolling -

    Getting scroll position of window -
        1)window.pageXOffset => window.scrollX
          window.pageYOffset => window.scrollY
    Regular elements can be scrolled by changing scrollTop/scrollLeft.

    window scrolling -

        scroll element to view -
            element.scrollIntoView(top)

        scrolling of window -
            document.documentElement.scrollTop (all browser except safari)
            document.body.scrollTop (For safari)

        universal methods -
            window.scrollBy(x,y) - Takes scroll by this psition relative to current position
            window.scrollTo(x,y) - takes to this x,y position
11)Element Position -
    a)with respect to window -
        1)element.getBoundingClientRect, It has below properties -
            a)x, y (Not supported in IE)
            b)left,right
            c)top,bottom
            d)width, height

    b)With respect to document -
        There’s no standard method to get the document coordinates of an element. But it’s easy to write it.

        The two coordinate systems are connected by the formula:

            pageY = clientY + window.scrollY(height of the scrolled-out vertical part of the document).         
            pageX = clientX + window.scrollX (width of the scrolled-out horizontal part of the document)

12)Events -
    adding events -
        a)element.addEventListener(event,handler,[options]) (preferred way)
        b)DOM Property -
            element.eventName = function

Useful DOM API's -
    a)document.flementFormPoint(x,y) - document.elementFromPoint(x, y) returns the most nested element at window 
        coordinates (x, y).
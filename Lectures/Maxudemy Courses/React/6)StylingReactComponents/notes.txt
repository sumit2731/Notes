74) Section goals -

    1)dynamic styles
    2)scped styles-
        Sytled components
        CSS Modules

75)getting dynamic inline styles

    we defined a state a varibale and then we used that variable to update the style that we set on html elements.if because of
    some action we want to update the sign, we chnage the state.

    <label style = {{color: (isValid ? 'black' : 'red')}}>Course Goal</label>
    
    <input type="text" onChange={goalInputChangeHandler} 
        style = {{
        borderColor: (isValid ? '#ccc' : 'red'),
        backgroundColor: (!isValid ? 'salmon' : 'transparent')
        }} 
    />

    but we do not want to write lot of css via inline styles. because they are not good readiblity wise and second they have highest
    priority and will override everything.second it will have some duplication as moving to default state we have to copy the
    value that we are using in default state, i.e value used in css. we we have some base styles in csss, then w eoverride them
    via inline styles based on some conditions.

76)Setting css classes dynmically

    <div className= {`form-control ${!isValid ? 'invalid' : ''}`}>
        <label >Course Goal</label>
        <input type="text" onChange={goalInputChangeHandler} />
    </div>

    here we add a class at parent instead of having inline style on childs.

    alternate syntax to dynamically add multiple classNames -
        <div className= {`form-control ${!isValid ? 'invalid' : ''} ${!isValid && 'invalid'}`}>

    we can attach any number of classes like this to parent.

77)Intodcuing styled components

    there are various approachs to have scoped styles in react, here we will discuss 2 most popular ones -
        1)styled components
        2)CSS modules

    to use styled components we downloaded a package
        npm install --save styled-components

    styles components helps you to build components which have certain styles attached to them,where styles really only
    affect components to which they were attached not other components.

    first we use this to style a button. we have a component  UI/button.js, that is just created to have some default styling for 
    button. lets use styled-components to do same.
    
    here we use this styled-components to create button component and have styles scoped to this componnent only.

    there we used syled.button method to create custom button component. styled has methods corrosponding to each html element.
    here we wanted button component so we used button method. this function is called using tagged template literals.
    
    to this method we pass styles that will be applied to returned component.at run time a random class will be gnerated and all
     styles passed to that function will be applied to that class only and that class will be attached with underlying html button
     element of our component. so inside this function while defining styles we do not use selectors. but sometimes we need to refer
     parent element to have desendent selctors or have pseudo selectors for that purposes use &.
    
    &:hover {}
    & childElement {}

    buton which is returned by styled.button by default applies all the props you might be passing to your own button component
    which we are exporting from this file. so we can still add onClick prop, we can still set type, all will be forwarded by styles
    package to core underlying html button element.

    if we isnpecting this in chrome dev tools , we see that  button is created with 2 straange classes, these classes are dynamically
    generated by "styled component" package.

78)Styled components & Dynamic props

     In last lecture in a component file we created one styled component and returned it. if you use styled component only in one 
     component, then you can create that component in component file itself. so we can multiple component in a single file, if all 
     those components are used in single file only. but genrally it is good rule to use one component per file.

     In CourseInput.js we create div using styled component and use within our component(that we return). to style childern inside
      div we used 
        &.invalid input {}

    then in the end we dynamically attached a class  to styled component, styled component forwards all props to undelying div 
    element. so it forwards className prop to underlying div, hence that class gets dynamically attched to div, nd labels and inputs
    inside it are styled accordingly. for code refer styledComponent1.js

    also we have a diffrent appraoch. we can pass props to styled component and we can use those props inside ``, to set styles 
    dynamically. isntead of using stiac values of css property we can use dynamic expressions isnide ``.
     styledComponent2.js, follows this approach.

79)Styled Components & Media Queries

    then we added a media query in syled component, see button.js

80)Using CSS Modules

    here we use css modules in button.js. steps-

    name Button.js to Button.modules.css

    import css like this -
        import styles from './Button.module.css';

        earlier while using normal css we imported css like this -

            import './Button.module.css'

    all classes defined inside Button.modules.css are avalble as properties on style object like this -

        <button type={props.type} className= {styles.button} onClick={props.onClick}>

    In dev tools we can see this class is attached to it -

        Button_button__gpTHa

    which is in format -

        ComponentName_className_uniqueIdentifier


81)Dynamic styles with CSS Modules

    here we just attach classes dynamically, but class names used are converted classnames from css modules.
    then also added a media query in the end.

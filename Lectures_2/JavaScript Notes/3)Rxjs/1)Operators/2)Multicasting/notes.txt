Article- https://itnext.io/the-magic-of-rxjs-sharing-operators-and-their-differences-3a03d699d255

Multicasting Operators- multicasting operators make cold observables behave as hot.

Need -
    
    ngOnInit() {
        this.user$ = this.http.get(`api/user/1`)
        this.name$ = this.user$.pipe(
            map(user => user.name)
        );
        this.age$ = this.user$.pipe(
            map(user => user.age)
        );
    }

    <div>{{name$ | async}}</div>
    <div>{{age$ | async}}</div>

Multicasting -
    Hot observables are multicast as all subscribers get data from the same producer. Cold observables are unicast as 
    each subscriber gets data from different producer.

Operators-
    
    1)multicast() - takes subject or subject factory and returns ConnectableObservable . 
        The subject passed as argument acts like a middleman in a multicast observable. It just relays data from source 
        observable to all subscribers.ConnectableObservable is a regular observable, but it won’t subscribe to the source 
        until connect() method is called.

        this.user$ = this.http.get(`api/user/1`).pipe(
            multicast(new Subject())
        );
        
        this.name$ = this.user$.pipe(
            map(user => user.name)
        );
        
        this.age$ = this.user$.pipe(
            map(user => user.age)
        );

        this.user$.connect();

        refCount() operator that will automatically connect() with first subscription, keep count of subscriptions and 
         keep Subject connected to the Source as long as there is at least one subscriber. When Subscriptions count drops 
         to zero, Subject will be disconnected from the Source.

        this.user$ = this.http.get(`api/user/1`).pipe(
            multicast(new Subject()),
            refCount()
        );

        all our subscribers will subscribe to subject X (passed to multicast) and subject X itself will subscribe to our 
        http call. When observable returned by http call emits, our subject X will take that value and share among all 
        subscribers. see figure 1.

    2)publish()-  if we look at source code -publish() ===  multicast(new Subject())
            publish() optionally accepts selector function and in fact it changes the behavior of the operator and 
            deserves its own article. We will skip that part and consider using publish() without selector function.

            so we either need to manually carry about connecting and disconnecting, or use refCount() to automate that 
            process.Because we mostly use publish() with refCount() there is very similar operator which uses refCount() 
            internally and behaves similarly . That is share().
   
    3)share - Because we mostly use publish() with refCount() there is very similar operator which uses refCount() 
        internally and behaves similarly . That is share().share() just like publish() uses multicast() but the 
        difference is in the argument passed to multicast().

        share() === multicast(() => new Subject()).refCount())

        publish() === multicast(new Subject())
        
        That’s the only reason why we can’t say that share() is the same as publish() + refCount() . This difference 
            cause different behavior for late subscribers when Source has completed.
        
        Difference -

        publish() + refCount() — as long as there is at least one subscriber to Subject, it will emit values. Once there 
            are no subscribers Subject will be disconnected from Source. For all new subscribers if Source has completed 
            they will receive “completed” emits, but if Source hasn’t completed Subject will re-subscribe to Source.

        share() -  As long as there is at least one subscriber to Subject, it will emit values. Once there are no subscribers 
            Subject will be disconnected from Source. For any new subscriber no matter if Source has been completed or not it
            will subscribe to Source again using new Subject.

        For code of above difference , see blog.

        The reason why they behave so is in the multicast(). Because publish() uses Subject instance, when Source completes, 
        Subject will complete too, so any new subscriber to that Subject will receive only ‘complete’ notification.share() uses 
        factory function which returns Subject instance. When Source completes, Subject will complete too, but for new 
        subscribers new Subject instance will be created and subscribed to Source.

    4)publishReplay -publishReplay() === multicast(new ReplaySubject()) 

        publishReplay() returns ConnectableObservable so we either need to use connect() or use refCount() for managing 
            connections.

        this.user$ = this.http.get(`api/user/1`).pipe(
            publishReplay(1),
            refCount()
        );

        now late subscriber will get cached value.

        Because we mostly use publishReplay() with refCount(), there is very similar operator which uses reference counting 
            mechanism internally and behaves similarly. That is shareReplay().

    5)shareReplay(chnaged after 6.4) - 

        case 1 - shareReplay({refCount: true, bufferSize: n})
            now refrence counting mechanism will be similar to refCount.
            It can behave similar way as publishReplay() + refCount()  

            this.user$ = this.http.get(`api/user/1`).pipe(
                shareReplay({refCount: true, bufferSize: 1})
            );

            shareReplay is not implemented with multicast

        case 2 - shareReplay({refCount: false, bufferSize: n}) or shareReplay({bufferSize: n}) or shareReplay(n)

    6)publishBehavior() - publishBehavior() === multicast(new BehaviorSubject()).publishBehavior() returns ConnectableObservable 
        so we need to use refCount() or connect manually.publishBehavior() accepts default value as parameter and will emit that 
        value to all subscribers if Source hasn’t emitted.
      
    7))publishLast - publishLast() === multicast(new AsyncSubject()).As with all multicast operators publishLast() is best used with 
        refCount() .AsyncSubject used in this operator is very interesting. It won’t emit values if subscribed until completes after 
        which emits the last value.
 


 Comparison-
    when new subscription is made-
        case 1-  active subscriptions and observable not completed
        case 2-  no active subscriptions and observable not completed
        case 3 - active subscriptions and observable completed
        case 4 - no active subscription and observable completed.

    1)publish + refcount(without selector)-
        case 1 - New subscriber will start getting value.
        case 2-  subject will subscribe to observable again
        case 3 - new subscriber will just get completed notification
        case 4 - new subscriber will just get completed notification.

    2)share(If you are not getting new values, then subscribe again) -
        case 1 -new subscriber will also start getting value.
        case 2 -It will subscibe to observable again.
        case 3- It will subscribe to observable again
        case 4 -It will subscribe to observable again.

    3)publishReplay + refcount
        case 1- previous values and new values.
        case 2- It will get previous values and subscribe to observable again
        case 3-  previous value and completed notification.
        case 4 - previous values and completed notification.

    4)shareReplay
        a)shareReplay(refCount:true)(instead of subscribe get previous values,get previous value only if observable is completed, resubscribe only 
            if no active subscriptions) -

            case 1 - previous values and new values.
            case 2 - it will subscribe again, but wnt get previous value.(Because ReplaySubject will be destroyed and any new 
                subscriber like sub3 will create new ReplaySubject instance and subscribe to Source again)
            case 3 - Gets previous values and then completed notification.dnt subscribe again.
            case 4 - Gets previous values and then completed notification.dnt subscribe again.

        b)shareReplay({refCount: false, bufferSize: 3}) or shareReplay(2) -
            subject still remains subscribed even if no subscription is there
            case 1 - previous values and new values.
            case 2 - previous values(observable continue to emit values even if no subscrption is there) and new values
            case 3 - previous values and completed notification.
            case 4 - previous values and completed notification.

            The only case where ReplaySubject will unsubscribe from Source is when Source completes or errors. Any new subscriber in 
            that case will get replayed values and complete. new subscriber will get last N values (if not on error)

    6)publishBehavior -
        case 1- Gets last value and future values
        case 2- Gets last value and subscribes again
        case 3- Just competed notification(this is how behaviour subject works)
        case 4- Just completed notification.(this is how behaviour subject works)


    7)publishLast-
        case 1- No value
        case 2 - No value
        case 3 - last value and completed notification.
        case 4 - last value and completed notification
[00:00:00]
>> Kyle Simpson: So taking a step back, where we started was you could load up a website but it's a very fragile and brittle thing. It's failing all over the place, it's failing when there's a bad connection to the server, it's failing when you have spotty Wi-Fi, it's taking too long.

[00:00:16]
We haven't even covered but we could have been doing time outs on these requests. We could have been saying when we make in our safe fetch we could've had a time out that says, we are going to try this server but if it takes more than about three or four seconds let's substitute in the cached version of it so that the user isn't having to wait extra long for these requests to come back.

[00:00:37]
The default behavior of the web is just not that user friendly. From this perspective of [INAUDIBLE] and from the perspective of the robustness of connections. And what excites me so much about service worker is this, yes they're great for progressive web applications, but they really are great for making all websites behave better, have a more intuitive and empathetic experience for the user.

[00:01:04]
So I hope I've sparked your curiosity, hope I've given you some things to think about and start turning to and making, service workers for yourself. Definitely remember the readme, we've got a bunch of resources that I used in the building of these exercises. And you can check those out, read through those, especially this one, this is a great site that explains all of those ins and outs of the strategies and ways to approach it.

[00:01:28]
And, honestly the way that I did things is not the only way to do it, I just wanted to show you that we have the control in a service worker to do whatever is best for the user, whatever makes most sense for our site, our product, our application.

[00:01:43]
I hope that you'll go and install a service worker on your own websites as soon as possible. Thanks for being here.
>> [APPLAUSE]


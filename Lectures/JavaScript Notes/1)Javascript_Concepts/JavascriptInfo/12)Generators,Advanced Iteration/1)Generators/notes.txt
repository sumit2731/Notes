1)syntax to define generator function.
2)geneator function returns a generator object which is iterator object-
    how to use generator function  in loop to get values, 
    use generator function to create array.

    but that iterable will return values only once.

3)We can use a generator function for iteration by providing it as Symbol.iterator. generator function returns a iterable,
    which is excactly what a Symbol.iterator should return. Generators were added to JavaScript language with iterators in mind, 
    to implement them easily.

4)Generator composition -

    Generator composition is a special feature of generators that allows to transparently “embed” generators in each other.

5)“yield” is a two-way street -
    it not only returns the result to the outside, but also can pass the value inside the generator.

6)Passing errors into generator-
    generator.throw

7)generator.return - unnaturally ends the generator execution and returns the passed value as last value from 
    generator


Generator uses -

1)Generators were added to JavaScript language with iterators in mind, to implement them 
    easily.The variant with a generator is much more concise than the original iterable code of range, and keeps the same 
    functionality.

2)In modern JavaScript, generators are rarely used. But sometimes they come in handy, because the ability of a function to 
    exchange data with the calling code during the execution is quite unique.

3)async generators, which are used to read streams of asynchronously generated data (e.g paginated fetches over a network) 
    in for await ... of loops.In web-programming we often work with streamed data, so that’s another very important use case.




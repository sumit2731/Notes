these 3 are called elementary or quadratic sorting algorithm. because time comlexity is O(n*n). remeber we 
only care about worst case.

see this link for comparing all algorithm-

https://www.toptal.com/developers/sorting-algorithms.

now refer to slide , here we can see that selection sort has complexity of O(n*n) in best case , but other have O(n) in best
case. so it means selection sort is slower than both of them because, we always need to complete all iterations while other 
2 can skip some iterations(in normal case also).

Space complexitty is same for all of them because we are not creating  new arrays or varibales(or 2 variables) for each element.
 but later we will see in some faster algorithms, they create bunch of smaller arrays. so thier space complexity is not O(1).

 THing about insertion sort is , it is great if we want data to be continuously sorted. so new elements are being added to it.
 so it's not a one time thing where you have all the data ready. if we add new element, insertion sort just needs one iterations
 to know where it should place it. in selection sort we need to resort the entire array. it is not able to figure out where it
 goes right away.

Recap-


 1)sorting is very important and funadmental thing in programming, it is very common in interviews.
 2)we will see what you need to know abput sorting from interview perspective. you dnt need to lern all implementations.
 3)These 3 funadmental sorting algo are roughly equivalent in grand scheme of things.especially if we compare them to algo's that
    we are going to learn next.there are minor difference between these 3 but these differences become insignificant when we see
    how fast our next algo's are. but these 3 are worth knowing.
4)In next sections we will see some complex but better algo.next on'es are less intuitive. but these fundamental one's can 
    perform better on smaller set of data. we will see why. so these 3 are not complete waste of time.
Some Events -

    a)mouse -
        a)click
        b)contextMenu
        c)mousemove
        d)moveover/mouseout
        e)mousedown, mouseup

    b)keyboard -
        a)keydown/keyup
    c)form -
        a)submit
        b)focus

    d)Document events -
        DOMContentLoaded

    e)CSS Events -
        transitionend


b)Ways to add event listerner -

    a)via attrbute -
        a)without function
            <input value="Click me" onclick="alert('Click!')" type="button">

        B)with functon -
            <script>
                function countRabbits() {
                    for(let i=1; i<=3; i++) {
                    alert("Rabbit number " + i);
                    }
                }
            </script>

            <input type="button" onclick="countRabbits()" value="Count rabbits!">

    b)DOM proeprty -
        <input id="elem" type="button" value="Click me">
        
        <script>
            elem.onclick = function() {
                alert('Thank you');
            };
        </script>

        Note - Method1 also browser does same automatically.

    limitations of 1 &2 - As there’s only one onclick property, we can’t assign more than one event handler.
    To remove a handler – assign elem.onclick = null.

Accessing the element: this
    The value of this inside a handler is the element. The one which has the handler on it.

Syntax Difference in assigning event listener as attribute and as DOM Property
    button.onclick = sayThanks;
    <input type="button" id="button" onclick="sayThanks()">

    The difference is easy to explain. When the browser reads the attribute, it creates a handler function with body from 
        the attribute content.So the markup generates this property:

            button.onclick = function(event) {
                sayThanks(); // <-- the attribute content goes here
            };
    event is event object. browser pases passes this event argument to generated function.


Don’t use setAttribute for handlers.


addEventListener(Primary way of assigning the events)

    Using this multiple events can be assigned.

    element.addEventListener(event, handler, [options]);

    options -

        once: if true, then the listener is automatically removed after it triggers.
        capture: the phase where to handle the event,by default value is false, which means handler is added for bubbling
            phase. For historical reasons, options can also be false/true, that’s the same as {capture: false/true}.
        passive: if true, then the handler will not call preventDefault(), we’ll explain that later in Browser default
            actions.

element.removeEventListener(event, handler, [options]);
    note - handler should be same object which was used while adding the event.


For some events, handlers only work with addEventListener
    For instance, the DOMContentLoaded event, that triggers when the document is loaded and the DOM has been built.

    So addEventListener is more universal. Although, such events are an exception rather than the rule.


Event Object
    When an event happens, the browser creates an event object, puts details into it and passes it as an argument to the 
    handler.

    Some properties of event object:
        1)type - "click"
        2)event.currentTarget - Element that handled the event. That’s exactly the same as this, unless the handler is an
            arrow function, or its this is bound to something else, then we can get the element from event.currentTarget.
        3)event.clientX / event.clientY
            Window-relative coordinates of the cursor, for pointer events.

    The event object is also available in HTML handlers.If we assign a handler in HTML, we can also use the event object, 
        like this:

        <input type="button" onclick="alert(event.type)" value="Event type">

        That’s possible because when the browser reads the attribute, it creates a handler like this: 
            
            function(event) { 
                alert(event.type) 
            } 


Object handlers: handleEvent
    We can assign not just a function, but an object as an event handler using addEventListener. When an event occurs, its 
    handleEvent method is called.


Questions - 
    Carousel Question
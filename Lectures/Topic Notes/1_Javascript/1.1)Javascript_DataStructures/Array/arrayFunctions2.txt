Accessing the array elements -
    1)arr.at(index) - return the element at given index, even supports negatives indexes.

Adding Elements to Array -

    1)arr.unshift(element) - adds element at begining of array and return length of array.can add multiple elements by taking 
        multiple arguments.
    2)arr.push(element) - adds element at last and return length of array.can add multiple elements by taking 
        multiple arguments.
    

Removing elements -

    1)arr.shift() - removes elment from starting and returns removed element.
    2)arr.pop() - removes element from last and returns removed element.
    3)arr.splice(index, element) - The splice() method changes the contents of an array by removing or replacing existing elements 
        and/or adding new elements in place.The splice() method is generic. It only expects the this value to have a length 
        property and integer-keyed properties. 

        splice(start)
        splice(start, deleteCount)
        splice(start, deleteCount, item1)
        splice(start, deleteCount, item1, item2, itemN)

        start - Zero-based index at which to start changing the array. negative values are allowed.

        deleteCount - An integer indicating the number of elements in the array to remove from start.

        return value - An array containing the deleted elements.

    4)arr.toSplice - The toSpliced() method of an Array instance is the copying version of the splice() method. It returns a
        new array with some elements removed and/or replaced at a given index.


Extracting Subrray -

    1)arr.slice(start,end)
        The slice() method is generic. It only expects the this value to have a length property and integer-keyed properties.


Merging Array -

    1)arr.concat - The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but 
        instead returns a new array.

        concat()
        concat(value0)
        concat(value0, value1)
        concat(value0, value1, /* … ,*/ valueN)

        valueN - Arrays and/or values to concatenate into a new array. If all valueN parameters are omitted, concat returns a 
            shallow copy of the existing array on which it is called. See the description below for more details.

        Return value - A new Array instance.

        des - The concat method creates a new array. The array will first be populated by the elements in the object on which it is
            called. Then, for each argument, its value will be concatenated into the array — for normal objects or primitives, the
            argument itself will become an element of the final array; for arrays or array-like objects with the property 
            Symbol.isConcatSpreadable set to a truthy value, each element of the argument will be independently added to the final 
            array. The concat method does not recurse into nested array arguments.
        
        In docs see example of - 
            Concatenating array-like objects with Symbol.isConcatSpreadable
            Calling concat() on non-array objects


Iterate over array -
    
    1)arr.forEach(callbackFn) - callbackFn is invoked only for array indexes which have assigned values. It is not invoked for 
        empty slots in sparse arrays.forEach() does not mutate the array on which it is called, but the function provided as 
        callbackFn can. Note, however, that the length of the array is saved before the first invocation of callbackFn. Therefore:

        callbackFn will not visit any elements added beyond the array's initial length when the call to forEach() began.
        Changes to already-visited indexes do not cause callbackFn to be invoked on them again.
        If an existing, yet-unvisited element of the array is changed by callbackFn, its value passed to the callbackFn will be the 
            value at the time that element gets visited. Deleted elements are not visited.

        The forEach() method is generic. It only expects the this value to have a length property and integer-keyed properties.
        There is no way to stop or break a forEach() loop other than by throwing an exception. If you need such behavior, the 
        forEach() method is the wrong tool.

        forEach() expects a synchronous function — it does not wait for promises. Make sure you are aware of the implications while
        using promises (or async functions) as forEach callbacks.

        Examples to be visisted -
            forEach() expects a synchronous function 
            Using thisArg
            Modifying the array during iteration
            Calling forEach() on non-array objects

        returns - undefined


searching the Array -

    1)arr.find(callbackFn) - The find() method is an iterative method. It calls a provided callbackFn function once for each element
     in an array in ascending-index order, until callbackFn returns a truthy value. find() then returns that element and stops 
     iterating through the array. If callbackFn never returns a truthy value, find() returns undefined.

     callbackFn is invoked for every index of the array, not just those with assigned values. Empty slots in sparse arrays behave
     the same as undefined.find() does not mutate the array on which it is called, but the function provided as callbackFn can. 
     Note, however, that the length of the array is saved before the first invocation of callbackFn.for rule ssee  docs.

        find(callbackFn)
        find(callbackFn, thisArg)

        callbackFn - A function to execute for each element in the array. It should return a truthy value to indicate a matching 
            element has been found, and a falsy value otherwise. The function is called with the following arguments:

            element
            The current element being processed in the array.

            index
            The index of the current element being processed in the array.

            array
            The array find() was called upon.

        return - The first element in the array that satisfies the provided testing function. Otherwise, undefined is returned.

    2)arr.findIndex(cb) - same as find method. only diffrence -
        a)retruns index of array instead of element itself
        b)when no element returns true then it returns -1.
    3)arr.includes - The includes() method determines whether an array includes a certain value among its entries, returning true 
        or false as appropriate.

        includes(searchElement)
        includes(searchElement, fromIndex)

        fromIndex - Zero-based index at which to start searching, converted to an integer.negative values are allowed.
            fromIndex < -arr.length => 0 is used as fromIndex
            fromIndex > arr.length => array is not serached and false is returned
        returns - boolean

        The includes method handles NaN correctly unlike indexOf.That’s because includes was added to JavaScript much later and 
            uses the more up to date comparison algorithm internally.

    4)arr.indexOf(element) - same as includes. only differences -
        a)The indexOf() method skips empty slots in sparse arrays.
        return - index of element or -1.

    5)arr.lastIndexOf(element, startIndex) - searches from right to left
        
        lastIndexOf(searchElement)
        lastIndexOf(searchElement, fromIndex)

        fromIndex - Zero-based index at which to start searching backwards, converted to an integer.negative values are allowed.

        return - index or -1.

    6)arr.findLast - searches from right to left
        findLast(callbackFn)
        findLast(callbackFn, thisArg)

        params of callbackFn - element,index,array
        returns - The value of the element in the array with the highest index value that satisfies the provided testing function;
            undefined if no matching element is found.

    6)arr.findLastIndexOf() - same as findLast

Driving a new array from array -

    1)arr.filter - The filter() method creates a shallow copy of a portion of a given array, filtered down to just the elements 
        from the given array that pass the test implemented by the provided function

        filter(callbackFn)
        filter(callbackFn, thisArg)

        params of callback fn - element,index,array

        return - A shallow copy of a portion of the given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.

    2)arr.map() - The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.

        map(callbackFn)
        map(callbackFn, thisArg)

        callbackFn - If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value.

Sorting -

    1)arr.sort() - If compareFn is not supplied, all non-undefined array elements are sorted by converting them to strings and comparing strings in UTF-16 code units order. 
        For example, "banana" comes before "cherry". In a numeric sort, 9 comes before 80, but because numbers are converted to strings, "80" comes before "9" in the Unicode
        order. All undefined elements are sorted to the end of the array.

        syntax -
            sort()
            sort(compareFn)

        compareFn - If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value. For example, "banana" comes
            before "cherry". In a numeric sort, 9 comes before 80, but because numbers are converted to strings, "80" comes before "9" in the Unicode orde

        return value - The reference to the original array, now sorted. Note that the array is sorted in place, and no copy is made.

        for sorting string use str.localeComapre

        read the docs about caracterstic of compartor function.

        see this example - Sorting non-ASCII characters, the comparator is expected to have the following properties.

    2)arr.toSorted - The toSorted() method of an Array instance is the copying version of the sort() method.

reversing -
    1)arr.revrese() - it reverse() method reverses an array in place and returns the reference to the same array. empty entries are preserved.
        to be covered - Calling reverse() on non-array objects

    2)arr.tobeReverse() - same as reverse but do not modifies the orignal array, instead creates a new copy of array and reverses it.

Methods to get one value from Array -

    1)arr.join - The join() method creates and returns a new string by concatenating all of the elements in an array 
        (or an array-like object), separated by commas or a specified separator string.IN case of empty arrays
        we just get extra instance of separator, [1, undefined, 3].join()) => '1,,3'


        join()
        join(separator)

        separator - Specifies a string to separate each pair of adjacent elements of the array. The separator is 
            converted to a string if necessary. If omitted, the array elements are separated with a comma (","). 
            If separator is an empty string, all elements are joined without any characters in between them.

        The join method is accessed internally by Array.prototype.toString() with no arguments. Overriding join 
            of an array instance will override its toString behavior as well.

    2)arr.reduce
        reduce(callbackFn)
        reduce(callbackFn, initialValue)

        callbackFn - A function to execute for each element in the array. Its return value becomes the value of the 
            accumulator parameter on the next invocation of callbackFn. params of reduce -
                accumulator
                currentValue
                currentIndex
                array
        initialValue -  value to which accumulator is initialized the first time the callback is called. If initialValue
            is specified, callbackFn starts executing with the first value in the array as currentValue. If initialValue
            is not specified, accumulator is initialized to the first value in the array, and callbackFn starts executing
            with the second value in the array as currentValue.In this case, if the array is empty (so that there's no first
            value to return as accumulator), an error is thrown.

        Return - The value that results from running the "reducer" callback function to completion over the entire array.
        typeError - Thrown if the array contains no elements and initialValue is not provided.

        Note - read this article about immutability of reducer.

    3)arr.reduceRight - same as reduce just iteration is from right to left, instead of left to right.
        see examples on mdn docs.


similar pattern - 
    1)iteration methods(forEach/find/findIndex/findLast/filter/map/reduce) 
        does not mutate the array on which they called, but the function provided as callbackFn can. Note, however, that the length
        of the array is saved before the first invocation of callbackFn. Therefore:

        a)callbackFn will not visit any elements added beyond the array's initial length when the call to findIndex() began.
        b)Changes to already-visited indexes do not cause callbackFn to be invoked on them again.
        c)If an existing, yet-unvisited element of the array is changed by callbackFn, its value passed to the callbackFn will 
            be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.

    2)methods(splice/slice/forEach/find/findIndex/includes/lastIndexOf/findlast/filter/map/sort/erverse/toReverse/join) is generic. 
        It only expects the this value to have a length property and integer-keyed properties.

    3)methods that do not skip sparse arrays -find, findIndex,findLast,findLastIndexOf ,includes, join
    4)methods that skips sparse arrays - forEach,filter,map, reduce,indexOf,lastIndexOf
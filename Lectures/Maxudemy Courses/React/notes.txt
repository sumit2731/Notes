regarding code of project, each section has its code, but all code repo can be found in "Course Source Code",  there
    we have different branch for diffrent sections and each section we have different codes.


questions -

    multiple state updates in  section 4, lecture 52,58.
    rile of intial value to useRef

questions asked in course -

    1)lecture 54, component getting updated on each form value control change.

JSX syntax -

    1)built in props in react -
        a)className = class in html
        b)onClick = handling click based events. all events we have props - 'on' + event name in camel case
        c) htmlFor = for in html

            html -
                <label for="name">Name</label

            jsx -
                <label htmlFor="name">Name</label>

        4)key prop - idnetufies each element while rendering list
                
        5)ref prop -    
            1)you can create variable that does not get reset during re-render.
            2)in built in html elemnts you can use it in jsx, then can access the html refence using useRef() or
                React.createRef.
            3)For custom react components you can use it in jsx, and then can execute the function defined in your custom
                component and exposed by useImperativeHandle. lecture 129 for details.

    2)hooks in react -
        a)useState - returns a array. First Element is state variable with default value, 
            second one is function to change first state variable
        b)useRef - It has 2 uses -
        
            a)The useRef Hook allows you to persist values between renders.It can be used to store a mutable value that does not 
                cause a re-render when updated.

            b)It can be used to access a DOM element directly.

        c)useEffect -it takes a callback as a function, and array of dependecies. it will call callback function on rerender of component
            function , if provided dependencies change.

            useEffect(() => {}, []);

            note that callback can return a cleanup function which will be called -
                a)before calling main callback except whne main callback is calle first time
                b)when component is destroyed

        d)useReducer - it basically allows us to maage state, it is more powerful than useState.
            const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn);

            for details see section 10 notes.

        e)useContext - lets you grab the context. alternate way of consuming Context API , other way is to wrap the
            jsx in ContextObject.Consumer component.

        f)useImperativeHandler - useImperativeHandle customizes the instance value that is exposed to parent components when 
            using ref.here we can expose variables and function that can be called from parent component. 
            
            As always, imperative code using refs should be avoided in most cases. useImperativeHandle should be used with 
            forwardRef:

        

    3)React API -
        1)React.foreardRef - with this you can accept the ref argument from outside and it will be availble to
            component function.

        2)React.createContext - crates the context, which helps you to pass data across functions.
            Context.provider
        3)
    
    4)style= "height: 100%"; padding: 20px"  =>  style= {{height: '100px', padding: '20px}}
        so while setting properties like bacjround-color either use -
            
            'background-color' (write property name within '')
            
            or 
            
            bakgroundColor (write js version of proeprtyName i.e camelcase version)

    5)attaching some multiple as well as stateic classes to jsx element -

        <div className = {`staticClass1 ${flag ? 'dynamicClass' : ''} staticClass2 `}></div>

        <div className = {`staticClass1 ${flag && 'dynamicClass'} staticClass2 `}></div>
        

    6)how to render list of elements -

        <div>
            {[<li></li>, <li></li>]}
        </div>

        here react will render all jsx elemnts given in array. so we make this array dynamic based on the list -

        <div>
            {users.map(user => <li></li>)}
        </div>

    7)component communication - listing the state up

    8)ways of conditional renderting

        section5, lecture 67
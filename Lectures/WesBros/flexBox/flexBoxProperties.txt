a)Flex Container
    1)display- It makes immediate childerns as flex items
        a)flex(default) - flex container cover whole screen
        b)inline-flex - flex container is as large as content
    
    2)flex-direction - It sets the main and cross axis. we have both main and cross axis.
        flex-direction: row(default) | row-reverse | column | column-reverse;
    
    3)flex-wrap - 
        it tells flex box that it can place flex items on next row. see lecture 2 notes.
        wrap means -Cross Axis is from Top to bottom
        wrap reverse - Cross Axis is from Bottom to Top i.e first row will start from bottom
        flex-wrap: nowrap(defualt) | wrap | wrap-reverse;

        this also chnages the direction of cross axis.

    4)Justify-content - notes of lecture 4
     default value is flex-start.
         justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;
         
         Browser support-
         Safest - flex-start,flex-end and center
         Not In chrome-  start/end/left/right aren't in Chrome
         space-between-
         space-around-
         space evenly- chrome, efirebox, not in edge

    5)align-items- this defines how items are arranged along the cross axis. Think of it as the justify-content version for the 
        cross axis(Perpendicular to the main-axis). see notes of 5.
        
        align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start 
            | self-end + ... safe | unsafe;
        default is stretch.
        safe are -stretch | flex-start | flex-end | center | baseline
    
    6)align-content - This aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how 
        justify-content aligns individual items within the main-axis.it takes same values as justify content.it decides what to
        do with extra space on cross axis.default value is stretch. see kedture 6.

        Note: this property has no effect when there is only one line of flex items.See lecture 6 -
            align-items vs align-content
    
        align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | 
            baseline | first baseline | last baseline + ... safe | unsafe


b)Flex Items
    
    1)order - see lecture 3 notes

    2)align-self- This allows the default alignment (or the one specified by align-items) to be overridden for individual flex
     items. see notes of lecture 7
       
       align-self: auto | flex-start | flex-end | center | baseline | stretch
       Note that float, clear and vertical-align have no effect on a flex item.

    3) flex- default is 0 1 auto
    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
    note- All of the above applies (4 proeprties) the same to height when your flex-direction is column or 
        column-reverse.
    
    
    4)flex-basis - check 8,9 and 10 lecture notes.This defines the default size of an element before the remaining space is distributed.
        flex item's width is-
        content —> width —> flex-basis (limted by max|min-width).If no flex-basis is specified, then the flex-basis 
        falls back to the item's width property.If no width is specified, then the flex-basis falls back to the computed 
        width of the item's contents.
        flex-basis: auto | content | <width> | <height>; default is auto.
        all this is when flex-direction is row. if our direction is column then, it crrosponds to height
    5)flex-grow -check 8,9 and 10 lecture notes.It comes into picture when we have extra space after all itms take thier flex-basis .We can instruct our 
        flex items to grow to fill the available space once they're placed into the flex container. That's what the flex-grow 
        property is all about. The default value is 0, meaning don't grow. we can have it like this also, for some items
        we can sit to value other than 0, some item will be be 0. now later items will not gorw to take up free space.
        if we have multiple rows(assume main axis is from left to right), and flex-item has flex-grow, then it has effect
        only on that row. it does not take width from rest of rows, see code 10.1
    6)flex-shrink - check 8,9 and 10 lecture notes.this comes into picture when we do not have enough space for our flex items.default to 1. without flexbox,
       i.e if we are using floats, then items break into next line if there is not enouh space. but in flex box, default
       flex-shrink is 1, so instead of breaking into next line, it will shrink. now we can define the ratio of shrink
       using this property.it tells how should I giveup myself in proportion to other one.
    Note- flex-grow,flex-basis,flex-shrink, only work on row on which they are .other rows are not affceted.see code 10.1
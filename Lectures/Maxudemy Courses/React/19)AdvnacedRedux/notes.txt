1)in code folder 1, we just prepared a application with redux code, that is what we alrrasy did in last section.

2)slide 1-
    here is one super important rule.Your reducer functions must be pure, side-effect free, and synchronous.So your reducer 
    functions should take some input in the case of the Redux reducer,the old state and the action,and then produce some output.
    It has nothing to do with redux,but it just general reducer concept that you have a pure,side effects synchronous function
    that takes input and produces some output.And for the same input,for the same values,it will always produce the same output,
    without any side effects that happen along the way without any asynchronous code that blocks it.No code of that kind must be 
    part of your reducer functions.

    important question is when working with redux, when we dispatch some action that would involve a side effect, like HTTP request
     that should be sent,where should we then put the side effect code?


 options are -
    
    1)We can put our side effects possibly asynchronous code directly into the component with user fact for example, so just as
     we did it before in this course,and then we only dispatch an action once that side effect is done so Redux doesn't know 
     anything about that side effect,

    2)we write our own action creator functions,so we don't use the automatically generated ones redux toolkit gives us but instead
     we write our own action creators.And it turns out that for those action creators redux actually has a solution that allows us
      to perform side effects and run asynchronous tasks as part of this action creators without changing the reducer function.

we are going to have a look at both approaches in this course section.




3)In lecture 255,we started with writing async and side effect logic code component.there it was discussed that what code we write
 on frotend and where we write that code depends upon backend.If backend handles complex logic then on UI we can just make api 
 call and on response, we can store response directly in reducer(do less work on UI) i.e data tranformation that we do in reducer 
 can be done at backend.(for ex in productIteem we can disoatch action with response from data and remove logic from reducer).
  
  but in our case we haave 2nd case i.e our backend does not handle complex logic and just saves the data that we send,then this 
  data transaformation needs to be done on UI,and then we need to make api call. but problem is we are doing this data transformation 
  in reducer and from reducer we cannot make api call(as it is side effect).

  so we need to find a way where we do data transformation on UI and the send that data to backend, withut doing that sending
  inside of reducer.

4)In lecture 256, we tried to write our data transfsormation code in component. note still we are not making api call.
    slide2 shows approaches of writing code. note that here our code is synchronous, so we should prefer at reducer.

    write fat actions is not bad, you can do that but that is not central idea of reudx. so our code is suboptimal, how do 
    we improve it?

5)lecture 257, we wrote data tranformation logic in reducer only, as we had earlier, it is just that in some component(here app.js)
    we susbcribe to changes in store and we make api call when store changes. here synchronous logic is in reducer but
    asynchronous code is in component. order is switched, first we update the store, then on store chnage we make api call.

    this allows us to keep lean components create a fat Reducer with all the logic and then perform any side effects that might 
    depend on our Redux state.


6)In lecture 260, here we use actionCreator approach to run some async code that depewnds upon store.

    A thunk is simply a function,that delays an action until later,until something else finished.
    And we could write an action creator as a thunk,to write an action creator,which does not immediately return the action object,
    but which instead,returns another functionwhich eventually returns the action.So that we can run some other code before we 
    then dispatch the actual action object.


    see code and comments in store/cart-slice.js.why should we use this patttern? Well, it's simply an alternative
    to having that logic in your component.You can add that logic in your components.You can stick to the approach we had
    before,but it's also not a bad idea to keep your components lean, to not have too much logic in them.And at the moment,
    by moving that logic to this action creator function, we did achieve this.


    This component is now leaner.It only dispatches one action,not multiple actions.It doesn't care about sending the HTTP request,
    and all the hard work,happens inside of our custom action creator function,in our Redux files.And splitting our recode like this,
    could be considered good,because it keeps our components lean.That does not mean that the other approach is bad.Both options are
    viable and that's why I am showing both here.


7)In Lecture 261, we implemented the fetching of cart data on application bootstrap by actionCreators. now when we fetch the
    data from store initially, then we also save that same data in store, how can we get around that?

8)in lecture 262, we solved that problem by adding a new new value to store state.

9)In Lecture 263, we saw how to use redux dev tools. important feature was jum to state thing.



Main Takeaway from section -
    Prefer reducers for data transformations and only put side-effects or async code into your components or action creators.


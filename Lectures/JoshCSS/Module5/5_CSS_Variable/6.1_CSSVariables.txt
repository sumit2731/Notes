Custom properties
    a)The first thing to understand about CSS variables is that they function exactly like properties (like display, color, etc).
    b)We aren't setting a variable, we're creating a brand-new property:

        strong {
            display: block;
            color: red;
            --favorite-food: tomato;
            --temperature: 18deg;
        }

    c)Custom properties always start with two dashes (--), to differentiate them from built-in properties.
    d)Custom properties are also inheritable, just like color or font-size. In element that inherits them we can use them.
    e)The anchor inherits both the font-size and our custom --favorite-food property.
    f)--favorite-food doesn't have any effect on its own; the CSS rendering engine doesn't make use of that property. But we 
        can access its value using the var function:

        css -
            main {
                font-size: 2rem;
                --favorite-food: tomato;
            }

            a {
                padding: 32px;
                background-color: var(--favorite-food);
            }
        
        html -

            <main>
                <section>
                    <a>Hello World</a>
                </section>
            </main>

    g)A common misconception is that CSS variables are "global". When we attach a CSS variable to an element, it's only 
        available to that element and its children.

    h)CSS variables,are often hung on :root -
        
        :root {
            --color-primary: red;
            --color-secondary: green;
            --color-tertiary: blue;
        }

        :root is an alias for html, so by hanging CSS variables on the top-level element, they become globally available (every
            element, after all, is below the root HTML tag). But you can attach CSS variables to any element, not just the root
            one!.

    i)Disabling inheritance. It happens via @property, it is not widely supported.When @property makes it into most browsers, 
        this course will be updated to cover it in depth.

    j)Default values
        
        .btn {
            padding: var(--inner-spacing, 16px);
        }
    
    k)Reactive properties
        If you've used Sass or Less, you might be thinking “So what? We've had variables in preprocessors for years! What makes 
            this different?".

        The biggest difference is that these variables exist at runtime. With Sass/Less, the variables are compiled away when 
            you build the site, leaving you with static values.Here's a quick demo showcasing something that isn't possible with
            traditional preprocessor variables:


            button.style.setProperty('--inflated-size', fontSize);

        CSS variables are reactive—when their value changes, any properties that reference that value also change.

    l)useage wth react -
        
        we can set css custom proeprties with style prop -

            <Wrapper
                style={{
                    '--main-color': status === 'success' ? 'green': 'red'
                }}
            >
                {children}
            </Wrapper>

        We can use same in css -

            const Wrapper = styled.p`
                color: var(--main-color);
                border-left: 2px solid var(--main-color);
            `;
        That said, styled-components' interpolation syntax is more powerful, and can do things not possible with CSS variables.

    m)Responsive values - For devices with coarse pointer, we want to increase the min-height.
        
        const FancyButton = styled.button`
            /* Other styles omitted for brevity */

            @media (pointer: coarse) {
                min-height: 44px;
            }
        `;
        
        there will be many element which will need this min-height like -

            const TextInput = styled.input`
    
                min-height: 32px;

                @media (pointer: coarse) {
                    min-height: 44px;
                }
            `;
        
        
        so instead of doing this, we can do this -

            const GlobalStyles = createGlobalStyle`
                @media (pointer: coarse) {
                    html {
                    --min-tap-height: 44px;
                    }
                }
            `;

        We only define this variable for folks with a coarse pointer. We'll leave the variable undefined for everyone else.
        Then, we can use this property inside our styled-components:

        const FancyButton = styled.button`
            min-height: var(--min-tap-height);
        `;

        const TextInput = styled.input`
            min-height: var(--min-tap-height, 32px);
        `;

        If the user is using a mouse or other “fine” pointer,--min-tap-height will never be set. FancyButton won't have a 
            min-height, and TextInput will fall back to the default value of 32px.But, if the user is using a finger or 
            similarly “coarse” pointer, --min-tap-height will be set to 44px, and that value will be used in both components.


        We're not writing "bespoke" logic for each interactive component anymore. The logic is defined globally. Each component
            reads a reactive value, and uses that value.

Exercise 1 -
    Here we saw a exercise here we are setting multiple properties in media queries. instead of doing all that we used custom,
    proeprty and only chnaged that in media query. but here all proerties were units of 16 so a single custom property did the
    job.later we will see how do this if all properties all not multiples of same numebr.

    but this pattern is strong.
        
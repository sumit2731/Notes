1)When a promise rejects, the control jumps to the closest rejection handler. it enables us to define single rejection handler for
 whole promise chain at the end of chain.

2).catch doesnâ€™t have to be immediate. It may appear after one or maybe several .then. see exaple1 in code

3)implicit try catch block - The code of a promise executor and promise handlers has an "invisible try..catch" around it. 
    If an exception happens, it gets caught and treated as a rejection. as per pont 1, rejection is handled by catch block.

4)rethrowing of error - If we throw inside .catch, then the control goes to the next closest error handler. And if we handle
 the error and finish normally, then it continues to the next closest successful .then handler. 

5)when there is no handler for rejected promise(or handler is there but noting is returned from handler) then script dies and error 
is thrown. In the browser we can catch such errors using the event unhandledrejection. we should report these events to server , so 
that our app just never dies.

6)see question in last.
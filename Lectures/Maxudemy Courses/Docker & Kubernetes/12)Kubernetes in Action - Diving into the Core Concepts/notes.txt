Highlights -
    1)setup cluster on local system with kind.
    2)understanding diffrent kubernetes object -
        pods
        deployments
        services
    3)deploying container into cluster setup in step 1. By sending instructions to cluster via kubectl. 
    4)how to expose your conatiners to outisde world with service object.(when cluster is in cloud as well as local)
    5)default bahviour of kubernetes(using imperative approach) is to restarted the pod when continer failed.
    6)manual scaling when auto scaling is disbaled
    7)updating the image used in running deployment.how to see in events of pods that new image was downloaded and container was
        started,based on that.
    8)deployment rollouts -
        when we update the deployment old contianer is not taken down untill new container comes up. you can see the status in dashboard.
            old pods will be running statte and new pods are trying to comeup, once they comeup, old pods are killed.
        see all deployment rollouts
        how to go to particular rollout
        how to see details of rollout like which image was used.

    9)to create a deployment with declarative approach.

Code -
    folder 1 - create deployment and services by imperative approach
    folder 2 - create deployment by declarative approach
    folder 3 - create service by declarative approach



181)What kubernetes does not manage infrstaructure for you (slide1)

    you have to setup master and worker node and then install sofwares like Kubernetes API server,the kubelets and all
    these different services.after all this is setup, then kubernetes will manage pods for you. it will help with
    scaling,distributing pods across worker node, restarting pod when other pod goes down.

    tools like kubermatic can help you with infrastructure creation, buit it is not part of kubernets.kubermatic helps you
    to create instance(which will later become master and node) on cloud provider lets say for example on aws.

    In addition, certain cloud providers like again,AWS do have dedicated services like in AWS,EKS, Elastic Kubernetes 
    Service which actually helps you with that as well.That is a service which will allow you to bring your own 
    Kubernetes configuration so that you don't have to use the AWS specific configuration as you did have to use with ECS.
    Elastic Kubernetes Service will then also set up all the resources needed by your Kubernetes configuration.

    wo this is tools like EKS and kubermatic that can help you to complete right side of picture.


182)Kubernetes: Required Setup & Installation Steps (slide 2)

    kubectl - using this we send instructions to master node, like increase the number of pods. this how we set or chnage the 
    configuration that needs to be maintained by kubernetes.this is tool that needs to be installed on our machine.


    Minikube - this helps us to setup the cluster the local machine.Minikube is in the end a tool which you can install locally
    for playing around with Kubernetes and for testing it and it will use a virtual machine on your laptop on your machine, on 
    your local machine to create the cluster in there.It will actually create a single node cluster which means there the worker
    and master node is combined into one single virtual machine.it is great tool for getting started with kubernetes and for 
    testing things locally.


183)MacOs setup
    see Kubenetes commands notes.

    here we installed 
        minikube - Tool for setting worker and master node on local system.It creates cluster on locl system.
        kubectl- This is always needed, this sends instructions from local system to cluster i.e master node.
    
    I faced issues with minikube , so I am using kind.

184)Windows setup



185)Understanding Kubernetes Object(slides 3,4)

    kubernetes undestand some objects, you create these objects n code, then kubernetes performs some actions based on instructions
    encoded in these objects. objects can be created in 2 ways -

        a)imperatively
        b)declaratively

    deploymnt object- slide 4. pods have cluster internal ip addresses that can be used to communicate with them, send instruction.
    containers within same pod can communicate with each other via local host.

    a task in aws ecs is very similar to pod in kubernetes.

    important thing about pods -

    a)they are ephemeral -
    b)we can create pods on some worker nodes manulayy. but we do'nt do this. we want kubernetes to automatically create,remove and
        replace pods.The entire idea behind using Kubernetes is that it also manages the deployment for us.And that's why we typically
        don't just create pod objects and send them to the cluster,but why we create controller objects,specifically the deployment 
        object,which then actually will create pods for us.

186)The "Deployment" object
    we genrally do not create pod objects but we create deployment objects. see slide 5.

    you do not creates pods objects direectly, But instead you create a Deployment object,which you then give instructions about the 
    number of Pods and the containers it should create and manage for you.

    set desired statd - we tell that we need 2 pods with these container up and running.kuberenets will automatically select worker 
        nodes reach this target state.

    deloyment can be scaled - we can define number of pods required, we can also use autoscaling where set some scaling matrixs,
    (on cpu utilization, incoming traffic) to decide scaling automatically.

    important - A deployment manages one type of pod(pod with 2 containers). for different types of pods we ned to create multiple pods.

187)First Deployment using imperative approach
    folder - code1.

    Steps -
        1)create image -
            docker build -t kub-first-app:1.0.0 .
        2)start the cluster - 
            kind create cluster

            check the status of cluster -
                kind get clusters

                kubectl cluster-info --context kind-kind
        3)make your image avalible inside cluster created by kind -
            kind load docker-image "nameOfImage"  => kind load docker-image kub-first-app:1.0.0  

        4)create and send the deployment object to cluster -
            (this is imperative way of creating objects) -
            kubectl create deployment first-app --image=kub-first-app:1.0.0

        5)we can check the deployment and pods by using -

            kuctl get deployments
            kuctl get pods


    So our container is running now inside cluster created by kind. but as of now we cannot reach it.


188)kubectl:behind the scenes
    see slide 7 explain what happened when ran the commands in last lecture

189)Service Object(slide 6)
    To reach a pod and the container running in a pod,we need a service.Because a service object is another object Kubernetes knows,
        which is responsible for exposing pods to other pods in the cluster, or very important to us here to visitors outside of the
        cluster.

    Problem with reaching pod via IP address -

        1)this IP cannot be used outsoide of cluster.
        2)even within the cluster, when pod goes down and kubernetes brings it up again, this IP changes.


    Service, groups pods together and gives them a shared address a shared IP address.And this address then won't change.
    So you can use a service to move multiple pods into that service and make them reachable on that service unchangeable IP address.
    And even better than that,you can also tell the service to expose this address which doesn't change not just inside of the cluster,
    which you also can do,but also outside of the cluster.



190)Exposing a deployment with a Service
    we can createdthe service using - kubectl create

        kubectl expose deployment first-app --type=LoadBalancer --port=8080

        to see diffrent types of services, see commands section.

    then checked whether it is running or not by -

        kubectl get services

    name of service is same as deployment i.e first-app

    here we saw our service but external-ip is still pending.Now, if this would be deployed on a cloud provider,we would actually see an
    external IP here,but for minikube,this will always stay in the pending status.but minikube has a command,which will give us access to
    the service by basically mapping a special port to an IP which we can reach from our local machine,and which identifies this virtual
    machine running on our local machine.

        minikube service "nameOfService" => minikube service first-app (no equivalent possible for kind)

    this  shows the service name and ip that will be opened automatically in browser, here you can see your running application.

191)restarting the continers
    Here we saw that containers are restarted automatically when some error occurs in our code.This the behaviour we get when we crate a 
    deployment. we can see how many times a pod has 
    restarted by this command -

        kubectrl geet pods 


192)Scaling in Action
    here we ran this command - 
        kubectl scale deployment/first-app --replicas=3

    it will create new replicas or instances of pod.and now load balancer will direct traffic to diffrent pods.we verified it by,
    crashing the server, still we were able to see the page because because was going to another pod.

193)Updating the deployment
    1)chnage code.
    2)generate new image.
    3)upload image on docker-hub.
    4)run this command -

        kubectl set image deployment/"name of deployment" containerName="image name"   (container name is same as image name with which i was started)

        kubectl set image deployment/first-app kub-first-app=kub-first-app

        we get the name of container via UI,


        This replaces the image in container of give deployment with new image.it sets the image for already running deployment.

        now by default you will not see any chnage this is because existing image is downloaded only if tag is chnaged, there are ways
        of changing this but its gud to chnage tag name on image update, so we update the image tag -
    5)update image tag -

        docker build -t  kub-first-app:2 .

    6)uopload the image on docker hub
    7)run kubectl command -

        kubectl set image deployment/first-app kub-first-app=kub-first-app:2


        now kubernetes detects the chnage in image tagm so it redownloads the images and retsarts your container based on this.
        we get image updated confirmation.

    8)you can check the updating satus by -

        kubectl rollout status deployment/"name of deployment" => kubectl rollout status deployment/first-app


    In kubernetes dashboard go to  -> pods(on left pane) -> click on pod name.

    here under events you can see that new image was downloaded and new continer was created based on that image.

    at the bottom you can see contianer name and image name on which that container is based off of.

194)Deployment Rollbacks & History

    here we tried to use a image that does not exist - 

        kubectl set image deployment/first-app kub-first-app=kub-first-app:3

    There was no error. lets check the progress of our rollout -

        kubectl rollout status deployment/"nameOfDeployment"
        kubectl rollout status deployment/first-app

    here we can see that deployment is in progress and old replica is shutting down.In dashboard also under pods you can see that
    1 pod failed to pull images and another is ruuning. so old pod was not shut down because newer does not started running.this is
    rolling update strategy. so lets rollback this deployment because this has failed anyway.

        kubectl rollout undo deployment/"deoploymentName"
        kubectl rollout undo deployment/first-app

    now no of pods is one and in rollback status also we saw success message.

    now how can we go back to previous rollout-

        1)get all rollout details -
            kubectl rollout history deployment/"nameOfDeployment"
            kubectl rollout history deployment/first-app

        2)to see which image was used in a rollout -
            kubectl rollout history deployment/first-app --revision="identifier"
            kubectl rollout history deployment/first-app --revision=2

        3)to back to a reviion -

            kubectl rollout deployment/first-app --to-revision=1

195)imperative vs declarative approach(slides 8,9)
    impretaive approach means using config file instead of commands to manage kubernetes.
    And if we then for example, change a configuration file and reapply it, Kubernetes will have a look at what changed
        and make the appropriate changes on our running cluster and the running application there.


196,197)
    here we defined a deployment.yaml. see code2 folder. at the end we tried to apply to that file by using command -

        kubectl apply -f=deployment.yaml

        but at while running the above command, we got the error - "missing required filed "selector""

198)working with labels and selectors
    here we added the seelctor in deployment spec. so that above error is gone and we are able to create a deployment, by -

        kubectl apply -f=deployment.yaml

    then we were able to check th deployment and pods by -

        kubectl get deployments
        kubectl get pods
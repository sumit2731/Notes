MutationObserver is a built-in object that observes a DOM element and fires a callback when it detects a change.

Syntax - 

    let observer = new MutationObserver(callback);

    observer.observe(node, config);


        config is an object with boolean options “what kind of changes to react on”:

            childList – changes in the direct children of node,
            subtree – in all descendants of node,
            attributes – attributes of node,
            attributeFilter – an array of attribute names, to observe only selected ones.
            characterData – whether to observe node.data (text content),
            
            attributeOldValue – if true, pass both the old and the new value of attribute to callback (see below), otherwise 
                only the new one (needs attributes option),
            characterDataOldValue – if true, pass both the old and the new value of node.data to callback (see below), otherwise
            only the new one (needs characterData option).


        changes are passed in the first argument as a list of MutationRecord objects, and the observer itself as the second 
            argument.


            MutationRecord objects have properties:

                type – mutation type, one of
                    "attributes": attribute modified
                    "characterData": data modified, used for text nodes,
                    "childList": child elements added/removed,
                target – where the change occurred: 
                    an element for "attributes", or text node for "characterData", or an element for a "childList" mutation,
                addedNodes/removedNodes – nodes that were added/removed,
                previousSibling/nextSibling – the previous and next sibling to added/removed nodes,
                attributeName/attributeNamespace – the name/namespace (for XML) of the changed attribute,
                oldValue – the previous value, only for attribute or text changes, if the corresponding option is set attributeOldValue/characterDataOldValue.

Example -

    1)When a child is added to observed Node.
        type - childList
        target - observed element to which new node is added

    2)When a new child is added in the direct child.
        type - childList
        target - child node of observered node to which new content is added.

    3)when a new child is added to grand child of observed node.
        type: "childList"
        target - grandChild to which new Child is added.

    4)When direct child is removed -
        type: "childList"
        target - element being observed

    5)when a grand child is removed -
        type: "childList"
        target: direct child which was parent of removed node

    6)when innerHtml of supergrand child is changed -
        type:childList
        target : node whose innerHtml is changed.

    
There's two things we need to do before anything else.

    a)terminal software - This is the application that runs the command-line environment.
    b)Shell languages - When we type a command into the terminal and press “enter”, that command will be
        interpreted by the shell language.It's essentially the environment running within the terminal 
        application.

        The most popular shell language is Bash.It's linux based shell language.
        Modern MacOS versions ship with Zsh instead of Bash, but Zsh is very similar: it's part of the same "family", and shares 
            almost all of the same commands. For our purposes, they can be used interchangeably.

prompt - The single line of text is known as a prompt. It's called a “prompt” because it's waiting for you to 
    provide some sort of instruction.
 



~ charcter in zsh - On MacOS and Linux, the tilde character is shorthand for the user's home directory. On my machine, “~” is 
    equivalent to “/Users/joshu”.when we open zsh terminal for first time. so when we open terminal, it opens at home directory,
    hence it shows ~ sign.




commands -

    a)pwd - Print working directory
        /Users/susood

    b)ls - shows the content(folders and files) of directory in which you are present. 
        flags -
            1)l - "long”, which prints the directory contents in a detailed list with metadata.
            2)a - "all", which'll include hidden files and directories.

        using mutiple flags -

        ls -la


    c)cd - Change Directory.
        
            1)cd "folder name" => takes you to inside folder
                if folder with name "folder name" does not exist in current directory then it  throws the error.

            2) cd folder1/folder2/folder3/folder4
                
                tab autocomplete(see video)
                    a)you can take help of autocomplete via tab button. type 'cd + space', then tab you will be shown folders.here
                        you are asking for autocomplete based on empty text.you can manually type some folder from shown options and
                        it will be autocompleted and press enter.

                    b)cd "someText" + tab
                        1)now if there is only on match of folder with folderName, it's name will be auto comnpleted, and at last
                        you will see slash , ex -

                            cd f => cd folder/
                             '/' means that this is name of folder(directory) and you can press enter.

                        2)if text is auto completed but does not end with /,it means even after auto complete text, there are
                            more options, if you again press tab it will show you all options. using those options you can try to
                            type something and again press tab, auto complete will happen again.
                        
                        protip - lets say you want to go to folder1/folder2/folder3/folder4. instead of executing cd command 4 times.
                        you can do cd then tab => cd folder1/, then again tab, so options will refreshed each time you press tab.you
                        will see options by pressing tab depending on path which you have given to cd command.
                    c)we can also use Tab to auto-complete Git branches, or fill in the rest of a command.

            3)cd .. => go one level up in directory.
                if you want to move 2 levels down -
                cd ../../

                The dot character (.) has a special meaning in most shell languages:
                    A single dot (.) refers to the current directory.
                    Two dots (..) refer to the parent directory.

                This comes form js import paths. that means in you can navigate like this in terminal -

                cd ../folder1/folder2

            4)cd ../folder1/folder2

            4) cd -
                It lets you move between 2 file paths.lets say you were at path - desktop. from here you moved to this path 
                cd folder1/folder2/folder3/folder4.

                using "cd -" you can go make to desktop.
                if you again press "cd -", it will take you to folder1/folder2/folder3/folder4.

                so you can keep toggling between 2 locations.

                same thing you can do in "git checkout", to keep switching between 2 branches.

                    "git checkout -"

    d)tab autocomplete - You can also use tab to autocomplete git branches and commands.

    4) rm -
        a)rm fileName => deletes the file. you cannot delete directory with rm command. you will need -r flag.
        b)with flags -
            1)rm -r folderName => deletes the folder 
                The he r flag stands for “recursive”. It will delete everything inside the stuff directory, anything inside the 
                directories inside the stuff director

            2)if you run into permission issues use 'f' flag.We can group multiple flags with a single dash, like this:
            rm -rf foldername

                Flags take many shapes and sizes. By convention, it's common for flags to have a short form (eg. -f) and a 
                long form (--force). The long form typically uses two dashes, and uses whole words instead of individual letters

    5)man commandName
        It shows the manual for command.You can press up and down keys to navigate, in mac you can use scroll
        wheel to move up and down.when done press q to quit.
            
    5)ping - The ping command will check the latency against a given IP address. It's useful for checking
        whether a given server is online or not. 8.8.8.8 is the IP address for Google's DNS server.

    6)Interrupting commands -
        a)ctrl + c - to end a long running command
        b)ctrl + d - to end the session(works only when terminal is empty)
        c)If all else fails, you can close the current tab/window, In mac this can be done by - cmd + w

    7)exiting Vi/Vim - These editors are notoriously difficult to quit; ctrl + c won't help you here!.

        To quit without saving, follow these steps:
            way1 -

                a)Press Escape key to switch to command mode.
                b)Press ':', This should add a prompt at the bottom of the terminal.
                c)Type 'q!'
                d)press Enter.
                Vim will discard the changes and quit.
            way 2 -
                a)Press the Escape key to switch to command mode.
                b)Type ':', This should add a prompt at the bottom of the terminal.
                c)Type 'wq'
                d)press Enter.
                Vim will save the changes and quit, and you will return to the command line.


    Tricks -
        8)to open vs code at particular path -
             open path in terminal and press -"code ."
        8)Cycling and toggling commands - 
            a)use up/down key to switch between commands.
            b) use - in commands like "cd" and "git checkout" to toggle between paths and branches.
        9)clearing terminal - 

            a)ctrl + l = works every where, but only works when terminal is empty.

            b)Other shortcuts which works even when terminal is busy -
                a)mac os - cmd + k


                Shortcuts which clear terminal when terminal is busy somes handy in these places -
                    a)let's say you're running a dev server. This is a long-running process, and so the ctrl + L 
                        shortcut won't work
                    b) As you work on the project, lots of messages will be logged in the terminal window. The 
                        application shortcuts allow you to clear away stale logs, as if archiving old emails.

        10)alias - advanced topic out of scope of this article.
            alias hi = 'echo "hello World!"'

        10)Switching to a GUI file explorer -
            In mac - 
                a)"open fileName" The open command is generally used to open a file, the same way double-clicking a file opens it 
                    in a GUI file explorer. 
                b)"open directoryName" - Opens the  directory in finder.
                c)"open ." - Opens the current directory in finder.
            In windows - "explorer ."
            linux - xdg-open 

        11)Chaining commands -
            npm install && npm run start

            The && operator allows us to chain multiple commands together. The first command will be executed, npm install. The moment 
                it finishes, the second command will be run automatically.similarly these git commands can be chained -
                    git add . && git commit -m "Stuff" && git push origin main

        12)terminal tilling and tab - 

            multiple panes - 
                command + d (Horizontal)


            multiple tabs -
                command + t


        
